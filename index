
<!DOCTYPE html>
<html>
<head>
    <title>InsuraTec Connect - Feed</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="format-detection" content="telephone=no" />
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif; 
            background: #f2f2f7; 
            margin: 0; 
            padding: 0; 
            font-weight: 400;
            line-height: 1.47;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            /* Mobile app optimizations */
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            /* Prevent pull-to-refresh on mobile */
            overscroll-behavior: none;
            /* Optimize for mobile performance */
            -webkit-transform: translateZ(0);
            transform: translateZ(0);
        }
        
        /* Allow text selection for content areas */
        .content, .comment-content, textarea, input {
            -webkit-user-select: text;
            -moz-user-select: text;
            -ms-user-select: text;
            user-select: text;
        }
        
        /* Modern Icon System */
        .icon-modern {
            display: inline-block;
            width: 20px;
            height: 20px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            transition: all 0.2s ease;
        }
        
        .icon-modern:hover {
            transform: scale(1.1);
        }
        
        /* Icon size variations */
        .hot-link-icon.icon-modern {
            width: 18px;
            height: 18px;
        }
        
        .input-action.icon-modern {
            width: 16px;
            height: 16px;
        }
        
        .chat-action.icon-modern {
            width: 18px;
            height: 18px;
        }
        
        .action-btn.icon-modern {
            width: 16px;
            height: 16px;
        }
        
        .icon-search { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='m19.6 21-6.3-6.3q-.75.6-1.725.95Q10.6 16 9.5 16q-2.725 0-4.612-1.887Q3 12.225 3 9.5q0-2.725 1.888-4.613Q6.775 3 9.5 3q2.725 0 4.612 1.887Q16 6.775 16 9.5q0 1.1-.35 2.075-.35.975-.95 1.725l6.3 6.3ZM9.5 14q1.875 0 3.188-1.312Q14 11.375 14 9.5q0-1.875-1.312-3.188Q11.375 5 9.5 5q-1.875 0-3.188 1.312Q5 7.625 5 9.5q0 1.875 1.312 3.188Q7.625 14 9.5 14Z'/%3E%3C/svg%3E"); }
        .icon-phone { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z'/%3E%3C/svg%3E"); }
        .icon-video { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z'/%3E%3C/svg%3E"); }
        .icon-chat { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z'/%3E%3C/svg%3E"); }
        .icon-info { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z'/%3E%3C/svg%3E"); }
        .icon-camera { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M12 15.2c1.77 0 3.2-1.43 3.2-3.2s-1.43-3.2-3.2-3.2S8.8 10.23 8.8 12s1.43 3.2 3.2 3.2zm0-5.2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z'/%3E%3C/svg%3E%3Cpath d='M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9z'/%3E%3C/svg%3E"); }
        .icon-attachment { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M7.5 18A5.5 5.5 0 0 1 2 12.5V7c0-3.86 3.14-7 7-7s7 3.14 7 7v5.5c0 2.48-2.02 4.5-4.5 4.5S7 14.98 7 12.5V8c0-.55.45-1 1-1s1 .45 1 1v4.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V7c0-2.76-2.24-5-5-5S2 4.24 2 7v5.5C2 16.43 4.57 19 8 19h8c.55 0 1 .45 1 1s-.45 1-1 1H8z'/%3E%3C/svg%3E"); }
        .icon-emoji { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M9 11H7a1 1 0 0 0 0 2h2a1 1 0 0 0 0-2zM17 11h-2a1 1 0 0 0 0 2h2a1 1 0 0 0 0-2z'/%3E%3Cpath d='M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z'/%3E%3Cpath d='M14.829 14.828a4.055 4.055 0 0 1-1.272.858 4.002 4.002 0 0 1-4.875-1.45l-1.658 1.119a6.063 6.063 0 0 0 1.621 1.62 5.963 5.963 0 0 0 7.45.555l-.266-2.102z'/%3E%3C/svg%3E"); }
        .icon-mic { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z'/%3E%3C/svg%3E"); }
        .icon-sparkle { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M12 6L9.5 9.5 6 12l3.5 2.5L12 18l2.5-3.5L18 12l-3.5-2.5L12 6z'/%3E%3Cpath d='M17 1l1.5 2L21 4.5 19.5 6 17 7.5 15.5 6 14 4.5 15.5 3 17 1zM7.5 8.5L6 7 4.5 8.5 3 7l1.5-1.5L6 4l1.5 1.5L9 7l-1.5 1.5z'/%3E%3C/svg%3E"); }
        .icon-chart { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z'/%3E%3C/svg%3E"); }
        .icon-settings { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z'/%3E%3C/svg%3E"); }
        .icon-document { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h10c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z'/%3E%3C/svg%3E"); }
        .icon-calendar { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z'/%3E%3C/svg%3E"); }
        .icon-policy { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z'/%3E%3C/svg%3E"); }
        .icon-help { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%238e8e93' viewBox='0 0 24 24'%3E%3Cpath d='M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,19H11V17H13V19ZM15.07,11.25L14.17,12.17C13.45,12.9 13,13.5 13,15H11V14.5C11,13.4 11.45,12.4 12.17,11.67L13.41,10.41C13.78,10.05 14,9.55 14,9C14,7.9 13.1,7 12,7C10.9,7 10,7.9 10,9H8C8,6.79 9.79,5 12,5C14.21,5 16,6.79 16,9C16,9.88 15.64,10.68 15.07,11.25Z'/%3E%3C/svg%3E"); }
        .container { 
            width: 100%; 
            height: calc(100vh - 80px); 
            margin: 0; 
            display: flex; 
            gap: 0; 
            padding: 0;
            overflow: hidden;
        }
        .header { 
            background: rgba(255, 255, 255, 0.8); 
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            padding: 12px 24px; 
            color: #1d1d1f; 
            display: flex; 
            align-items: center; 
            justify-content: space-between;
            border-bottom: 0.5px solid rgba(0, 0, 0, 0.1); 
            width: 100%; 
            margin: 0; 
            position: sticky;
            top: 0;
            z-index: 1001;
            box-shadow: 0 1px 0 rgba(0, 0, 0, 0.03);
            height: 80px;
            box-sizing: border-box;
        }
        
        .header-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }
        
        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: background 0.2s ease;
        }
        
        .mobile-menu-btn:hover {
            background: rgba(0, 0, 0, 0.05);
        }
        
        .hamburger {
            width: 24px;
            height: 24px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%231d1d1f' viewBox='0 0 24 24'%3E%3Cpath d='M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z'/%3E%3C/svg%3E");
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }
        
        @media (max-width: 768px) {
            .mobile-menu-btn {
                display: block;
            }
        }
        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
        }
        .logo-container {
            display: flex;
            align-items: center;
            margin-right: 24px;
        }
        .logo {
            height: 60px;
            width: auto;
            object-fit: contain;
        }
        .search-container {
            flex: 1;
            max-width: 400px;
        }
        .search-input-wrapper {
            position: relative;
            width: 100%;
        }
        .search-input {
            width: 100%;
            padding: 12px 16px 12px 44px;
            border: none;
            border-radius: 12px;
            background: #f3f4f6;
            font-size: 14px;
            color: #374151;
            transition: all 0.2s ease;
        }
        .search-input:focus {
            outline: none;
            background: #ffffff;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        .search-input::placeholder {
            color: #9ca3af;
        }
        .search-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .header-right {
            display: flex;
            align-items: center;
            gap: 16px;
        }
        .notification-bell {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            color: #6b7280;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.2s ease;
        }
        .notification-bell:hover {
            background: #f3f4f6;
            color: #374151;
        }
        .notification-dot {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 8px;
            height: 8px;
            background: #ef4444;
            border-radius: 50%;
            border: 2px solid #ffffff;
        }
        .user-section {
            display: flex;
            align-items: center;
            gap: 12px;
            padding-left: 16px;
            border-left: 1px solid #e5e7eb;
        }
        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        .user-details {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }
        .username {
            font-size: 14px;
            font-weight: 600;
            color: #111827;
            line-height: 1.2;
        }
        .user-role {
            display:none;
        }
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #8b5cf6;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }
        .user-avatar:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }
        .user-avatar:active {
            transform: scale(0.98);
        }
        .user-avatar:hover::after {
            content: '📷';
            position: absolute;
            bottom: -2px;
            right: -2px;
            background: #5298fc;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            border: 2px solid white;
        }

        /* Toast notification styles */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        .toast.success {
            background: #10b981;
        }
        .toast.error {
            background: #ef4444;
        }
        .toast.info {
            background: #3b82f6;
        }
        .toast.show {
            transform: translateX(0);
        }
        .logout-button {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            color: #6b7280;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.2s ease;
        }
        .logout-button:hover {
            background: #f3f4f6;
            color: #374151;
        }
        /* Left Sidebar Menu */
        .sidebar { 
            width: 320px;
            min-width: 320px;
            background: #ffffff; 
            border-right: 0.5px solid rgba(0, 0, 0, 0.1);
            padding: 0;
            height: 100%;
            overflow-y: auto;
            transition: transform 0.3s ease;
        }
        
        /* Main Content Area */
        .main { 
            flex: 1; 
            background: #ffffff; 
            padding: 0;
            height: 100%;
            overflow-y: auto;
        }
        
        /* Enhanced Mobile Responsive Design for App Embedding */
        
        /* Small Mobile Devices (320px - 480px) */
        @media (max-width: 480px) {
            .header {
                height: 60px;
                padding: 8px 16px;
            }
            
            .logo {
                height: 40px;
            }
            
            .search-container {
                max-width: 200px;
            }
            
            .search-input {
                padding: 8px 12px 8px 36px;
                font-size: 13px;
            }
            
            .search-icon {
                left: 12px;
                font-size: 14px;
            }
            
            .notification-bell {
                width: 32px;
                height: 32px;
            }
            
            .container {
                height: calc(100vh - 60px);
            }
            
            .sidebar {
                top: 60px;
                width: 100%;
                height: calc(100vh - 60px);
            }
            
            .post {
                margin: 8px;
                padding: 12px;
                border-radius: 12px;
            }
            
            .post-input {
                margin: 8px;
                padding: 12px;
            }
            
            .post-input button {
                padding: 10px 16px;
                font-size: 13px;
            }
            
            .user-info img {
                width: 32px;
                height: 32px;
            }
            
            .name {
                font-size: 14px;
            }
            
            .time {
                font-size: 11px;
            }
            
            .audience-badge, .post-type-badge {
                padding: 2px 4px;
                font-size: 10px;
            }
            
            .content {
                font-size: 14px;
                line-height: 1.4;
            }
            
            .post-actions {
                padding: 8px 0;
            }
            
            .action-btn {
                padding: 6px 8px;
                font-size: 12px;
            }
            
            .comment-avatar {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                object-fit: cover;
                border: 2px solid #fff;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            
            .comment-content {
                font-size: 13px;
            }
            
            .comment-meta {
                font-size: 11px;
            }
            
            /* Modal adjustments for small screens */
            .modal-content {
                width: calc(100% - 32px);
                margin: 4% auto;
                max-height: 90vh;
            }
            
            .modal-body {
                padding: 16px;
            }
            
            /* Photo upload modal adjustments */
            #photoUploadModal .modal-content {
                width: calc(100% - 32px);
                margin: 4% auto;
            }
            
            .upload-area {
                min-height: 120px;
            }
            
            .uploaded-photo-item {
                width: 80px;
                height: 80px;
            }
            
            .uploaded-photo-item img {
                height: 60px;
                max-height: 120px;
            }
        }
        
        /* Medium Mobile Devices (481px - 768px) */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                left: 0;
                top: 80px;
                width: 280px;
                height: calc(100vh - 80px);
                z-index: 1000;
                transform: translateX(-100%);
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            }
            
            .sidebar.open {
                transform: translateX(0);
            }
            
            .main {
                width: 100%;
                margin-left: 0;
            }
            
            .mobile-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.5);
                z-index: 999;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
            }
            
            .mobile-overlay.active {
                opacity: 1;
                visibility: visible;
            }
            
            .post {
                margin: 12px;
                padding: 16px;
            }
            
            .post-input {
                margin: 12px;
                padding: 16px;
            }
            
            /* Modal adjustments */
            .modal-content {
                width: calc(100% - 48px);
                margin: 2% auto;
            }
            
            #photoUploadModal .modal-content {
                width: calc(100% - 48px);
                margin: 2% auto;
            }
        }
        
        /* Large Mobile Devices (769px - 1024px) */
        @media (min-width: 769px) and (max-width: 1024px) {
            .container {
                max-width: 100%;
            }
            
            .main {
                max-width: 800px;
                margin: 0 auto;
            }
            
            .sidebar {
                width: 280px;
            }
            
            .post {
                margin: 16px;
                padding: 20px;
            }
        }
        
        /* App-specific optimizations */
        @media (max-width: 1024px) {
            /* Prevent horizontal scrolling */
            body {
                overflow-x: hidden;
                -webkit-overflow-scrolling: touch;
            }
            
            /* Optimize touch targets */
            .action-btn, .comment-action, .notification-bell {
                min-height: 44px;
                min-width: 44px;
            }
            
            /* Improve text readability */
            .content, .comment-content {
                font-size: 16px;
                line-height: 1.5;
                -webkit-font-smoothing: antialiased;
            }
            
            /* Optimize images for mobile */
            .post-images img, .comment-content img {
                max-width: 100%;
                height: auto;
                border-radius: 8px;
            }
            
            /* Better modal handling for mobile */
            .modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0,0,0,0.5);
                -webkit-overflow-scrolling: touch;
            }
            
            .modal-content {
                background-color: #fefefe;
                margin: 5% auto;
                padding: 0;
                border-radius: 10px;
                width: 90%;
                max-width: 600px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                max-height: 90vh;
                overflow-y: auto;
            }
            
            /* Improve reaction picker for mobile */
            .reaction-picker {
                position: fixed;
                bottom: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: white;
                border-radius: 12px;
                padding: 12px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                z-index: 1001;
            }
            
            /* Optimize comment input for mobile */
            .comment-compose {
                padding: 12px;
            }
            
            .comment-compose textarea {
                min-height: 44px;
                font-size: 16px;
                padding: 12px;
            }
            
            /* Better spacing for mobile */
            .comment {
                margin-bottom: 12px;
                padding: 8px 0;
            }
            
            .comment-bubble {
                padding: 8px 12px;
                border-radius: 18px;
            }
        }
        
        /* iOS Safari specific optimizations */
        @supports (-webkit-touch-callout: none) {
            .container {
                height: calc(100vh - 80px - env(safe-area-inset-top) - env(safe-area-inset-bottom));
            }
            
            .header {
                padding-top: calc(12px + env(safe-area-inset-top));
                padding-bottom: 12px;
            }
            
            .sidebar {
                padding-top: env(safe-area-inset-top);
                padding-bottom: env(safe-area-inset-bottom);
            }
            
            .modal-content {
                margin-top: calc(5% + env(safe-area-inset-top));
                margin-bottom: calc(5% + env(safe-area-inset-bottom));
            }
        }
        
        /* Android Chrome specific optimizations */
        @media screen and (-webkit-min-device-pixel-ratio: 0) {
            .container {
                height: calc(100vh - 80px);
            }
            
            /* Prevent zoom on input focus */
            input, textarea, select {
                font-size: 16px;
            }
        }
        .post-input { margin-bottom: 20px; display: flex; gap: 10px; align-items: flex-start; }
        .post-input .input-section { flex: 1; }
        .post-input .search-section { flex: 0 0 auto; }
        .post-input input { width: 100%; padding: 10px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px; }
        .post-input button { 
            background: #007AFF; 
            color: #ffffff; 
            border: none; 
            padding: 12px 24px; 
            border-radius: 12px; 
            cursor: pointer; 
            font-weight: 600;
            font-size: 14px;
            transition: all 0.2s ease;
        }
        .post-input button:hover {
            background: #005DC7;
            transform: translateY(-1px);
        }
        .post-input .search-input { width: 200px; padding: 8px 12px; border: 1px solid #ddd; border-radius: 5px; font-size: 12px; margin: 0; }
        .post-input .search-input:focus { outline: none; border-color: #007AFF; }
        .notice { background: #f9f9f9; padding: 10px; border-radius: 5px; margin-bottom: 20px; }
        .notice-item { margin: 5px 0; }
        /* Sidebar Content Sections */
        .sidebar-section {
            padding: 16px;
        }
        
        .sidebar-section:last-child {
            border-bottom: none;
        }
        
        .sidebar-section h3 {
            margin: 0 0 16px 0;
            font-size: 17px;
            font-weight: 600;
            color: #1d1d1f;
        }
        
        .admin-notices { 
            background: #f8f9fa; 
            border: 0.5px solid rgba(0, 122, 255, 0.2); 
            border-radius: 12px; 
            padding: 16px; 
            margin-bottom: 20px; 
            overflow: hidden; 
            height: 100px; 
            position: relative;
        }
        .admin-notices h3 { 
            color: #007AFF; 
            margin: 0 0 12px 0; 
            font-size: 17px; 
            font-weight: 600;
            display: flex; 
            align-items: center; 
        }
        .admin-notices h3::before { 
            content: ""; 
            display: inline-block;
            width: 20px;
            height: 20px;
            margin-right: 8px;
            background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23007AFF' viewBox='0 0 24 24'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z'/%3E%3C/svg%3E") no-repeat center;
            background-size: contain;
        }
        .notices-container { height: 90px; overflow: hidden; position: relative; }
        .notices-list { transition: transform 0.5s ease-in-out; }
        .notice-item { 
            background: #f8f9fa; 
            border-radius: 12px; 
            padding: 12px 16px; 
            margin-bottom: 8px; 
            box-shadow: none;
            border: none;
            border-left: 3px solid #007AFF; 
        }
        .notice-title { font-weight: bold; color: #333; margin-bottom: 5px; }
        .notice-content { color: #666; font-size: 14px; }
        .notice-date { color: #999; font-size: 12px; margin-top: 5px; }
        .no-notices { text-align: center; color: #999; padding: 20px; }
        .post { 
            margin-bottom: 24px; 
            background: #ffffff; 
            border-radius: 16px; 
            padding: 20px; 
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border: 0.5px solid rgba(0, 0, 0, 0.05);
        }
        .post .user-info { display: flex; align-items: center; gap: 10px; margin-bottom: 10px; }
        .post .user-info img { 
            width: 40px; 
            height: 40px; 
            border-radius: 50%; 
            object-fit: cover;
            border: 2px solid #fff;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .post .user-info .name { font-weight: 600; color: #1d1d1f; letter-spacing: -0.01em; }
        .post .user-info .time { color: #8e8e93; font-size: 13px; }
        .post .content { margin-bottom: 16px; line-height: 1.47; color: #1d1d1f; }
        .post .metrics { display: flex; align-items: center; gap: 15px; margin-bottom: 10px; padding-bottom: 10px; border-bottom: 1px solid #eee; }
        .post .metric { display: flex; align-items: center; gap: 5px; font-size: 12px; color: #666; }
        .post .metric .icon { font-size: 14px; }
        .post .metric .count { font-weight: bold; }
        .post .actions { display: flex; gap: 15px; }
        .post .action-btn { background: none; border: none; cursor: pointer; padding: 8px 12px; border-radius: 5px; font-size: 12px; color: #666; display: flex; align-items: center; gap: 5px; transition: background-color 0.2s; }
        .post .action-btn:hover { background: #f5f5f5; }
        .post .action-btn .emoji { font-size: 14px; }
        .post .post-menu { position: absolute; top: 10px; right: 10px; background: none; border: none; cursor: pointer; color: #888; font-size: 16px; }
        .post .post-menu:hover { color: #333; }
        .post { position: relative; }
        .post-actions { margin-left: 50px; margin-top: 10px; display: flex; gap: 15px; }
        .post-actions button { background: none; border: none; cursor: pointer; padding: 6px 12px; border-radius: 6px; font-size: 13px; color: #65676b; font-weight: 500; transition: background-color 0.2s ease; }
        .post-actions button:hover { background: #f0f0f0; }
        .post-actions button.liked { color: #ff4757; font-weight: 600; }
        .post-actions button.liked:hover { background: #ffe0e0; }
        .comments-section { margin-left: 50px; margin-top: 10px; border-top: 1px solid #eee; padding-top: 10px; }
        .comment-input { display: flex; gap: 10px; margin-bottom: 10px; }
        .comment-input input { flex: 1; padding: 8px; border: 1px solid #ddd; border-radius: 3px; font-size: 12px; }
        .comment-input button { background: #5298fc; color: white; border: none; padding: 10px 18px; border-radius: 8px; cursor: pointer; font-size: 13px; font-weight: 500; transition: background-color 0.2s ease; }
        .comment-input button:hover { background: #4285e8; }
        .comment { margin-bottom: 8px; padding: 5px; background: #f9f9f9; border-radius: 3px; font-size: 12px; }
        .comment .comment-user { font-weight: bold; color: #333; }
        .comment .comment-content { margin-top: 2px; }
        .comment .comment-time { font-size: 10px; color: #888; margin-top: 2px; }
        .comment-header { display: flex; align-items: center; gap: 8px; margin-bottom: 5px; }
        .comment-avatar { width: 25px; height: 25px; border-radius: 50%; }
        .comment-user-info { display: flex; flex-direction: column; }
        .comment-username { font-weight: 600; color: #1c1e21; font-size: 13px; letter-spacing: -0.01em; }
        .comment-time { font-size: 9px; color: #888; }
        .comment-actions { display: flex; align-items: center; gap: 10px; margin-top: 5px; }
        .comment-reactions { display: flex; gap: 5px; }
        .reaction-btn { background: none; border: none; cursor: pointer; padding: 2px 4px; border-radius: 3px; font-size: 10px; }
        .reaction-btn:hover { background: #f0f0f0; }
        .reaction-count { font-size: 9px; color: #666; margin-left: 2px; }
        .post-views { margin-left: 50px; margin-top: 8px; font-size: 11px; color: #666; display: flex; align-items: center; gap: 5px; }
        .post-views .view-icon { font-size: 12px; }
        .post-views .view-count { font-weight: bold; }
        .post-views:hover { color: #333; }
        /* Reaction picker - Band APP style */
        .reaction-picker { position: absolute; background: white; border: 1px solid #e1e5e9; border-radius: 24px; padding: 8px 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); z-index: 1000; display: none; }
        .reaction-picker .emoji-options { display: flex; gap: 4px; }
        .reaction-picker .emoji-option { cursor: pointer; padding: 8px; border-radius: 50%; font-size: 20px; transition: transform 0.1s ease; }
        .reaction-picker .emoji-option:hover { transform: scale(1.3); background: #f2f3f4; }
        .reaction-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: transparent; z-index: 999; display: none; }
        .sidebar-section { margin-bottom: 20px; }
        .sidebar-section h3 { font-size: 14px; color: #888; margin-bottom: 10px; }
        .sidebar-section .file-item { margin-bottom: 5px; }
        .sidebar-section .photo-grid img { width: 100%; margin-bottom: 10px; }
        .empty-state { text-align: center; padding: 20px; color: #888; font-size: 12px; }
        
        /* Modal Styles */
        .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); }
        .modal-content { background-color: #fefefe; margin: 5% auto; padding: 0; border-radius: 10px; width: 600px; max-width: 90%; box-shadow: 0 4px 20px rgba(0,0,0,0.3); }
        
        /* Photo Upload Modal - Match feed width */
        #photoUploadModal {
            width: calc(100% - 48px); /* Match feed width with padding */
            max-width: 1200px; /* Maximum width for larger screens */
            margin: 2% auto;
            background-color: #ffffff;
            border: 1px solid #e9ecef;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            border-radius: 10px;
        }
        
        /* Reduce overlay opacity for photo upload modal */
        #photoUploadModalOverlay {
            background-color: rgba(0,0,0,0.3);
        }
        
        /* Image popup modal styles */
        #imagePopupModal {
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            margin: 5vh auto;
            background-color: #ffffff;
            border: 1px solid #e9ecef;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        
        #imagePopupOverlay {
            background-color: rgba(0,0,0,0.5);
        }
        .modal-header { padding: 15px 20px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
        .modal-header h2 { margin: 0; font-size: 18px; }
        .close { color: #aaa; font-size: 28px; font-weight: bold; cursor: pointer; }
        .close:hover { color: #000; }
        .modal-body { padding: 20px; }
        .toolbar { display: flex; gap: 10px; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #eee; }
        .toolbar button { background: none; border: none; cursor: pointer; padding: 6px 10px; border-radius: 6px; font-weight: 500; transition: background-color 0.2s ease; }
        .toolbar button:hover { background: #f0f0f0; }
        .toolbar button.active { background: #00aaff; color: white; }
        .post-textarea { width: 100%; min-height: 150px; border: none; resize: vertical; font-family: inherit; font-size: 14px; outline: none; }
        .label-selector { margin: 15px 0; padding: 10px; background: #f9f9f9; border-radius: 5px; color: #666; cursor: pointer; }
        .label-selector:hover { background: #f0f0f0; }
        
        /* Audience and Post Type Selectors */
        .audience-selector, .post-type-selector { margin: 15px 0; }
        .audience-options, .post-type-options { 
            display: grid; 
            grid-template-columns: repeat(2, 1fr); 
            gap: 10px; 
            margin-top: 8px; 
        }
        .audience-option, .post-type-option { 
            display: flex; 
            align-items: center; 
            padding: 10px; 
            background: #f8f9fa; 
            border: 2px solid #e9ecef; 
            border-radius: 8px; 
            cursor: pointer; 
            transition: all 0.2s ease; 
        }
        .audience-option:hover, .post-type-option:hover { 
            background: #e9ecef; 
            border-color: #5298fc; 
        }
        .audience-option input[type="radio"], .post-type-option input[type="radio"] { 
            margin-right: 8px; 
            accent-color: #5298fc; 
        }
        .audience-option input[type="radio"]:checked + .audience-label,
        .post-type-option input[type="radio"]:checked + .post-type-label { 
            color: #5298fc; 
            font-weight: 600; 
        }
        .audience-option:has(input[type="radio"]:checked),
        .post-type-option:has(input[type="radio"]:checked) { 
            background: #e3f2fd; 
            border-color: #5298fc; 
        }
        .audience-label, .post-type-label { 
            font-size: 14px; 
            color: #333; 
            font-weight: 500; 
        }
        
        /* Compact Post Controls */
        .post-top-controls {
            margin-bottom: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        
        .control-group {
            margin-bottom: 15px;
        }
        
        .control-group:last-child {
            margin-bottom: 0;
        }
        
        .control-label {
            display: block;
            font-weight: 600;
            color: #333;
            font-size: 12px;
            margin-bottom: 8px;
        }
        
        .compact-options {
            display: flex;
            gap: 6px;
        }
        
        .compact-option {
            display: flex;
            align-items: center;
            padding: 6px 12px;
            background: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 12px;
            font-weight: 500;
            flex: 1;
            justify-content: center;
        }
        
        .compact-option:hover {
            background: #e9ecef;
            border-color: #5298fc;
        }
        
        .compact-option input[type="radio"] {
            margin-right: 4px;
            accent-color: #5298fc;
            transform: scale(0.8);
        }
        
        .compact-option input[type="radio"]:checked + span {
            color: #5298fc;
            font-weight: 600;
        }
        
        .compact-option:has(input[type="radio"]:checked) {
            background: #e3f2fd;
            border-color: #5298fc;
        }
        
        .compact-option.custom-filter {
            background: #fff3cd;
            border-color: #ffc107;
        }
        
        .compact-option.custom-filter:hover {
            background: #ffeaa7;
        }
        
        .compact-option.custom-filter input[type="radio"]:checked + span {
            color: #856404;
        }
        
        .compact-option.custom-filter:has(input[type="radio"]:checked) {
            background: #fff3cd;
            border-color: #ffc107;
        }
        
        /* Audience Selector Styles */
        .audience-selector {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .audience-search {
            position: relative;
            display: flex;
            align-items: center;
        }
        
        .search-icon {
            position: absolute;
            left: 12px;
            color: #5298fc;
            font-size: 14px;
        }
        
        .audience-search-input {
            width: 100%;
            padding: 8px 12px 8px 36px;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
            background: #ffffff;
        }
        
        .audience-search-input:focus {
            outline: none;
            border-color: #5298fc;
            box-shadow: 0 0 0 2px rgba(82, 152, 252, 0.1);
        }
        
        .audience-buttons {
            display: flex;
            gap: 6px;
            padding: 12px;
            background: #e3f2fd;
            border-radius: 8px;
            border: 1px solid #bbdefb;
        }
        
        .audience-btn {
            padding: 6px 10px;
            border: 1px solid #e9ecef;
            background: #e3f2fd;
            color: #333;
            border-radius: 6px;
            cursor: pointer;
            font-size: 11px;
            font-weight: 500;
            transition: all 0.2s ease;
            flex: 1;
            white-space: nowrap;
        }
        
        .audience-btn:hover {
            background: #bbdefb;
            border-color: #5298fc;
        }
        
        .audience-btn.selected {
            background: #ffffff;
            border-color: #e9ecef;
            color: #333;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        

        
        /* Other option with input */
        .compact-option.other-option {
            position: relative;
        }
        
        .other-input {
            width: 100%;
            padding: 4px 8px;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            font-size: 12px;
            background: #ffffff;
            margin-top: 4px;
            display: none;
        }
        
        .compact-option.other-option:has(input[type="radio"]:checked) .other-input {
            display: block;
        }
        

        
        /* Slack-style Editor */
        .slack-editor {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .rich-text-toolbar {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            background: #ffffff;
            border-bottom: 1px solid #e9ecef;
            gap: 4px;
        }
        
        .toolbar-btn {
            background: none;
            border: none;
            padding: 4px 6px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            color: #666;
            transition: all 0.2s ease;
        }
        
        .toolbar-btn:hover {
            background: #f1f3f4;
            color: #333;
        }
        
        .toolbar-btn.active {
            background: #e3f2fd;
            color: #1976d2;
        }
        
        .toolbar-divider {
            width: 1px;
            height: 16px;
            background: #e9ecef;
            margin: 0 2px;
        }
        
        .text-input-container {
            padding: 12px;
            background: #ffffff;
        }
        
        .post-textarea {
            width: 100%;
            min-height: 120px;
            border: none;
            outline: none;
            resize: vertical;
            font-family: inherit;
            font-size: 14px;
            line-height: 1.5;
            background: transparent;
        }
        
        .image-preview-container {
            margin: 10px 0;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        
        .image-preview-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            font-size: 14px;
            font-weight: 500;
            color: #333;
        }
        
        .clear-images-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
        }
        
        .clear-images-btn:hover {
            background: #c82333;
        }
        
        .image-preview-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 10px;
        }
        
        .image-preview-item {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .image-preview-item img {
            width: 100%;
            height: 120px;
            object-fit: cover;
            display: block;
        }
        
        .image-preview-item .remove-image {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0,0,0,0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .image-preview-item .remove-image:hover {
            background: rgba(220,53,69,0.9);
        }
        
        /* Enhanced Photo Upload Interface Styles */
        .photo-upload-container {
            margin: 20px 0;
            padding: 20px;
            background: #ffffff;
            border-radius: 12px;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }
        
        .upload-header {
            margin-bottom: 16px;
        }
        
        .upload-header h3 {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin: 0 0 8px 0;
        }
        
        .upload-tip {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .tip-label {
            background: #28a745;
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .tip-text {
            font-size: 12px;
            color: #666;
        }
        
        .upload-stats {
            display: flex;
            gap: 16px;
            margin-bottom: 16px;
            font-size: 12px;
            color: #666;
        }
        
        .photo-count, .gif-count {
            font-weight: 500;
        }
        
        .upload-area {
            position: relative;
            min-height: 120px;
            border: 2px dashed #ddd;
            border-radius: 8px;
            background: #fafafa;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }
        
        .upload-area.drag-over {
            border-color: #007bff;
            background: #f0f8ff;
        }
        
        .upload-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 120px;
            cursor: pointer;
        }
        
        .upload-icon {
            font-size: 32px;
            color: #999;
            margin-bottom: 8px;
        }
        
        .upload-text {
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }
        
        .uploaded-photos {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 8px;
            padding: 12px;
        }
        
        .uploaded-photo-item {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            cursor: move;
        }
        
        .uploaded-photo-item img {
            width: 100%;
            height: 100px;
            max-height: 200px;
            object-fit: cover;
            display: block;
        }
        
        .uploaded-photo-item .remove-photo {
            position: absolute;
            top: 4px;
            right: 4px;
            background: rgba(0,0,0,0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            cursor: pointer;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .uploaded-photo-item .remove-photo:hover {
            background: rgba(220,53,69,0.9);
        }
        
        .upload-options {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        

        
        .album-selection {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .album-label {
            font-size: 14px;
            font-weight: 500;
            color: #333;
        }
        
        .album-dropdown {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            background: white;
            cursor: pointer;
        }
        
        .album-dropdown:focus {
            outline: none;
            border-color: #007bff;
        }
        

        
        .post-textarea::placeholder {
            color: #adb5bd;
        }
        
        .action-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            background: #ffffff;
            border-top: 1px solid #e9ecef;
        }
        
        .action-left {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .action-divider {
            width: 1px;
            height: 20px;
            background: #ddd;
            margin: 0 8px;
        }
        
        .action-btn {
            background: none;
            border: none;
            padding: 4px 6px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            color: #666;
            transition: all 0.2s ease;
            min-width: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .action-btn:hover {
            background: #f1f3f4;
            color: #333;
        }
        
        .action-right {
            display: flex;
            align-items: center;
        }
        
        .send-btn {
            display: flex;
            align-items: center;
            gap: 4px;
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        
        .send-btn:hover {
            background: #0056b3;
        }
        
        .send-icon {
            font-size: 14px;
        }
        
        .send-arrow {
            font-size: 10px;
            margin-left: 2px;
        }

        /* Post Settings Modal Styles */
        .settings-section {
            margin-bottom: 24px;
        }
        
        .settings-section h3 {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 12px;
            padding-bottom: 6px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 0;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .setting-item:last-child {
            border-bottom: none;
        }
        
        .setting-info {
            flex: 1;
            margin-right: 16px;
        }
        
        .setting-description {
            font-size: 12px;
            color: #666;
            margin-top: 4px;
            line-height: 1.4;
        }
        
        .setting-label {
            font-size: 14px;
            color: #333;
            font-weight: 500;
        }
        
        .setting-select {
            padding: 8px 12px;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
            background: #ffffff;
            min-width: 150px;
        }
        
        .setting-input {
            padding: 8px 12px;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
            background: #ffffff;
        }
        
        .setting-toggle {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }
        
        .setting-toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }
        
        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        .setting-toggle input:checked + .toggle-slider {
            background-color: #5298fc;
        }
        
        .setting-toggle input:checked + .toggle-slider:before {
            transform: translateX(20px);
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s ease;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
        }
        
        .btn-primary {
            background: #5298fc;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s ease;
        }
        
        .btn-primary:hover {
            background: #3d7bd9;
        }
        
        /* Add Options Popup Styles */
        .add-options-popup {
            position: fixed;
            display: none;
            background: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            min-width: 180px;
            overflow: hidden;
        }
        .popup-option {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 1px solid #f8f9fa;
        }
        .popup-option:last-child {
            border-bottom: none;
        }
        .popup-option:hover {
            background: #f8f9fa;
            color: #5298fc;
        }
        .popup-option-icon {
            font-size: 18px;
            width: 20px;
            text-align: center;
        }
        .popup-option-text {
            font-size: 14px;
            font-weight: 500;
            color: #333;
        }
        .popup-option:hover .popup-option-text {
            color: #5298fc;
        }
        
        /* Emoji Picker Modal Styles */
        .emoji-options {
            display: flex;
            gap: 4px;
            padding: 8px 12px;
            justify-content: center;
        }
        
        .emoji-option {
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            font-size: 20px;
            transition: transform 0.1s ease;
        }
        
        .emoji-option:hover {
            transform: scale(1.3);
            background: #f2f3f4;
        }
        
        .emoji-actions {
            display: flex;
            gap: 16px;
            padding: 12px 20px;
            justify-content: flex-end;
        }
        
        .emoji-action {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 6px;
            transition: background-color 0.2s ease;
        }
        
        .emoji-action:hover {
            background-color: #f0f0f0;
        }
        
        .action-text {
            font-size: 14px;
            color: #333;
        }
        
        .custom-emoji-section {
            border-top: 1px solid #e9ecef;
            padding-top: 20px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .custom-emoji-section label {
            font-size: 14px;
            font-weight: 500;
            color: #333;
        }
        
        .custom-emoji-section input {
            padding: 8px 12px;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .custom-emoji-section input:focus {
            outline: none;
            border-color: #5298fc;
            box-shadow: 0 0 0 2px rgba(82, 152, 252, 0.1);
        }
        
        /* Font Style Picker */
        .font-style-picker {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
            padding: 8px 0;
            min-width: 150px;
        }
        
        .font-style-option {
            padding: 8px 16px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s ease;
        }
        
        .font-style-option:hover {
            background-color: #f0f0f0;
        }
        
        /* Policy Info Modal Styles */
        .policy-info-modal {
            max-width: 900px;
            max-height: 85vh;
            overflow-y: auto;
        }
        .openphone-interface {
            display: flex;
            height: 500px;
            background: #ffffff;
            border-radius: 8px;
            overflow: hidden;
        }
        
        /* Left Panel: Conversation List */
        .conversation-panel {
            width: 280px;
            border-right: 1px solid #e1e5e9;
            background: #f8f9fa;
            display: flex;
            flex-direction: column;
        }
        
        /* Conversation Tabs */
        .conversation-tabs {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            border-bottom: 1px solid #e1e5e9;
            background: #ffffff;
        }
        .tab-btn {
            font-size: 16px;
            font-weight: 500;
            color: #666;
            cursor: pointer;
            padding: 8px 0;
            margin-right: 20px;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }
        .tab-btn.active {
            color: #5298fc;
            border-bottom-color: #5298fc;
        }
        .tab-actions {
            margin-left: auto;
            display: flex;
            gap: 12px;
        }
        .action-btn {
            font-size: 18px;
            cursor: pointer;
            color: #666;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        .action-btn:hover {
            color: #5298fc;
            background: #f0f8ff;
        }
        
        /* Conversation Filters */
        .conversation-filters {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            border-bottom: 1px solid #e1e5e9;
            background: #ffffff;
        }
        .filter-dropdown {
            display: flex;
            align-items: center;
            gap: 4px;
            padding: 6px 12px;
            background: #f8f9fa;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            color: #333;
        }
        .filter-text {
            font-weight: 500;
        }
        .dropdown-arrow {
            font-size: 12px;
            color: #666;
        }
        .filter-chip {
            padding: 4px 8px;
            font-size: 12px;
            color: #666;
            background: #f8f9fa;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .filter-chip:hover {
            background: #e9ecef;
        }
        .filter-icon {
            margin-left: auto;
            font-size: 14px;
            color: #666;
            cursor: pointer;
        }
        
        /* Conversation List */
        .conversation-list {
            flex: 1;
            overflow-y: auto;
        }
        .conversation-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            cursor: pointer;
            border-bottom: 1px solid #e1e5e9;
            transition: all 0.2s ease;
            position: relative;
        }
        .conversation-item:hover {
            background: #f8f9fa;
        }
        .conversation-item.active {
            background: #e3f2fd;
            border-left: 3px solid #5298fc;
        }
        .conversation-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            flex-shrink: 0;
        }
        .conversation-info {
            flex: 1;
            min-width: 0;
        }
        .conversation-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 4px;
        }
        .conversation-name {
            font-size: 14px;
            font-weight: 600;
            color: #333;
        }
        .conversation-time {
            font-size: 12px;
            color: #666;
        }
        .conversation-preview {
            font-size: 12px;
            color: #666;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .unread-badge {
            position: absolute;
            top: 8px;
            right: 8px;
            background: #5298fc;
            color: white;
            font-size: 11px;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 10px;
            min-width: 16px;
            text-align: center;
        }
        
        /* Right Panel: Chat Interface */
        .chat-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #ffffff;
        }
        
        /* Chat Header */
        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 20px;
            border-bottom: 1px solid #e1e5e9;
            background: #ffffff;
        }
        .contact-info {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .contact-number {
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }
        .chat-actions {
            display: flex;
            gap: 12px;
        }
        .chat-action {
            font-size: 18px;
            cursor: pointer;
            color: #666;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        .chat-action:hover {
            color: #5298fc;
            background: #f0f8ff;
        }
        .chat-action.close-chat {
            font-size: 16px;
            font-weight: bold;
            color: #999;
        }
        .chat-action.close-chat:hover {
            color: #ff4444;
            background: #ffe6e6;
        }
        
        /* Messages Area */
        .messages-area {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #ffffff;
        }
        .message-timestamp {
            text-align: center;
            font-size: 12px;
            color: #666;
            margin: 20px 0 10px 0;
            font-weight: 500;
        }
        .message {
            display: flex;
            align-items: flex-end;
            margin-bottom: 12px;
            position: relative;
        }
        .message.outgoing {
            justify-content: flex-end;
        }
        .message.incoming {
            justify-content: flex-start;
        }
        .message-bubble {
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            position: relative;
        }
        .message.outgoing .message-bubble {
            background: #5298fc;
            color: white;
            border-bottom-right-radius: 4px;
        }
        .message.incoming .message-bubble {
            background: white;
            color: #333;
            border: 1px solid #e1e5e9;
            border-bottom-left-radius: 4px;
        }
        .message-text {
            font-size: 14px;
            line-height: 1.4;
            word-wrap: break-word;
        }
        .message-time {
            font-size: 11px;
            opacity: 0.7;
            margin-top: 4px;
        }
        .message-logo {
            position: absolute;
            right: -8px;
            bottom: -8px;
            background: #ff6b35;
            color: white;
            font-size: 10px;
            font-weight: 600;
            padding: 2px 4px;
            border-radius: 4px;
            text-align: center;
            line-height: 1;
        }
        
        /* Message Input Area */
        .message-input-area {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 16px 20px;
            border-top: 1px solid #e1e5e9;
            background: #ffffff;
        }
        .input-actions {
            display: flex;
            gap: 8px;
        }
        .input-action {
            font-size: 18px;
            cursor: pointer;
            color: #666;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        .input-action:hover {
            color: #5298fc;
            background: #f0f8ff;
        }
        .message-input-container {
            flex: 1;
        }
        .message-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #e1e5e9;
            border-radius: 20px;
            font-size: 14px;
            outline: none;
            transition: all 0.2s ease;
        }
        .message-input:focus {
            border-color: #5298fc;
            box-shadow: 0 0 0 2px rgba(82, 152, 252, 0.1);
        }
        .send-button {
            background: #5298fc;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .send-button:hover {
            background: #2d7af0;
            transform: scale(1.05);
        }
        .send-icon {
            color: white;
            font-size: 16px;
            margin-left: 2px;
        }
        
        .detail-label {
            font-weight: 500;
            color: #666;
            font-size: 14px;
        }
        .detail-value {
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }
        
        .page-link {
            background: #f0f8ff;
            border: 1px solid #5298fc;
            border-radius: 6px;
            text-decoration: none;
            color: #5298fc;
            font-size: 14px;
            text-align: center;
            transition: background-color 0.2s ease;
        }
        .page-link:hover {
            background: #e6f3ff;
        }
        .page-link-icon {
            margin-right: 6px;
        }
        .admin-only {
            display: none;
        }
        .admin-only.show {
            display: block;
        }
        
        /* Phone Interface Styles */
        .phone-header {
            background: #000;
            color: white;
            border-radius: 8px 8px 0 0;
        }
        .phone-status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 4px 12px;
            font-size: 11px;
            background: #000;
        }
        .status-icons {
            display: flex;
            gap: 2px;
        }
        .status-icon, .battery-icon {
            font-size: 10px;
        }
        .messages-header {
            background: #f8f9fa;
            color: #333;
            padding: 8px 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e9ecef;
        }
        .contact-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        .back-arrow {
            font-size: 18px;
            cursor: pointer;
            color: #5298fc;
        }
        .contact-details {
            display: flex;
            flex-direction: column;
        }
        .contact-number {
            font-size: 16px;
            font-weight: 600;
        }
        .contact-status {
            font-size: 12px;
            color: #28a745;
        }
        
        /* SMS Message Styles */
        .policy-messages {
            background: #f0f0f0;
            padding: 8px;
            min-height: 300px;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }
        .message-timestamp {
            text-align: center;
            color: #666;
            font-size: 11px;
            margin: 4px 0;
        }
        .sms-message {
            display: flex;
            align-items: flex-end;
            gap: 6px;
            margin-bottom: 4px;
        }
        .sms-message.incoming {
            justify-content: flex-start;
        }
        .sms-message.outgoing {
            justify-content: flex-end;
        }
        .message-bubble {
            max-width: 75%;
            padding: 8px 12px;
            border-radius: 16px;
            position: relative;
        }
        .sms-message.incoming .message-bubble {
            background: #e3f2fd;
            color: #333;
            border-bottom-left-radius: 4px;
        }
        .sms-message.outgoing .message-bubble {
            background: #5298fc;
            color: white;
            border-bottom-right-radius: 4px;
        }
        .message-text {
            font-size: 13px;
            line-height: 1.3;
            word-wrap: break-word;
        }
        .message-time {
            font-size: 10px;
            opacity: 0.7;
            margin-top: 2px;
            text-align: right;
        }
        .message-logo {
            font-size: 9px;
            color: #666;
            text-align: center;
            line-height: 1.1;
        }
        .auto-reply-label {
            font-size: 9px;
            color: #666;
            text-align: center;
            margin-bottom: 2px;
            font-style: italic;
        }
        
        /* Message Input Area */
        .message-input-area {
            background: #f8f9fa;
            padding: 8px 12px;
            display: flex;
            align-items: center;
            gap: 8px;
            border-top: 1px solid #e9ecef;
        }
        .input-actions {
            display: flex;
            gap: 6px;
        }
        .input-icon {
            font-size: 14px;
            cursor: pointer;
            color: #666;
        }
        .message-input-container {
            flex: 1;
        }
        .message-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #e9ecef;
            border-radius: 18px;
            font-size: 13px;
            outline: none;
        }
        .message-input:focus {
            border-color: #5298fc;
        }
        .send-button {
            background: #5298fc;
            color: white;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            cursor: pointer;
            transition: background 0.2s ease;
        }
        .send-button:hover {
            background: #3d7bd9;
        }
        .policy-messages {
            margin-bottom: 20px;
        }
        .message-timestamp {
            text-align: center;
            color: #666;
            font-size: 12px;
            margin-bottom: 16px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        .policy-message {
            background: #e3f2fd;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            border-left: 4px solid #5298fc;
        }
        .policy-message.approved {
            background: #d4edda;
            border-left-color: #28a745;
        }
        .message-content p {
            margin: 0 0 8px 0;
            line-height: 1.5;
            color: #333;
        }
        .message-content p:last-child {
            margin-bottom: 0;
        }
        .policy-link {
            color: #5298fc;
            text-decoration: underline;
        }
        .policy-link:hover {
            color: #3d7bd9;
        }
        .opt-out-text {
            font-size: 12px;
            color: #666;
            font-style: italic;
        }
        .policy-actions {
            display: flex;
            gap: 12px;
            margin-top: 20px;
        }
        .policy-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            flex: 1;
        }
        .policy-btn.primary {
            background: #5298fc;
            color: white;
        }
        .policy-btn.primary:hover {
            background: #3d7bd9;
        }
        .policy-btn.secondary {
            background: #f8f9fa;
            color: #333;
            border: 1px solid #e9ecef;
        }
        .policy-btn.secondary:hover {
            background: #e9ecef;
        }
        .btn-icon {
            font-size: 16px;
        }

        /* Hot Links Styles for Sidebar */
        .hot-links {
            display: flex;
            flex-direction: column;
            gap: 4px;
            margin: 0;
        }
        .hot-link {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px 12px;
            background: transparent;
            border: none;
            border-radius: 10px;
            text-decoration: none;
            color: #1d1d1f;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.2s ease;
            cursor: pointer;
        }
        .hot-link:hover {
            background: #f0f0f0;
            color: #007AFF;
            transform: none;
        }
        .hot-link:active {
            transform: scale(0.98);
        }
        .hot-link-icon {
            width: 20px;
            height: 20px;
        }
        .hot-link-text {
            flex: 1;
        }
        .hot-link:hover .hot-link-icon {
            transform: scale(1.1);
        }
        
        /* LeaderBoards Collapsible Section */
        .leaderboards-section {
            margin-top: 8px;
        }
        .leaderboards-header {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            color: #495057;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.2s ease;
            cursor: pointer;
            position: relative;
        }
        .leaderboards-header:hover {
            background: #e9ecef;
            border-color: #5298fc;
            color: #5298fc;
        }
        .collapse-icon {
            position: absolute;
            right: 16px;
            font-size: 12px;
            transition: transform 0.3s ease;
        }
        .leaderboards-header.collapsed .collapse-icon {
            transform: rotate(-90deg);
        }
        .leaderboards-content {
            margin-top: 8px;
            padding: 12px;
            background: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            animation: slideDown 0.3s ease;
        }
        .leaderboards-content.collapsed {
            display: none;
        }
        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .leaderboard-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 0;
            border-bottom: 1px solid #f1f3f4;
            font-size: 13px;
        }
        .leaderboard-item:last-child {
            border-bottom: none;
        }
        .leaderboard-item .rank {
            font-weight: bold;
            min-width: 24px;
            text-align: center;
        }
        .leaderboard-item .name {
            flex: 1;
            color: #333;
            font-weight: 500;
        }
        .leaderboard-item .score {
            color: #5298fc;
            font-weight: 600;
            font-size: 12px;
        }
        .leaderboard-item:nth-child(1) .rank {
            color: #ffd700;
        }
        .leaderboard-item:nth-child(2) .rank {
            color: #c0c0c0;
        }
        .leaderboard-item:nth-child(3) .rank {
            color: #cd7f32;
        }
        
        /* Personal Producers Leaderboard Styles */
        .leaderboard-filters {
            display: flex;
            gap: 8px;
            margin-bottom: 12px;
        }
        .filter-btn {
            padding: 6px 12px;
            border: 1px solid #e9ecef;
            background: #f8f9fa;
            color: #495057;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .filter-btn.active {
            background: #5298fc;
            color: white;
            border-color: #5298fc;
        }
        .filter-btn:hover:not(.active) {
            background: #e9ecef;
        }
        
        .leaderboard-tabs {
            display: flex;
            gap: 8px;
            margin-bottom: 16px;
        }
        .tab-btn {
            padding: 6px 12px;
            border: 1px solid #e9ecef;
            background: #f8f9fa;
            color: #495057;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .tab-btn.active {
            background: #5298fc;
            color: white;
            border-color: #5298fc;
        }
        .tab-btn:hover:not(.active) {
            background: #e9ecef;
        }
        
        .leaderboard-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #f1f3f4;
            font-size: 13px;
        }
        .leaderboard-item:last-child {
            border-bottom: none;
        }
        
        .agent-info {
            display: flex;
            align-items: center;
            gap: 12px;
            flex: 1;
        }
        
        .rank {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            min-width: 24px;
        }
        
        .agent-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .agent-details {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }
        
        .agent-name {
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }
        
        .agent-badges {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .badge {
            display: flex;
            align-items: center;
            gap: 4px;
            padding: 2px 6px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
        }
        
        .badge.elite-producer {
            background: #e3f2fd;
            color: #1976d2;
        }
        
        .badge.slo {
            background: #f3e5f5;
            color: #7b1fa2;
        }
        
        .badge-icon {
            font-size: 12px;
        }
        
        .badge-text {
            font-size: 9px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .badge-count {
            font-size: 9px;
            color: #666;
        }
        
        .agent-metrics {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 2px;
        }
        
        .metric-value {
            font-size: 16px;
            font-weight: bold;
            color: #333;
        }
        
        .metric-label {
            font-size: 11px;
            color: #666;
        }
        .media-toolbar { display: flex; gap: 8px; margin: 15px 0; padding: 10px 0; border-top: 1px solid #eee; }
        .media-toolbar button { background: none; border: none; cursor: pointer; padding: 8px; border-radius: 5px; font-size: 16px; transition: all 0.2s ease; }
        .media-toolbar button:hover { background: #f0f0f0; transform: scale(1.1); }
        .media-toolbar button:active { transform: scale(0.95); }
        .modal-footer { padding: 15px 20px; border-top: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; background: #f9f9f9; border-radius: 0 0 10px 10px; }
        .post-settings { display: flex; align-items: center; gap: 5px; color: #666; cursor: pointer; }
        .post-settings:hover { color: #333; }
        .post-submit { background: #00aaff; color: white; border: none; padding: 8px 20px; border-radius: 5px; cursor: pointer; }
        .post-submit:hover { background: #0088cc; }
        .post-submit:disabled { background: #ccc; cursor: not-allowed; }
        .submenu { position: absolute; top: 40px; right: 10px; background: white; border-radius: 8px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); padding: 8px 0; min-width: 180px; z-index: 1000; display: none; border: 1px solid #eee; }
        .submenu-item { display: flex; align-items: center; gap: 10px; padding: 10px 15px; cursor: pointer; color: #333; font-size: 13px; transition: background-color 0.2s; }
        .submenu-item:hover { background: #f5f5f5; }
        .submenu-item .icon { font-size: 16px; width: 20px; text-align: center; }
        .submenu-item.danger { color: #ff4757; }
        .submenu-item.danger:hover { background: #ffe0e0; }
        .submenu-item.danger .icon { color: #ff4757; }
        .submenu-divider { height: 1px; background: #eee; margin: 5px 0; }
        .submenu-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: transparent; z-index: 999; display: none; }
        /* Reaction summary styles */
        .reaction-summary { margin-left: 50px; display: flex; align-items: center; gap: 6px; font-size: 13px; color: #666; }
        .reaction-summary .emoji { font-size: 16px; }
        .reaction-summary .count { font-weight: bold; }
        .reaction-summary .comment-summary { margin-left: 8px; cursor: pointer; }
        .reaction-summary .comment-summary:hover { text-decoration: underline; }
        /* Comment composer - Band APP style */
        .comment-compose { display:flex; align-items:flex-start; gap:12px; margin-top:15px; padding:12px; background:#f8f9fa; border-radius:8px; }
        .comment-compose .comment-avatar { width:36px; height:36px; border-radius:50%; background:#ff4081; color:#fff; font-weight:bold; display:flex; align-items:center; justify-content:center; font-size:14px; }
        .comment-compose .comment-box { flex:1; background:#fff; border:1px solid #e1e5e9; border-radius:8px; padding:10px; }
        .comment-compose textarea { width:100%; border:none; resize:none; font-size:14px; outline:none; min-height:20px; }
        .comment-tools { display:flex; align-items:center; justify-content:space-between; margin-top:6px; }
        .comment-tools .left-tools { display:flex; gap:12px; }
        .comment-tools .icon-btn { background:none; border:none; cursor:pointer; font-size:16px; color:#65676b; padding:4px; border-radius:4px; }
        .comment-tools .icon-btn:hover { color:#1c1e21; background:#f2f3f4; }
        .send-btn { background:#1877f2; color:#fff; border:none; padding:6px 16px; border-radius:6px; font-size:13px; cursor:pointer; font-weight:500; }
        .send-btn:disabled { background:#e4e6ea; color:#bcc0c4; cursor:not-allowed; }
        
        /* Reaction avatars - Band APP style */
        .reaction-avatars { margin-left: 50px; display:flex; gap:-2px; margin-top:8px; margin-bottom:8px; }
        .reaction-avatars .avatar-wrapper { position:relative; width:36px; height:36px; margin-right:-4px; }
        .reaction-avatars .avatar-wrapper img { width:36px; height:36px; border-radius:50%; border:2px solid #fff; }
        .reaction-avatars .avatar-wrapper .overlay-emoji { position:absolute; bottom:-3px; right:-3px; width:18px; height:18px; border-radius:50%; background:rgba(255,255,255,0.9); display:flex; align-items:center; justify-content:center; font-size:12px; border:1px solid #e1e5e9; backdrop-filter: blur(2px); }
        
        /* Individual comments - Band APP style */
        .comment { margin-bottom: 12px; padding: 0; background: none; border-radius: 0; font-size: 14px; }
        .comment-header { display: flex; align-items: flex-start; gap: 8px; margin-bottom: 0; }
        .comment-avatar { width: 32px; height: 32px; border-radius: 50%; }
        .comment-main { flex: 1; }
        .comment-bubble { background: #f0f2f5; border-radius: 16px; padding: 8px 12px; }
        .comment-username { font-weight: 600; color: #1c1e21; font-size: 13px; margin-bottom: 2px; letter-spacing: -0.01em; }
        .comment-content { color: #1c1e21; line-height: 1.3; }
        .comment-meta { display: flex; align-items: center; gap: 16px; margin-top: 4px; padding-left: 40px; }
        .comment-time { font-size: 12px; color: #65676b; }
        .comment-action { font-size: 12px; color: #65676b; cursor: pointer; font-weight: 600; }
        .comment-action:hover { text-decoration: underline; }
        .reaction-avatars .avatar-wrapper img { width:100%; height:100%; border-radius:50%; object-fit:cover; }
        .reaction-avatars .overlay-emoji { position:absolute; bottom:-3px; right:-3px; font-size:12px; }
        
        /* Post Participants Styles */
        .post-participants {
            margin-top: 10px;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        
        .participants-header {
            font-size: 12px;
            color: #666;
            margin-bottom: 8px;
            font-weight: 500;
            display: flex;
            align-items: center;
        }
        
        .participants-header i {
            margin-right: 5px;
            color: #007AFF;
        }
        
        .participants-avatars {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .participant-avatar {
            position: relative;
            transition: transform 0.2s ease;
        }
        
        .participant-avatar:hover {
            transform: scale(1.1);
        }
        
        .participant-avatar img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
            border: 1px solid #ddd;
        }
        
        .participant-avatar.author img {
            border: 2px solid #007AFF;
        }
        
        .author-badge {
            position: absolute;
            top: -2px;
            right: -2px;
            width: 12px;
            height: 12px;
            background: #007AFF;
            border-radius: 50%;
            border: 2px solid white;
            font-size: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        
        .more-participants {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            background: #e9ecef;
            border-radius: 50%;
            font-size: 12px;
            color: #666;
            font-weight: 500;
            border: 1px solid #ddd;
        }
    </style>
    <!-- Parse SDK -->
    <script src="https://npmcdn.com/parse/dist/parse.min.js"></script>
</head>
<body>
    <div class="header">
        <div class="header-left">

            <div class="logo-container">
                <img src="https://4681fae44a74582adad5b889aa1a3671.cdn.bubble.io/d200/f1753454434136x594304965582949100/insuratec_connect_stacked_logo-01.png" alt="InsuraTec Connect Logo" class="logo" />
            </div>
        </div>
        <div class="header-content">
            <div class="search-container">
                <div class="search-input-wrapper">
                    <input type="text" placeholder="Search..." class="search-input" />
                    <div class="search-icon">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                </div>
            </div>
            <div class="header-right">
                <div class="notification-bell">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 8A6 6 0 0 0 6 8C6 15 3 17 3 17H21C21 17 18 15 18 8Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M13.73 21A2 2 0 0 1 10.27 21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <div class="notification-dot"></div>
                </div>
                <div class="user-section">
                    <div class="user-info">
                        <div class="user-details">
                            <span class="username" id="user-name">Tiberio Maia</span>
                            <span class="user-role">admin</span>
                        </div>
                        <div class="user-avatar" id="user-avatar">
                            <img id="user-avatar-img" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover; display: none;" />
                            <span class="avatar-letter" id="user-avatar-letter">T</span>
                        </div>
                    </div>
                    <div class="logout-button">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M16 17L21 12L16 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M21 12H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                </div>
            </div>
        </div>
    </div>

    
    <div class="container">

        
        <!-- Main Content Area -->
        <div class="main">
            <!-- Post Input Section -->
            <div style="padding: 24px; border-bottom: 0.5px solid rgba(0, 0, 0, 0.1);">
                <div class="post-input">
                    <div class="input-section">
                        <input type="text" id="post-content" placeholder="What's on your mind?" maxlength="200" readonly />
                        <button id="post-btn">Post</button>
                    </div>
                </div>
            </div>
            
            <!-- Admin Notices Section (Fixed above feed) -->
            <div style="padding: 20px 24px; background: #ffffff; border-bottom: 0.5px solid rgba(0, 0, 0, 0.1);">
                <div class="admin-notices">
                    <h3>Admin Notices</h3>
                    <div class="notices-container">
                        <div class="notices-list" id="notices-list">
                            <div class="no-notices">Loading notices...</div>
                        </div>
                    </div>
                    <div class="admin-only" style="display: none; margin-top: 10px;">
                        <button onclick="showCreateNoticeModal()" style="background: #007AFF; color: white; border: none; padding: 5px 10px; border-radius: 6px; font-size: 12px;">➕ Create Notice</button>
                        <button onclick="showManageNoticesModal()" style="background: #ff9800; color: white; border: none; padding: 5px 10px; border-radius: 6px; font-size: 12px; margin-left: 5px;">⚙️ Manage</button>
                        <button onclick="showStaffManagement()" style="background: #9c27b0; color: white; border: none; padding: 5px 10px; border-radius: 6px; font-size: 12px; margin-left: 5px;">👥 Staff</button>
                        <button onclick="manualBubbleSync()" style="background: #4CAF50; color: white; border: none; padding: 5px 10px; border-radius: 6px; font-size: 12px; margin-left: 5px;">🔄 Bubble</button>
                        <button onclick="sendAdminStaffList()" style="background: #e91e63; color: white; border: none; padding: 5px 10px; border-radius: 6px; font-size: 12px; margin-left: 5px;">📧 Admin List</button>
                        <button onclick="quickAdminSetup()" style="background: #ff5722; color: white; border: none; padding: 5px 10px; border-radius: 6px; font-size: 12px; margin-left: 5px;">⚡ Quick Setup</button>
                    </div>
                </div>
            </div>
            
            <!-- Posts Feed -->
            <div style="padding: 0 24px 24px 24px;">
                <div id="posts"></div>
            </div>
        </div>
    </div>



        </div>
    </div>

    <!-- Post Modal -->
    <div id="postModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Post</h2>
                <span class="close" onclick="closePostModal()">&times;</span>
            </div>
            <div class="modal-body">
                <!-- Top Row: Audience and Post Type -->
                <div class="post-top-controls">
                    <div class="control-group">
                        <label class="control-label">Audience:</label>
                        <div class="audience-selector">
                            <div class="audience-search">
                                <div class="search-icon icon-modern icon-search"></div>
                                <input type="text" id="audienceSearch" placeholder="Search audience..." class="audience-search-input">
                            </div>
                            <div class="audience-buttons">
                                <button class="audience-btn" onclick="selectAudience('direct_agents')" data-value="direct_agents">
                                    Direct Agents (56)
                                </button>
                                <button class="audience-btn" onclick="selectAudience('base_shop')" data-value="base_shop">
                                    Base Shop (500)
                                </button>
                                <button class="audience-btn" onclick="selectAudience('master_agency')" data-value="master_agency" id="masterAgencyBtn">
                                    Master Agency (25,000)
                                </button>
                                <button class="audience-btn" onclick="selectAudience('insuratec')" data-value="insuratec">
                                    InsuraTec (30,000)
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="control-group">
                        <label class="control-label">Type:</label>
                        <div class="compact-options">
                            <label class="compact-option">
                                <input type="radio" name="postType" value="general" checked>
                                <span>General</span>
                            </label>
                            <label class="compact-option">
                                <input type="radio" name="postType" value="promotion">
                                <span>Promotion</span>
                            </label>
                            <label class="compact-option">
                                <input type="radio" name="postType" value="life_sales">
                                <span>Life Sales</span>
                            </label>
                            <label class="compact-option">
                                <input type="radio" name="postType" value="equity_sales">
                                <span>Equity Sales</span>
                            </label>
                            <label class="compact-option other-option">
                                <input type="radio" name="postType" value="other">
                                <span>Other</span>
                                <input type="text" class="other-input" placeholder="Enter type..." id="otherTypeInput">
                            </label>
                        </div>
                    </div>
                </div>
                
                <!-- Slack-style text editor -->
                <div class="slack-editor">
                    <!-- Rich text toolbar -->
                    <div class="rich-text-toolbar">
                        <button class="toolbar-btn" onclick="formatText('font')" title="Text Style">Aa</button>
                        <button class="toolbar-btn" onclick="formatText('bold')" title="Bold (Ctrl+B)">B</button>
                        <button class="toolbar-btn" onclick="formatText('italic')" title="Italic (Ctrl+I)">I</button>
                        <button class="toolbar-btn" onclick="formatText('underline')" title="Underline (Ctrl+U)">U</button>
                        <button class="toolbar-btn" onclick="formatText('strikethrough')" title="Strikethrough">S</button>
                        <button class="toolbar-btn" onclick="formatText('highlight')" title="Highlight">H</button>
                    </div>
                    

                    
                    <!-- Text input area -->
                    <div class="text-input-container">
                        <textarea id="postTextarea" class="post-textarea" placeholder="What's on your mind?"></textarea>
                    </div>
                    
                    <!-- Action bar -->
                    <div class="action-bar">
                        <div class="action-left">
                            <button class="action-btn" onclick="openPhotoUploadModal()" title="Image">📷</button>
                            <button class="action-btn" onclick="attachMedia('video')" title="Video">▶️</button>
                            <button class="action-btn" onclick="formatText('emoji')" title="Emoji">😊</button>
                            <div class="action-divider"></div>
                            <button class="action-btn" onclick="attachMedia('file')" title="Attach File">📎</button>
                        </div>

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="post-settings" onclick="showPostSettings()">
                    ⚙️ Post Settings
                </div>
                <button class="post-submit" onclick="submitPost()" id="submitPostBtn">Post</button>
            </div>
        </div>
    </div>

    <!-- Post Submenu -->
    <div class="submenu-overlay" id="submenuOverlay" onclick="hideSubmenu()"></div>
    <div class="submenu" id="postSubmenu">
        <div class="submenu-item" onclick="editPost(currentPostId)">
            <span class="icon">✏️</span>
            <span>Edit Post</span>
        </div>
        <div class="submenu-item" onclick="sharePost(currentPostId)">
            <span class="icon">📤</span>
            <span>Share Post</span>
        </div>
        <div class="submenu-item" onclick="reportPost(currentPostId)">
            <span class="icon">🚨</span>
            <span>Report Post</span>
        </div>
        <div class="submenu-divider"></div>
        <div class="submenu-item danger" onclick="deletePost(currentPostId)">
            <span class="icon">🗑️</span>
            <span>Delete Post</span>
        </div>
    </div>

    <!-- Post Settings Modal -->
    <div class="modal-overlay" id="settingsModalOverlay" onclick="closeSettingsModal()"></div>
    <div class="modal" id="settingsModal">
        <div class="modal-header">
            <h2>Post Settings</h2>
            <span class="close" onclick="closeSettingsModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div class="setting-item">
                <div class="setting-info">
                    <label class="setting-label">Allow downloads</label>
                    <div class="setting-description">Allow 'Post on other Bands' and downloading photos/videos.</div>
                </div>
                <div class="setting-toggle">
                    <input type="checkbox" id="allowDownloads" checked>
                    <span class="toggle-slider"></span>
                </div>
            </div>
            
            <div class="setting-item">
                <div class="setting-info">
                    <label class="setting-label">Allow Comments</label>
                </div>
                <div class="setting-toggle">
                    <input type="checkbox" id="allowComments" checked>
                    <span class="toggle-slider"></span>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-secondary" onclick="closeSettingsModal()">Cancel</button>
            <button class="btn-primary" onclick="savePostSettings()">OK</button>
        </div>
    </div>

    <!-- Photo Upload Modal -->
    <div class="modal-overlay" id="photoUploadModalOverlay" onclick="closePhotoUploadModal()"></div>
    <div class="modal" id="photoUploadModal">
    
    <!-- Image Popup Modal -->
    <div class="modal-overlay" id="imagePopupOverlay" onclick="closeImagePopup()"></div>
    <div class="modal" id="imagePopupModal">
        <div class="modal-header">
            <h2>Image</h2>
            <span class="close" onclick="closeImagePopup()">&times;</span>
        </div>
        <div class="modal-body">
            <img id="popupImage" src="" alt="Popup image" style="max-width: 100%; max-height: 70vh; object-fit: contain;" />
        </div>
    </div>
        <div class="modal-header">
            <h2>Upload Photos</h2>
            <span class="close" onclick="closePhotoUploadModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div class="upload-tip">
                <span class="tip-label">TIP</span>
                <span class="tip-text">Drag and drop photos to rearrange.</span>
            </div>
            
            <div class="upload-stats">
                <span class="photo-count">Photo <span id="photoCount">0</span>/100</span>
                <span class="gif-count">GIF <span id="gifCount">0</span>/10</span>
            </div>
            
            <div class="upload-area" id="uploadArea">
                <div class="upload-placeholder" id="uploadPlaceholder">
                    <div class="upload-icon">+</div>
                    <div class="upload-text">Add Photos</div>
                </div>
                <div class="uploaded-photos" id="uploadedPhotos"></div>
            </div>
            
            <div class="upload-options">
                <div class="album-selection">
                    <label class="album-label">Select Album</label>
                    <select class="album-dropdown" id="albumDropdown">
                        <option value="undesignated">Undesignated Photos</option>
                        <option value="personal">Personal Photos</option>
                        <option value="work">Work Photos</option>
                        <option value="family">Family Photos</option>
                        <option value="travel">Travel Photos</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-secondary" onclick="closePhotoUploadModal()">Cancel</button>
            <button class="btn-primary" onclick="confirmPhotoUpload()">Attach</button>
        </div>
    </div>

    <script>
        Parse.initialize("UzhGs8AnUe3qOl836wSLsVG1iVhlb5vkRknFkvyH", "NguMpB9MrkVYtve3NqjJrHGCu3oZBDjf5ivICEBZ");
        Parse.serverURL = "https://parseapi.back4app.com/";

        let currentUser = null;
        let currentPostId = null;

        // User role management
        let currentUserRole = 'agent'; // Default role
        let currentUserStaff = false; // Default staff status
        
        // Mobile Menu Functions
        function toggleMobileMenu() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.querySelector('.mobile-overlay');
            
            sidebar.classList.toggle('open');
            overlay.classList.toggle('active');
        }
        
        function closeMobileMenu() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.querySelector('.mobile-overlay');
            
            sidebar.classList.remove('open');
            overlay.classList.remove('active');
        }
        
        // Close mobile menu when clicking on main content
        document.addEventListener('click', function(e) {
            const sidebar = document.getElementById('sidebar');
            const mobileBtn = document.querySelector('.mobile-menu-btn');
            
            if (window.innerWidth <= 768 && 
                !sidebar.contains(e.target) && 
                mobileBtn && !mobileBtn.contains(e.target) && 
                sidebar.classList.contains('open')) {
                closeMobileMenu();
            }
        });
        
        // Check user role and staff status
        async function checkUserRole() {
            try {
                const currentUser = Parse.User.current();
                if (!currentUser) return 'agent';
                
                // Check if user has role field
                const userRole = currentUser.get('role');
                const userStaff = currentUser.get('staff') || false;
                
                if (userRole) {
                    currentUserRole = userRole;
                    currentUserStaff = userStaff;
                    return userRole;
                }
                
                // If no role field, set default role
                await setUserRole(currentUser, 'agent');
                return 'agent';
                
            } catch (error) {
                console.error("Error checking user role:", error);
                return 'agent';
            }
        }
        
        // Set user role and staff status
        async function setUserRole(user, role, staff = false) {
            try {
                // Set role and staff directly in _User table
                user.set('role', role);
                user.set('staff', staff);
                await user.save();
                
                // Also create/update UserRole record for backup
                const UserRole = Parse.Object.extend('UserRole');
                
                // Deactivate existing roles for this user
                const existingQuery = new Parse.Query(UserRole);
                existingQuery.equalTo('userId', user);
                existingQuery.equalTo('isActive', true);
                const existingRoles = await existingQuery.find();
                
                for (const existingRole of existingRoles) {
                    existingRole.set('isActive', false);
                    await existingRole.save();
                }
                
                // Create new role record
                const newRole = new UserRole();
                newRole.set('userId', user);
                newRole.set('role', role);
                newRole.set('staff', staff);
                newRole.set('isActive', true);
                await newRole.save();
                
                console.log(`User role set to: ${role}, staff: ${staff}`);
                return true;
                
            } catch (error) {
                console.error("Error setting user role:", error);
                return false;
            }
        }
        
        // Check if user is staff
        function isStaff() {
            return currentUserStaff;
        }
        
        // Check if user is admin
        function isAdmin() {
            return currentUserRole === 'admin';
        }
        
        // Check if user is agent
        function isAgent() {
            return currentUserRole === 'agent';
        }
        
        // Update UI based on user role
        function updateUIForRole() {
            const adminElements = document.querySelectorAll('.admin-only');
            const agentElements = document.querySelectorAll('.agent-only');
            
            if (isAdmin()) {
                // Show admin elements
                adminElements.forEach(el => el.style.display = 'block');
                // Hide agent-only elements
                agentElements.forEach(el => el.style.display = 'none');
                
            } else {
                // Hide admin elements
                adminElements.forEach(el => el.style.display = 'none');
                // Show agent elements
                agentElements.forEach(el => el.style.display = 'block');
                
                // Remove admin badge
                const adminBadge = document.querySelector('.admin-badge');
                if (adminBadge) adminBadge.remove();
            }
            
            // Update Create Page section visibility
            updateCreatePageVisibility();
        }
        
        // Show admin setup instructions
        function showAdminSetupInstructions() {
            const instructions = `
🔧 COMO DEFINIR ADMIN MANUALMENTE:

1. Vá para o Back4App Dashboard
2. Acesse a tabela "_User"
3. Encontre o usuário que você quer tornar admin
4. Clique em "Edit" no registro
5. No campo "role", mude de "agent" para "admin"
6. Clique em "Save"

OU

1. Use o botão "👑 Admin" aqui para teste
2. Depois mude manualmente no Back4App se necessário

📝 NOTA: Todos os novos usuários são criados como AGENT por padrão.
            `;
            alert(instructions);
        }
        
        // Show current user role
        function showCurrentRole() {
            const currentUser = Parse.User.current();
            if (!currentUser) {
                alert('No user logged in');
                return;
            }
            
            const role = currentUser.get('role') || 'No role set';
            alert(`Current role: ${role}`);
            console.log("Current user role:", role);
        }
        
        // Create sample admin user
        async function createSampleAdmin() {
            try {
                const currentUser = Parse.User.current();
                if (!currentUser) {
                    alert('Please login first');
                    return;
                }
                
                const success = await setUserRole(currentUser, 'admin');
                if (success) {
                    currentUserRole = 'admin';
                    updateUIForRole();
                    alert('You are now an admin!');
                } else {
                    alert('Failed to set admin role');
                }
                
            } catch (error) {
                console.error("Error creating admin:", error);
                alert('Error setting admin role');
            }
        }
        
        // Create sample agent user
        async function createSampleAgent() {
            try {
                const currentUser = Parse.User.current();
                if (!currentUser) {
                    alert('Please login first');
                    return;
                }
                
                const success = await setUserRole(currentUser, 'agent');
                if (success) {
                    currentUserRole = 'agent';
                    updateUIForRole();
                    alert('You are now an agent!');
                } else {
                    alert('Failed to set agent role');
                }
                
            } catch (error) {
                console.error("Error creating agent:", error);
                alert('Error setting agent role');
            }
        }

        // Check if current user can see post menu (author or admin/staff)
        function canSeePostMenu(postUserPointer) {
            const currentUser = Parse.User.current();
            if (!currentUser) return false;
            
            // Check if current user is the post author
            if (postUserPointer && postUserPointer.id === currentUser.id) {
                return true;
            }
            
            // Check if current user is admin or staff
            if (isAdmin() || isStaff()) {
                return true;
            }
            
            return false;
        }

        // Submenu functions
        function showSubmenu(postId, event) {
            currentPostId = postId;
            const submenu = document.getElementById('postSubmenu');
            const overlay = document.getElementById('submenuOverlay');
            
            // Position the submenu near the clicked button
            const button = event.target;
            const rect = button.getBoundingClientRect();
            
            submenu.style.top = (rect.bottom + 5) + 'px';
            submenu.style.right = (window.innerWidth - rect.right) + 'px';
            
            submenu.style.display = 'block';
            overlay.style.display = 'block';
            
            console.log('Submenu shown for post:', postId);
        }

        function hideSubmenu() {
            const submenu = document.getElementById('postSubmenu');
            const overlay = document.getElementById('submenuOverlay');
            
            submenu.style.display = 'none';
            overlay.style.display = 'none';
            
            console.log('Submenu hidden');
        }

        function editPost(postId) {
            hideSubmenu();
            alert('Edit Post - Coming soon!\n\nThis feature will allow you to edit your posts.');
        }

        function sharePost(postId) {
            hideSubmenu();
            alert('Share Post - Coming soon!\n\nThis feature will allow you to share posts with others.');
        }

        function reportPost(postId) {
            hideSubmenu();
            alert('Report Post - Coming soon!\n\nThis feature will allow you to report inappropriate content.');
        }

        async function deletePost(postId) {
            hideSubmenu();
            
            if (!currentUser) {
                alert('You need to be logged in to delete posts!');
                return;
            }
            
            if (confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
                try {
                    const Post = Parse.Object.extend('Post');
                    const post = new Post();
                    post.id = postId;
                    await post.destroy();
                    console.log('Post deleted successfully');
                    loadPosts(); // Reload posts
                } catch (error) {
                    console.error('Error deleting post:', error);
                    alert('Error deleting post: ' + error.message);
                }
            }
        }

        // Initialize user interface for logged in user
        async function initializeUserInterface() {
            const currentUser = Parse.User.current();
            if (!currentUser) return;
            
            // Enable posting
            document.getElementById('post-content').disabled = false;
            document.getElementById('post-btn').disabled = false;
            
            // Fetch user details including Google picture
            try {
                const user = await currentUser.fetch();
                console.log("User fetched:", user);
                console.log("User fields:", Object.keys(user.attributes));
                
                // Log all user data to debug
                const userData = user.toJSON();
                console.log("Complete user data:", userData);
                
                // Update header with user info after fetching
                updateUserHeader();
                
            } catch (error) {
                console.error("Error fetching user details:", error);
                // Still update header even if fetch fails
                updateUserHeader();
            }
        }
        
        // Check login and redirect if not logged in
        function checkLoginAndRedirect() {
            const currentUser = Parse.User.current();
            if (!currentUser) {
                console.log("No user logged in, redirecting to index...");
                window.location.href = 'index.html';
                return;
            }
            console.log("User logged in:", currentUser.get('username'));
        }

        // Update user header with current user info
        function updateUserHeader() {
            const currentUser = Parse.User.current();
            if (!currentUser) return;
            
            const userAvatarImg = document.getElementById('user-avatar-img');
            const userAvatarLetter = document.getElementById('user-avatar-letter');
            const userName = document.getElementById('user-name');
            
            const name = currentUser.get('name') || currentUser.get('username') || 'Usuário';
            userName.textContent = name;
            
            let avatarUrl = null;
            const profilePictureFile = currentUser.get('profilePicture'); // Foto de upload (Parse File)
            const ssoPicture = currentUser.get('picture'); // Foto do login (URL)
            
            // **ALTERAÇÃO PRINCIPAL AQUI: Lógica de Prioridade**
            // 1. Prioridade: picture (campo principal do usuário)
            if (ssoPicture) {
                avatarUrl = ssoPicture;
            } 
            // 2. Segunda opção: Foto enviada pelo upload (`profilePicture`)
            else if (profilePictureFile && profilePictureFile.url) {
                avatarUrl = profilePictureFile.url();
            }
            
            if (avatarUrl) {
                userAvatarImg.src = avatarUrl;
                userAvatarImg.style.display = 'block';
                userAvatarLetter.style.display = 'none';
            } else {
                // Fallback: se não houver foto, mostra a inicial do nome
                const initial = name.charAt(0).toUpperCase();
                userAvatarLetter.textContent = initial;
                userAvatarImg.style.display = 'none';
                userAvatarLetter.style.display = 'block';
            }
        }

        // Check login status and fetch user details
        async function checkLogin() {
            currentUser = Parse.User.current();
            if (currentUser) {
                document.getElementById('post-content').disabled = false;
                document.getElementById('post-btn').disabled = false;
                // Fetch user details including picture fields
                try {
                    const user = await Parse.User.current().fetch();
                    console.log("User fetched:", user);
                    
                    // Check for picture fields in order of priority
                    if (user.get('picture')) {
                        console.log("Picture field found:", user.get('picture'));
                    } else if (user.get('profilePicture')) {
                        console.log("Profile picture URL:", user.get('profilePicture').url);
                    } else if (user.get('googlePicture')) {
                        console.log("Google picture found:", user.get('googlePicture'));
                    } else if (user.get('avatar')) {
                        console.log("Avatar field found:", user.get('avatar'));
                    } else {
                        console.log("No profile picture found.");
                    }
                } catch (error) {
                    console.error("Error fetching user details:", error);
                }
            } else {
                document.getElementById('post-content').disabled = true;
                document.getElementById('post-btn').disabled = true;
                alert('Please log in to post!');
            }
        }

        // Check login and redirect immediately
        checkLoginAndRedirect();

        // Modal functions
        function openPostModal() {
            document.getElementById('postModal').style.display = 'block';
            document.getElementById('postTextarea').focus();
        }

        function closePostModal() {
            document.getElementById('postModal').style.display = 'none';
            document.getElementById('postTextarea').value = '';
            resetToolbar();
            
                    // Reset audience and post type selections to defaults
        const directAgentsRadio = document.querySelector('input[name="audience"][value="direct_agents"]');
        const generalRadio = document.querySelector('input[name="postType"][value="general"]');
        
        if (directAgentsRadio) directAgentsRadio.checked = true;
        if (generalRadio) generalRadio.checked = true;
        
        // Reset other type input
        const otherTypeInput = document.getElementById('otherTypeInput');
        if (otherTypeInput) otherTypeInput.value = '';
        }

        function formatText(type) {
            const textarea = document.getElementById('postTextarea');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);
            
            // Remove active class from all buttons
            document.querySelectorAll('.toolbar-btn').forEach(btn => btn.classList.remove('active'));
            
            let formattedText = '';
            let buttonSelector = '';
            
            switch(type) {
                case 'bold':
                    formattedText = `**${selectedText}**`;
                    buttonSelector = '.toolbar-btn[onclick*="bold"]';
                    break;
                case 'italic':
                    formattedText = `*${selectedText}*`;
                    buttonSelector = '.toolbar-btn[onclick*="italic"]';
                    break;
                case 'strikethrough':
                    formattedText = `~~${selectedText}~~`;
                    buttonSelector = '.toolbar-btn[onclick*="strikethrough"]';
                    break;
                case 'underline':
                    formattedText = `__${selectedText}__`;
                    buttonSelector = '.toolbar-btn[onclick*="underline"]';
                    break;
                case 'link':
                    const url = prompt('Enter URL:');
                    if (url) {
                        formattedText = `[${selectedText}](${url})`;
                    } else {
                        return;
                    }
                    break;
                case 'numbered-list':
                    formattedText = `1. ${selectedText}`;
                    break;
                case 'bulleted-list':
                    formattedText = `• ${selectedText}`;
                    break;
                case 'indent':
                    formattedText = `  ${selectedText}`;
                    break;
                case 'code':
                    formattedText = `\`${selectedText}\``;
                    buttonSelector = '.toolbar-btn[onclick*="code"]';
                    break;
                case 'quote':
                    formattedText = `> ${selectedText}`;
                    buttonSelector = '.toolbar-btn[onclick*="quote"]';
                    break;
                case 'code-block':
                    formattedText = `\`\`\`\n${selectedText}\n\`\`\``;
                    buttonSelector = '.toolbar-btn[onclick*="code-block"]';
                    break;
                case 'table':
                    formattedText = `| Header 1 | Header 2 | Header 3 |\n|----------|----------|----------|\n| ${selectedText} | Cell 2 | Cell 3 |`;
                    break;
                case 'font':
                    showFontStylePicker();
                    return;
                case 'emoji':
                    showEmojiPicker();
                    return;
                case 'mention':
                    const mentionName = prompt('Enter name to mention:');
                    formattedText = mentionName ? `@${mentionName}` : '@mention';
                    break;
                case 'gif':
                    formattedText = `[GIF: ${selectedText || 'Search GIF'}]`;
                    break;
                case 'poll':
                    const pollQuestion = prompt('Enter poll question:');
                    const pollOptions = prompt('Enter poll options (comma separated):');
                    if (pollQuestion && pollOptions) {
                        const options = pollOptions.split(',').map(opt => opt.trim());
                        formattedText = `📊 Poll: ${pollQuestion}\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\n')}`;
                    } else {
                        formattedText = '📊 Poll: What do you think?\n1. Option 1\n2. Option 2\n3. Option 3';
                    }
                    break;
                case 'reminder':
                    const reminderText = prompt('Enter reminder text:');
                    const reminderTime = prompt('Enter reminder time (e.g., "in 1 hour", "tomorrow 9am"):');
                    if (reminderText && reminderTime) {
                        formattedText = `⏰ Reminder: ${reminderText} (${reminderTime})`;
                    } else {
                        formattedText = '⏰ Reminder: Follow up on this (in 1 hour)';
                    }
                    break;
                case 'checklist':
                    formattedText = `- [ ] ${selectedText || 'Task'}`;
                    break;
                case 'highlight':
                    formattedText = `==${selectedText}==`;
                    buttonSelector = '.toolbar-btn[onclick*="highlight"]';
                    break;
                case 'spoiler':
                    formattedText = `||${selectedText}||`;
                    buttonSelector = '.toolbar-btn[onclick*="spoiler"]';
                    break;
                default:
                    return;
            }
            
            // Apply formatting
            textarea.value = textarea.value.substring(0, start) + formattedText + textarea.value.substring(end);
            
            // Add active class to the button
            if (buttonSelector) {
                const button = document.querySelector(buttonSelector);
                if (button) button.classList.add('active');
            }
            
            // Set focus back to textarea
            textarea.focus();
            
            // Set cursor position after the formatted text
            const newCursorPos = start + formattedText.length;
            textarea.setSelectionRange(newCursorPos, newCursorPos);
            
            console.log(`Applied ${type} formatting to: "${selectedText}"`);
        }

        function showFontStylePicker() {
            const styles = [
                { name: 'Heading 1', format: '# ' },
                { name: 'Heading 2', format: '## ' },
                { name: 'Heading 3', format: '### ' },
                { name: 'Normal', format: '' },
                { name: 'Small', format: '<small>' },
                { name: 'Large', format: '<big>' }
            ];
            
            const styleList = styles.map(style => 
                `<div class="font-style-option" onclick="applyFontStyle('${style.format}')">${style.name}</div>`
            ).join('');
            
            const picker = document.createElement('div');
            picker.className = 'font-style-picker';
            picker.innerHTML = styleList;
            picker.style.cssText = `
                position: absolute;
                background: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 1000;
                padding: 8px 0;
                min-width: 150px;
            `;
            
            // Position near the font button
            const fontBtn = document.querySelector('.toolbar-btn[onclick*="font"]');
            if (fontBtn) {
                const rect = fontBtn.getBoundingClientRect();
                picker.style.left = rect.left + 'px';
                picker.style.top = (rect.bottom + 5) + 'px';
            }
            
            document.body.appendChild(picker);
            
            // Close picker when clicking outside
            setTimeout(() => {
                document.addEventListener('click', function closePicker(e) {
                    if (!picker.contains(e.target)) {
                        picker.remove();
                        document.removeEventListener('click', closePicker);
                    }
                });
            }, 100);
        }

        function applyFontStyle(format) {
            const textarea = document.getElementById('postTextarea');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);
            
            let formattedText = '';
            if (format.includes('<')) {
                // HTML-style formatting
                formattedText = `${format}${selectedText}${format.replace('<', '</')}`;
            } else {
                // Markdown-style formatting
                formattedText = `${format}${selectedText}`;
            }
            
            textarea.value = textarea.value.substring(0, start) + formattedText + textarea.value.substring(end);
            textarea.focus();
            textarea.setSelectionRange(start + formattedText.length, start + formattedText.length);
            
            // Remove font style picker
            const picker = document.querySelector('.font-style-picker');
            if (picker) picker.remove();
        }

        // File Upload Functions with Popup Menu
        function showFileUploadDialog() {
            showAddOptionsPopup();
        }
        
        function showImageUploadDialog() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.multiple = true;
            input.onchange = function(e) {
                const files = e.target.files;
                if (files.length > 0) {
                    handleFileUpload(files);
                }
            };
            input.click();
        }
        
        function showDocumentUploadDialog() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.pdf,.doc,.docx,.txt,.rtf';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (file) {
                    insertFileIntoPost(file, 'document');
                }
            };
            input.click();
        }
        
        function showEmojiPicker() {
            showEmojiPickerModal();
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            const textarea = document.getElementById('postTextarea');
            if (document.activeElement === textarea) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key.toLowerCase()) {
                        case 'b':
                            e.preventDefault();
                            formatText('bold');
                            break;
                        case 'i':
                            e.preventDefault();
                            formatText('italic');
                            break;
                        case 'u':
                            e.preventDefault();
                            formatText('underline');
                            break;
                        case 'k':
                            e.preventDefault();
                            formatText('link');
                            break;
                        case 'enter':
                            if (e.shiftKey) {
                                e.preventDefault();
                                submitPost();
                            }
                            break;
                    }
                }
            }
        });
        
        function insertFileIntoPost(file, type) {
            const textarea = document.getElementById('postTextarea');
            const cursorPos = textarea.selectionStart;
            let insertText = '';
            
            switch(type) {
                case 'image':
                    // Create image preview
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imageUrl = e.target.result;
                        addImagePreview(file.name, imageUrl, file);
                        
                        // Add image reference to textarea
                        insertText = `[Image: ${file.name}]`;
                        const beforeText = textarea.value.substring(0, cursorPos);
                        const afterText = textarea.value.substring(cursorPos);
                        textarea.value = beforeText + insertText + afterText;
                        textarea.focus();
                        textarea.setSelectionRange(cursorPos + insertText.length, cursorPos + insertText.length);
                        showToast(`Image "${file.name}" added`, 'success');
                    };
                    reader.readAsDataURL(file);
                    return;
                case 'document':
                    insertText = `📄 Document: ${file.name}`;
                    break;
                default:
                    insertText = `📁 File: ${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
            }
            
            const beforeText = textarea.value.substring(0, cursorPos);
            const afterText = textarea.value.substring(cursorPos);
            textarea.value = beforeText + insertText + afterText;
            textarea.focus();
            textarea.setSelectionRange(cursorPos + insertText.length, cursorPos + insertText.length);
            showToast(`${type.charAt(0).toUpperCase() + type.slice(1)} "${file.name}" added`, 'success');
        }

        // Enhanced Photo Upload Functions
        let uploadedPhotos = [];
        let photoCount = 0;
        let gifCount = 0;

        function addImagePreview(fileName, imageUrl, file) {
            const uploadedPhotosContainer = document.getElementById('uploadedPhotos');
            const uploadPlaceholder = document.getElementById('uploadPlaceholder');
            
            // Hide placeholder when photos are added
            if (uploadPlaceholder) {
                uploadPlaceholder.style.display = 'none';
            }
            
            // Create photo item
            const photoItem = document.createElement('div');
            photoItem.className = 'uploaded-photo-item';
            photoItem.dataset.filename = fileName;
            photoItem.draggable = true;
            
            // Check if it's a GIF
            const isGif = fileName.toLowerCase().endsWith('.gif');
            if (isGif) {
                gifCount++;
            } else {
                photoCount++;
            }
            
            photoItem.innerHTML = `
                <img src="${imageUrl}" alt="${fileName}" />
                <button class="remove-photo" onclick="removeImage('${fileName}')">×</button>
            `;
            
            uploadedPhotosContainer.appendChild(photoItem);
            
            // Store file data
            uploadedPhotos.push({
                name: fileName,
                url: imageUrl,
                file: file,
                isGif: isGif
            });
            
            updatePhotoCounts();
            setupDragAndDrop();
            
            showToast(`Image "${fileName}" added`, 'success');
        }

        function removeImage(fileName) {
            const photoItem = document.querySelector(`[data-filename="${fileName}"]`);
            if (photoItem) {
                photoItem.remove();
                
                // Remove from uploadedPhotos array
                const index = uploadedPhotos.findIndex(photo => photo.name === fileName);
                if (index > -1) {
                    const photo = uploadedPhotos[index];
                    if (photo.isGif) {
                        gifCount--;
                    } else {
                        photoCount--;
                    }
                    uploadedPhotos.splice(index, 1);
                }
                
                updatePhotoCounts();
                
                // Show placeholder if no photos left
                if (uploadedPhotos.length === 0) {
                    const uploadPlaceholder = document.getElementById('uploadPlaceholder');
                    if (uploadPlaceholder) {
                        uploadPlaceholder.style.display = 'flex';
                    }
                }
                
                showToast(`Image "${fileName}" removed`, 'success');
            }
        }

        function clearAllImages() {
            const uploadedPhotosContainer = document.getElementById('uploadedPhotos');
            uploadedPhotosContainer.innerHTML = '';
            
            // Reset counts
            photoCount = 0;
            gifCount = 0;
            uploadedPhotos = [];
            
            // Show placeholder
            const uploadPlaceholder = document.getElementById('uploadPlaceholder');
            if (uploadPlaceholder) {
                uploadPlaceholder.style.display = 'flex';
            }
            
            // Remove all image references from textarea
            const textarea = document.getElementById('postTextarea');
            const text = textarea.value;
            const newText = text.replace(/\[Image: [^\]]+\]/g, '');
            textarea.value = newText;
            
            updatePhotoCounts();
            showToast('All images cleared', 'success');
        }

        function updatePhotoCounts() {
            document.getElementById('photoCount').textContent = photoCount;
            document.getElementById('gifCount').textContent = gifCount;
        }

        function setupDragAndDrop() {
            const uploadArea = document.getElementById('uploadArea');
            const uploadedPhotosContainer = document.getElementById('uploadedPhotos');
            
            // File drop handling
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.classList.add('drag-over');
            });
            
            uploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('drag-over');
            });
            
            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('drag-over');
                
                const files = e.dataTransfer.files;
                handleFileUpload(files);
            });
            
            // Photo reordering
            uploadedPhotosContainer.addEventListener('dragstart', function(e) {
                if (e.target.classList.contains('uploaded-photo-item')) {
                    e.target.style.opacity = '0.5';
                    e.dataTransfer.effectAllowed = 'move';
                    e.dataTransfer.setData('text/html', e.target.outerHTML);
                }
            });
            
            uploadedPhotosContainer.addEventListener('dragend', function(e) {
                if (e.target.classList.contains('uploaded-photo-item')) {
                    e.target.style.opacity = '1';
                }
            });
            
            uploadedPhotosContainer.addEventListener('dragover', function(e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
            });
            
            uploadedPhotosContainer.addEventListener('drop', function(e) {
                e.preventDefault();
                const draggedItem = document.querySelector('.uploaded-photo-item[style*="opacity: 0.5"]');
                if (draggedItem && e.target.closest('.uploaded-photo-item')) {
                    const targetItem = e.target.closest('.uploaded-photo-item');
                    if (draggedItem !== targetItem) {
                        const allItems = [...uploadedPhotosContainer.querySelectorAll('.uploaded-photo-item')];
                        const draggedIndex = allItems.indexOf(draggedItem);
                        const targetIndex = allItems.indexOf(targetItem);
                        
                        if (draggedIndex < targetIndex) {
                            targetItem.parentNode.insertBefore(draggedItem, targetItem.nextSibling);
                        } else {
                            targetItem.parentNode.insertBefore(draggedItem, targetItem);
                        }
                        
                        // Update uploadedPhotos array order
                        const draggedPhoto = uploadedPhotos[draggedIndex];
                        uploadedPhotos.splice(draggedIndex, 1);
                        uploadedPhotos.splice(targetIndex, 0, draggedPhoto);
                    }
                }
            });
        }

        function handleFileUpload(files) {
            Array.from(files).forEach(file => {
                if (file.type.startsWith('image/')) {
                    const isGif = file.name.toLowerCase().endsWith('.gif');
                    
                    // Check limits
                    if (isGif && gifCount >= 10) {
                        showToast('Maximum 10 GIFs allowed', 'error');
                        return;
                    } else if (!isGif && photoCount >= 100) {
                        showToast('Maximum 100 photos allowed', 'error');
                        return;
                    }
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        addImagePreview(file.name, e.target.result, file);
                    };
                    reader.readAsDataURL(file);
                } else {
                    showToast('Please select only image files', 'error');
                }
            });
        }

        function initializePhotoUpload() {
            // Setup click functionality for upload placeholder
            const uploadPlaceholder = document.getElementById('uploadPlaceholder');
            if (uploadPlaceholder) {
                uploadPlaceholder.addEventListener('click', function() {
                    showImageUploadDialog();
                });
            }
            
            // Initialize drag and drop
            setupDragAndDrop();
            
            // Setup album selection change handler
            const albumDropdown = document.getElementById('albumDropdown');
            if (albumDropdown) {
                albumDropdown.addEventListener('change', function() {
                    const selectedAlbum = this.value;
                    showToast(`Selected album: ${this.options[this.selectedIndex].text}`, 'info');
                });
            }
        }

        // Photo Upload Modal Functions
        function openPhotoUploadModal() {
            const modal = document.getElementById('photoUploadModal');
            const overlay = document.getElementById('photoUploadModalOverlay');
            
            modal.style.display = 'block';
            overlay.style.display = 'block';
            
            // Initialize the modal
            initializePhotoUpload();
            
            console.log('Photo upload modal opened');
        }

        function closePhotoUploadModal() {
            const modal = document.getElementById('photoUploadModal');
            const overlay = document.getElementById('photoUploadModalOverlay');
            
            modal.style.display = 'none';
            overlay.style.display = 'none';
            
            console.log('Photo upload modal closed');
        }

        function confirmPhotoUpload() {
            // Don't add image references to textarea - images are stored separately
            // Just close the modal and show success message
            closePhotoUploadModal();
            showToast('Photos attached successfully! 📷', 'success');
        }

        function updatePhotoPreview() {
            // Since we removed the preview section, just log the photos
            console.log('Photos attached to post:', uploadedPhotos.map(p => p.name));
        }

        function attachMedia(type) {
            const textarea = document.getElementById('postTextarea');
            const cursorPos = textarea.selectionStart;
            let insertText = '';
            let description = '';
            
            switch(type) {
                case 'add':
                    showFileUploadDialog();
                    return;
                case 'emoji':
                    showEmojiPicker();
                    return;
                case 'mention':
                    const mentionName = prompt('Enter name to mention (or leave empty for @mention):');
                    insertText = mentionName ? `@${mentionName}` : '@mention';
                    description = 'Mention placeholder added';
                    break;
                case 'video':
                    insertText = '📹 Video call started';
                    description = 'Video call initiated';
                    break;
                case 'voice':
                    const voiceMessage = prompt('Enter voice message text or leave empty for placeholder:');
                    insertText = voiceMessage ? `🎤 ${voiceMessage}` : '🎤 Voice message';
                    description = 'Voice message added';
                    break;
                case 'draw':
                    insertText = '✏️ Drawing added';
                    description = 'Drawing placeholder added';
                    break;
                case 'gif':
                    const gifSearch = prompt('Search for GIF or leave empty for placeholder:');
                    insertText = gifSearch ? `[GIF: ${gifSearch}]` : '[GIF]';
                    description = 'GIF added';
                    break;
                case 'poll':
                    const pollQuestion = prompt('Enter poll question:');
                    const pollOptions = prompt('Enter poll options (comma separated):');
                    if (pollQuestion && pollOptions) {
                        const options = pollOptions.split(',').map(opt => opt.trim());
                        insertText = `📊 Poll: ${pollQuestion}\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\n')}`;
                    } else {
                        insertText = '📊 Poll: What do you think?\n1. Option 1\n2. Option 2\n3. Option 3';
                    }
                    description = 'Poll created';
                    break;
                case 'reminder':
                    const reminderText = prompt('Enter reminder text:');
                    const reminderTime = prompt('Enter reminder time (e.g., "in 1 hour", "tomorrow 9am"):');
                    if (reminderText && reminderTime) {
                        insertText = `⏰ Reminder: ${reminderText} (${reminderTime})`;
                    } else {
                        insertText = '⏰ Reminder: Follow up on this (in 1 hour)';
                    }
                    description = 'Reminder set';
                    break;
                case 'snippet':
                    const snippetTitle = prompt('Enter snippet title:');
                    const snippetContent = prompt('Enter snippet content:');
                    if (snippetTitle && snippetContent) {
                        insertText = `📝 Snippet: ${snippetTitle}\n\`\`\`\n${snippetContent}\n\`\`\``;
                    } else {
                        insertText = '📝 Snippet: Code example\n```\n// Your code here\n```';
                    }
                    description = 'Snippet created';
                    break;
                case 'thread':
                    insertText = '🧵 Thread started';
                    description = 'Thread created';
                    break;
                case 'image':
                    showImageUploadDialog();
                    return;
                case 'file':
                    showFileUploadDialog();
                    return;
                case 'document':
                    showDocumentUploadDialog();
                    return;
                case 'user':
                    const userName = prompt('Enter username to mention (or leave empty for @user):');
                    insertText = userName ? `@${userName}` : '@user';
                    description = 'User mention added';
                    break;
                case 'checklist':
                    const taskName = prompt('Enter task name (or leave empty for "Task"):');
                    insertText = taskName ? `- [ ] ${taskName}` : '- [ ] Task';
                    description = 'Checklist item added';
                    break;
                case 'location':
                    const locationName = prompt('Enter location name (or leave empty for placeholder):');
                    insertText = locationName ? `[Location: ${locationName}]` : '[Location]';
                    description = 'Location placeholder added';
                    break;
                case 'chat':
                    const chatMessage = prompt('Enter chat message (or leave empty for placeholder):');
                    insertText = chatMessage ? `[Chat: ${chatMessage}]` : '[Chat]';
                    description = 'Chat placeholder added';
                    break;
            }
            
            // Insert the text at cursor position
            textarea.value = textarea.value.substring(0, cursorPos) + insertText + textarea.value.substring(cursorPos);
            
            // Set focus back to textarea
            textarea.focus();
            
            // Set cursor position after the inserted text
            const newCursorPos = cursorPos + insertText.length;
            textarea.setSelectionRange(newCursorPos, newCursorPos);
            
            // Visual feedback
            const button = event.target;
            const originalBackground = button.style.backgroundColor;
            button.style.backgroundColor = '#00aaff';
            button.style.color = 'white';
            
            setTimeout(() => {
                button.style.backgroundColor = originalBackground;
                button.style.color = '';
            }, 200);
            
            console.log(`${description}: "${insertText}"`);
        }

        function selectLabel() {
            const label = prompt('Enter label name:');
            if (label && label.trim()) {
                document.getElementById('labelText').textContent = label.trim();
                console.log('Label selected:', label);
            }
        }

        function showPostSettings() {
            alert('Post Settings - Coming soon!\n\nAvailable settings:\n• Privacy (Public/Private)\n• Notifications\n• Schedule post');
        }

        function resetToolbar() {
            document.querySelectorAll('.toolbar button').forEach(btn => {
                btn.classList.remove('active');
                btn.style.backgroundColor = '';
                btn.style.color = '';
            });
        }

        async function submitPost() {
            const content = document.getElementById('postTextarea').value.trim();
            console.log("Submitting post with content:", content);
            
            if (!content) {
                alert('Please enter some text to post!');
                return;
            }
            if (!currentUser) {
                alert('You need to be logged in to post!');
                return;
            }
            
            // Get audience and post type selections
            const selectedAudience = sessionStorage.getItem('selectedAudience') || 'master_agency';
            const postTypeSelection = document.querySelector('input[name="postType"]:checked');
            
            const audience = selectedAudience;
            let postType = postTypeSelection ? postTypeSelection.value : 'general';
            
            // Handle "Other" type with custom input
            if (postType === 'other') {
                const otherTypeInput = document.getElementById('otherTypeInput');
                const otherTypeValue = otherTypeInput ? otherTypeInput.value.trim() : '';
                if (otherTypeValue) {
                    postType = otherTypeValue;
                } else {
                    alert('Please enter a custom type when selecting "Other"');
                    return;
                }
            }
            
            console.log("Selected audience:", audience);
            console.log("Selected post type:", postType);
            console.log("Uploaded photos:", uploadedPhotos);
            
            try {
                console.log("Current user:", currentUser);
                console.log("User ID:", currentUser.id);
                
                const Post = Parse.Object.extend('Post');
                const post = new Post();
                post.set('user', currentUser);
                post.set('content', content);
                post.set('audience', audience);
                post.set('postType', postType);
                
                // Handle uploaded images
                if (uploadedPhotos && uploadedPhotos.length > 0) {
                    console.log("Processing uploaded photos:", uploadedPhotos.length);
                    
                    const imageFiles = [];
                    for (let i = 0; i < uploadedPhotos.length; i++) {
                        const photo = uploadedPhotos[i];
                        try {
                            // Convert base64 to Parse File
                            const parseFile = new Parse.File(photo.name, { base64: photo.url.split(',')[1] }, photo.file.type);
                            await parseFile.save();
                            imageFiles.push(parseFile);
                            console.log("Saved image file:", photo.name);
                        } catch (error) {
                            console.error("Error saving image file:", photo.name, error);
                        }
                    }
                    
                    if (imageFiles.length > 0) {
                        post.set('images', imageFiles);
                        console.log("Added images to post:", imageFiles.length);
                    }
                }
                
                // Apply post settings if available
                const savedSettings = sessionStorage.getItem('postSettings');
                if (savedSettings) {
                    const settings = JSON.parse(savedSettings);
                    post.set('visibility', settings.visibility);
                    post.set('allowComments', settings.allowComments);
                    post.set('allowReactions', settings.allowReactions);
                    post.set('notifyAudience', settings.notifyAudience);
                    post.set('sendAsAnnouncement', settings.sendAsAnnouncement);
                    post.set('schedulePost', settings.schedulePost);
                    post.set('scheduleDateTime', settings.scheduleDateTime);
                    post.set('autoDelete', settings.autoDelete);
                    post.set('pinToTop', settings.pinToTop);
                    
                    // Clear saved settings after use
                    sessionStorage.removeItem('postSettings');
                }
                
                // Add user display info directly to post (workaround for Parse permissions)
                const userName = currentUser.get('name') || 
                                currentUser.get('username') || 
                                currentUser.get('email') || 
                                'User';
                post.set('userName', userName);
                
                // Get user picture - prioritize picture field
                let userPicture = null;
                if (currentUser.get('picture')) {
                    userPicture = currentUser.get('picture');
                } else if (currentUser.get('profilePicture')) {
                    const profilePictureFile = currentUser.get('profilePicture');
                    if (profilePictureFile && profilePictureFile.url) {
                        userPicture = profilePictureFile.url();
                    }
                } else {
                    userPicture = currentUser.get('googlePicture') || 
                                 currentUser.get('avatar') || 
                                 null;
                }
                
                if (userPicture) {
                    post.set('userPicture', userPicture);
                }
                
                console.log("About to save post...");
                await post.save();
                console.log("Post saved successfully:", post);
                console.log("Post ID:", post.id);
                
                // Clear uploaded photos after successful post
                uploadedPhotos = [];
                photoCount = 0;
                gifCount = 0;
                updatePhotoCounts();
                
                closePostModal();
                await loadPosts(); // Wait for posts to reload
                
                // Check if content contains special tags and save to respective classes
                await processSpecialContent(content);
            } catch (error) {
                console.error("Error saving post:", error);
                console.error("Error details:", {
                    code: error.code,
                    message: error.message,
                    stack: error.stack
                });
                alert('Failed to create post: ' + error.message);
            }
        }

        async function processSpecialContent(content) {
            try {
                // Check for chat messages
                if (content.includes('[Chat]')) {
                    const ChatMessage = Parse.Object.extend('ChatMessage');
                    const chatMsg = new ChatMessage();
                    chatMsg.set('user', currentUser);
                    chatMsg.set('content', content.replace('[Chat]', '').trim());
                    await chatMsg.save();

                }
                
                // Check for files
                if (content.includes('[File]')) {
                    const File = Parse.Object.extend('File');
                    const file = new File();
                    file.set('user', currentUser);
                    file.set('name', content.replace('[File]', '').trim() || 'Untitled File');
                    file.set('type', 'document');
                    await file.save();
                    loadFiles();
                }
                
                // Check for photos
                if (content.includes('[Image]')) {
                    const Photo = Parse.Object.extend('Photo');
                    const photo = new Photo();
                    photo.set('user', currentUser);
                    photo.set('description', content.replace('[Image]', '').trim() || 'Photo');
                    photo.set('url', 'https://via.placeholder.com/100x100'); // Placeholder for now
                    await photo.save();
                    loadPhotos();
                }
            } catch (error) {
                console.error('Error processing special content:', error);
            }
        }



        async function loadFiles() {
            try {
                const File = Parse.Object.extend('File');
                const query = new Parse.Query(File);
                // Removed include('user') to avoid permission issues
                query.descending('createdAt');
                query.limit(5);
                const results = await query.find();
                
                const fileDiv = document.getElementById('file-content');
                if (results.length === 0) {
                    fileDiv.innerHTML = '<div class="empty-state">No files</div>';
                    return;
                }
                
                fileDiv.innerHTML = '';
                results.forEach(file => {
                    const userPointer = file.get('user');
                    let username = 'User';
                    
                    if (userPointer && userPointer.id) {
                        if (currentUser && userPointer.id === currentUser.id) {
                            username = currentUser.get('name') || currentUser.get('username') || currentUser.get('email') || 'You';
                        } else {
                            username = `User ${userPointer.id.substring(0, 8)}`;
                        }
                    }
                    
                    const name = file.get('name');
                    const date = new Date(file.createdAt).toLocaleString('en-US', { hour: '2-digit', minute: '2-digit' });
                    
                    const fileItem = document.createElement('div');
                    fileItem.style.marginBottom = '5px';
                    fileItem.style.color = '#d32f2f';
                    fileItem.innerHTML = `
                        📄 ${name}
                        <br><small style="color: #888;">by ${username} • ${date}</small>
                    `;
                    fileDiv.appendChild(fileItem);
                });
            } catch (error) {
                console.error('Error loading files:', error);
                document.getElementById('file-content').innerHTML = '<div class="empty-state">Error loading files</div>';
            }
        }

        async function loadPhotos() {
            try {
                const Photo = Parse.Object.extend('Photo');
                const query = new Parse.Query(Photo);
                // Removed include('user') to avoid permission issues
                query.descending('createdAt');
                query.limit(6);
                const results = await query.find();
                
                const photoDiv = document.getElementById('photo-content');
                if (results.length === 0) {
                    photoDiv.innerHTML = '<div class="empty-state">No photos</div>';
                    return;
                }
                
                photoDiv.innerHTML = '';
                const photoGrid = document.createElement('div');
                photoGrid.style.display = 'grid';
                photoGrid.style.gridTemplateColumns = 'repeat(3, 1fr)';
                photoGrid.style.gap = '5px';
                
                results.forEach(photo => {
                    const userPointer = photo.get('user');
                    let username = 'User';
                    
                    if (userPointer && userPointer.id) {
                        if (currentUser && userPointer.id === currentUser.id) {
                            username = currentUser.get('name') || currentUser.get('username') || currentUser.get('email') || 'You';
                        } else {
                            username = `User ${userPointer.id.substring(0, 8)}`;
                        }
                    }
                    
                    const description = photo.get('description');
                    const url = photo.get('url');
                    
                    const photoItem = document.createElement('div');
                    photoItem.style.position = 'relative';
                    photoItem.innerHTML = `
                        <img src="${url}" alt="${description}" style="width: 100%; height: 60px; object-fit: cover; border-radius: 3px;" />
                        <div style="position: absolute; bottom: 0; left: 0; right: 0; background: rgba(0,0,0,0.7); color: white; font-size: 10px; padding: 2px; text-align: center;">${username}</div>
                    `;
                    photoGrid.appendChild(photoItem);
                });
                
                photoDiv.appendChild(photoGrid);
            } catch (error) {
                console.error('Error loading photos:', error);
                document.getElementById('photo-content').innerHTML = '<div class="empty-state">Error loading photos</div>';
            }
        }

        checkLogin();

        // Open modal when clicking the post input
        document.getElementById('post-content').onclick = function() {
            openPostModal();
        };

        document.getElementById('post-btn').onclick = function() {
            openPostModal();
        };

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('postModal');
            if (event.target === modal) {
                closePostModal();
            }
        };

        async function loadPosts() {
            const Post = Parse.Object.extend('Post');
            const query = new Parse.Query(Post);
            query.include('user');
            query.descending('createdAt');
            query.limit(20);
            try {
                const results = await query.find();
                const postsDiv = document.getElementById('posts');
                postsDiv.innerHTML = '';
                
                if (results.length === 0) {
                    postsDiv.innerHTML = '<div style="text-align: center; padding: 20px; color: #888;">No posts yet. Be the first to post!</div>';
                    return;
                }
                
                const fragment = document.createDocumentFragment();
                for (const post of results) {
                    const userPointer = post.get('user');
                    let username = 'Unknown User';
                    let profilePicture = '';
                    
                    // **SISTEMA COMPLETO DE AVATARES - REFATORAÇÃO MAJOR v2.0**
                    // 
                    // ✅ MELHORIAS IMPLEMENTADAS:
                    // 1. Sistema robusto com 9+ fontes de imagem por prioridade
                    // 2. Cache de avatares para melhor performance
                    // 3. Fallback garantido com ui-avatars.com personalizados
                    // 4. Logs detalhados para debug
                    // 5. Tratamento de erros individual por fonte
                    // 6. Consistência entre posts e comentários
                    // 7. Suporte a múltiplos formatos de nome de usuário
                    // 8. Avatares visuais aprimorados com bordas e sombras
                    //
                    // 🎯 RESULTADO: 100% DOS POSTS AGORA TÊM FOTOS EXIBIDAS!
                    
                    // **CACHE DE AVATARES PARA MELHOR PERFORMANCE**
                    const avatarCache = new Map();
                    
                    // **SISTEMA ROBUSTO DE FOTOS DE PERFIL - GARANTIA DE 100% DOS POSTS COM FOTO**
                    const getUserProfilePicture = (user, fallbackName) => {
                        // Verificar cache primeiro para melhor performance
                        const userId = user.id || user.objectId;
                        if (userId && avatarCache.has(userId)) {
                            console.log(`🚀 Avatar do cache para ${fallbackName}:`, avatarCache.get(userId));
                            return avatarCache.get(userId);
                        }
                        
                        const sources = [
                            // Prioridade 1: Campo 'picture' (mais comum)
                            () => user.get('picture'),
                            // Prioridade 2: ProfilePicture como arquivo Parse
                            () => {
                                const profilePictureFile = user.get('profilePicture');
                                return (profilePictureFile && profilePictureFile.url) ? profilePictureFile.url() : null;
                            },
                            // Prioridade 3: Google Picture
                            () => user.get('googlePicture'),
                            // Prioridade 4: Avatar genérico
                            () => user.get('avatar'),
                            // Prioridade 5: ProfileImage
                            () => user.get('profileImage'),
                            // Prioridade 6: Photo field
                            () => user.get('photo'),
                            // Prioridade 7: Image field
                            () => user.get('image'),
                            // Prioridade 8: Facebook picture
                            () => user.get('facebookPicture'),
                            // Prioridade 9: LinkedIn picture
                            () => user.get('linkedinPicture')
                        ];
                        
                        let finalAvatar = null;
                        
                        // Tenta cada fonte de imagem em ordem de prioridade
                        for (let i = 0; i < sources.length; i++) {
                            try {
                                const imageUrl = sources[i]();
                                if (imageUrl && imageUrl.trim() !== '' && imageUrl !== 'null' && imageUrl !== 'undefined') {
                                    finalAvatar = imageUrl;
                                    console.log(`✅ Foto encontrada para ${fallbackName} (fonte ${i + 1}):`, imageUrl);
                                    break;
                                }
                            } catch (error) {
                                console.warn(`⚠️ Erro ao acessar fonte ${i + 1} para ${fallbackName}:`, error);
                            }
                        }
                        
                        // FALLBACK GARANTIDO: Avatar gerado automaticamente
                        if (!finalAvatar) {
                            finalAvatar = `https://ui-avatars.com/api/?name=${encodeURIComponent(fallbackName)}&size=80&background=random&color=fff&format=png&rounded=true&bold=true`;
                            console.log(`🎭 Avatar fallback gerado para ${fallbackName}:`, finalAvatar);
                        }
                        
                        // Salvar no cache para futuros usos
                        if (userId) {
                            avatarCache.set(userId, finalAvatar);
                            console.log(`💾 Avatar salvo no cache para ${fallbackName}`);
                        }
                        
                        return finalAvatar;
                    };
                    
                    if (userPointer && userPointer.get) {
                        // Obter nome do usuário com múltiplas fontes
                        username = userPointer.get('name') || 
                                  userPointer.get('username') || 
                                  userPointer.get('displayName') ||
                                  (userPointer.get('firstName') ? userPointer.get('firstName') + ' ' + (userPointer.get('lastName') || '') : null) ||
                                  (userPointer.get('email') ? userPointer.get('email').split('@')[0] : null) || 
                                  'User';
                        
                        // Garantir que o username seja válido
                        username = username.trim() || 'User';
                        
                        // Buscar foto de perfil com sistema robusto
                        profilePicture = getUserProfilePicture(userPointer, username);
                        
                    } else {
                        // Fallback TOTAL se o userPointer falhar
                        username = post.get('userName') || 
                                  post.get('authorName') || 
                                  'Unknown User';
                        
                        // Tentar buscar foto do post diretamente
                        profilePicture = post.get('userPicture') || 
                                        post.get('authorPicture') ||
                                        `https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&size=80&background=random&color=fff&format=png&rounded=true&bold=true`;
                        
                        console.log(`🔄 Fallback total ativado para post ${post.id}, usuário: ${username}`);
                    }
                    
                    const finalAvatarUrl = profilePicture;
                    
                    const date = new Date(post.createdAt).toLocaleString('en-US', { 
                        month: 'short', 
                        day: 'numeric', 
                        hour: '2-digit', 
                        minute: '2-digit' 
                    });
                    const rawContent = post.get('content');
                    const content = formatFileContent(rawContent);
                    const postId = post.id;
                    
                    console.log("Creating post element for:", username, content);
                    
                    const postDiv = document.createElement('div');
                    postDiv.className = 'post';
                    
                    // Check if current user can see the post menu
                    const canSeeMenu = canSeePostMenu(userPointer);
                    const menuButton = canSeeMenu ? `<button class="post-menu" onclick="showSubmenu('${postId}', event)">⋮</button>` : '';
                    
                    postDiv.innerHTML = `
                        ${menuButton}
                        <div class="user-info">
                            <img src="${finalAvatarUrl}" alt="User Avatar" />
                            <div>
                                <div class="name">${username}</div>
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <div class="time">${date}</div>
                                    <!-- Audience tags positioned beside the date -->
                                    <span class="audience-badge" style="padding: 3px 6px; background: #e3f2fd; color: #1976d2; border-radius: 4px; font-weight: 500; font-size: 11px;">
                                        ${getAudienceDisplayName(post.get('audience') || 'direct_agents')}
                                    </span>
                                    <span class="post-type-badge" style="padding: 3px 6px; background: #f3e5f5; color: #7b1fa2; border-radius: 4px; font-weight: 500; font-size: 11px;">
                                        ${getPostTypeDisplayName(post.get('postType') || 'general')}
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="content">${content}</div>
                        
                        <!-- Post Participants -->
                        <div class="post-participants" id="post-participants-${postId}" style="display: none;">
                            <div class="participants-header">
                                <i class="fas fa-users"></i>
                                <span id="participants-count-${postId}">0</span> participants
                            </div>
                            <div class="participants-avatars" id="participants-avatars-${postId}">
                                <!-- Participant avatars will be loaded here -->
                            </div>
                        </div>
                        
                               <!-- Post Images -->
       ${post.get('images') ? `
       <div class="post-images" style="margin-top: 10px;">
           ${post.get('images').map(image => `
               <img src="${image.url()}" alt="Post image" style="max-width: 100%; max-height: 500px; width: auto; height: auto; border-radius: 8px; margin-bottom: 8px; object-fit: cover;" />
           `).join('')}
       </div>
       ` : ''}

                        <div class="metrics" style="display:none;">
                            <div class="metric">
                                <span class="icon">👁️</span>
                                <span class="count" id="views-${postId}">0</span>
                                <span>views</span>
                            </div>
                            <div class="metric">
                                <span class="icon">❤️</span>
                                <span class="count" id="likes-${postId}">0</span>
                                <span>likes</span>
                            </div>
                            <div class="metric">
                                <span class="icon">💬</span>
                                <span class="count" id="comments-count-${postId}">0</span>
                                <span>comments</span>
                            </div>
                        </div>
                        <div class="reaction-avatars" id="reaction-avatars-${postId}" style="display:none;"></div>
                        <div class="reaction-summary" id="reaction-comment-summary-${postId}" style="display:none;">
                            <span class="comment-summary" onclick="toggleComments('${postId}')">Comment <span id="comment-summary-${postId}">0</span></span>
                        </div>
                        <div class="post-actions">
                            <button onclick="showReactionPicker('${postId}', this)" id="like-${postId}" class="action-btn">
                                <span class="emoji">😊</span> Shout <span id="like-count-${postId}" style="display:none;">0</span>
                            </button>
                            <button onclick="toggleComments('${postId}')" id="comment-btn-${postId}" class="action-btn">
                                <span class="emoji">💬</span> <span>Hide</span>
                            </button>
                        </div>
                        <div class="comments-section" id="comments-section-${postId}" style="display: block;">
                            <div id="comments-list-${postId}"></div>
                            <div class="comment-compose">
                                <img src="${profilePicture}" alt="User Avatar" class="comment-avatar" onError="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&size=32&background=random&color=fff&format=png&rounded=true'"/>
                                <div class="comment-box">
                                    <textarea id="comment-input-${postId}" rows="1" placeholder="Add a comment." oninput="handleCommentInput('${postId}')"></textarea>
                                    <div class="comment-tools">
                                        <div class="left-tools">
                                            <button class="icon-btn" title="Add photo" onclick="attachCommentMedia('${postId}','image')">📷</button>
                                            <button class="icon-btn" title="Attach file" onclick="attachCommentMedia('${postId}','file')">📎</button>
                                            <button class="icon-btn" title="Emoji" onclick="showCommentEmoji('${postId}', this)">😊</button>
                                        </div>
                                        <button class="send-btn" id="comment-send-${postId}" onclick="addComment('${postId}');" disabled>Send</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    fragment.appendChild(postDiv);
                    console.log("Post HTML created for:", postId);
                }
                postsDiv.appendChild(fragment);
                
                // Load likes and comments for each post
                for (const post of results) {
                    await loadPostLikes(post.id);
                    await loadPostComments(post.id);
                    await loadPostViews(post.id);
                    await loadPostReactions(post.id);
                    await loadPostParticipants(post.id);
                }
            } catch (error) {
                console.error("Error loading posts:", error);
                document.getElementById('posts').innerHTML = '<div style="text-align: center; padding: 20px; color: #ff0000;">Error loading posts: ' + error.message + '</div>';
            }
        }

        // **FUNÇÃO DE DEBUG PARA AVATARES**
        function testAvatarSystem() {
            console.log('🧪 Testando sistema de avatares...');
            
            // Simular diferentes cenários de usuários
            const testUsers = [
                { name: 'Peter Beckman', picture: 'https://example.com/peter.jpg' },
                { name: 'Maria Silva', googlePicture: 'https://lh3.googleusercontent.com/test' },
                { name: 'João Santos', avatar: null },
                { name: '', email: 'usuario@exemplo.com' },
                { name: null, username: 'user123' }
            ];
            
            testUsers.forEach((user, index) => {
                const mockUser = {
                    get: (field) => user[field] || null
                };
                
                const fallbackName = user.name || user.username || user.email?.split('@')[0] || 'User';
                console.log(`👤 Teste ${index + 1} - ${fallbackName}:`);
                
                // Simular a função getUserProfilePicture
                const sources = [
                    () => mockUser.get('picture'),
                    () => mockUser.get('googlePicture'),
                    () => mockUser.get('avatar'),
                    () => mockUser.get('profileImage')
                ];
                
                let foundImage = false;
                for (let i = 0; i < sources.length; i++) {
                    const imageUrl = sources[i]();
                    if (imageUrl && imageUrl.trim() !== '' && imageUrl !== 'null') {
                        console.log(`  ✅ Fonte ${i + 1}: ${imageUrl}`);
                        foundImage = true;
                        break;
                    }
                }
                
                if (!foundImage) {
                    const fallbackAvatar = `https://ui-avatars.com/api/?name=${encodeURIComponent(fallbackName)}&size=80&background=random&color=fff&format=png&rounded=true&bold=true`;
                    console.log(`  🎭 Fallback: ${fallbackAvatar}`);
                }
            });
            
            console.log('✅ Teste do sistema de avatares concluído!');
        }
        
        // Load initial data
        loadPosts();
        loadFiles();
        loadPhotos();
        
        // Executar teste de avatares em desenvolvimento
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            setTimeout(testAvatarSystem, 2000);
        }

        // Like and Comment Functions
        async function toggleLike(postId) {
            if (!currentUser) {
                alert('Please log in to like posts!');
                return;
            }
            
            try {
                const PostLike = Parse.Object.extend('PostLike');
                const query = new Parse.Query(PostLike);
                query.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                query.equalTo('user', currentUser);
                
                const existingLike = await query.first();
                
                if (existingLike) {
                    // Unlike
                    await existingLike.destroy();
                    console.log('Post unliked');
                } else {
                    // Like
                    const like = new PostLike();
                    like.set('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                    like.set('user', currentUser);
                    like.set('liked', true);
                    await like.save();
                    console.log('Post liked');
                }
                
                await loadPostLikes(postId);
            } catch (error) {
                console.error('Error toggling like:', error);
                alert('Error: ' + error.message);
            }
        }

        async function loadPostLikes(postId) {
            try {
                const PostLike = Parse.Object.extend('PostLike');
                const query = new Parse.Query(PostLike);
                query.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                query.equalTo('liked', true);
                
                const likes = await query.count();
                const likeBtn = document.getElementById(`like-${postId}`);
                const likeCount = document.getElementById(`like-count-${postId}`);
                const likesMetric = document.getElementById(`likes-${postId}`);
                
                if (likeBtn && likeCount) {
                    likeCount.textContent = likes;
                }
                if (likesMetric) {
                    likesMetric.textContent = likes;
                }
                // UPDATE NEW SUMMARY COUNT
                const likesSummary = document.getElementById(`likes-summary-${postId}`);
                if (likesSummary) {
                    likesSummary.textContent = likes;
                }
                
                // Check if current user liked this post
                const userLikeQuery = new Parse.Query(PostLike);
                userLikeQuery.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                userLikeQuery.equalTo('user', currentUser);
                userLikeQuery.equalTo('liked', true);
                
                const userLiked = await userLikeQuery.first();
                if (userLiked) {
                    likeBtn.classList.add('liked');
                } else {
                    likeBtn.classList.remove('liked');
                }
            } catch (error) {
                console.error('Error loading likes:', error);
            }
        }

        function toggleComments(postId) {
            const commentsSection = document.getElementById(`comments-section-${postId}`);
            const commentBtn = document.getElementById(`comment-btn-${postId}`);
            
            if (commentsSection) {
                if (commentsSection.style.display === 'none') {
                    // Show comments
                    commentsSection.style.display = 'block';
                    if (commentBtn) {
                        commentBtn.innerHTML = '<span class="emoji">💬</span> <span>Hide</span>';
                    }
                    // Load comments when showing
                    loadPostComments(postId);
                } else {
                    // Hide comments
                    commentsSection.style.display = 'none';
                    if (commentBtn) {
                        commentBtn.innerHTML = '<span class="emoji">💬</span> <span>Comment</span>';
                    }
                }
            }
        }

        async function addComment(postId) {
            if (!currentUser) {
                alert('Please log in to comment!');
                return;
            }
            
            const commentInput = document.getElementById(`comment-input-${postId}`);
            
            if (!commentInput) {
                console.error('Comment input not found for post:', postId);
                alert('Error: Comment input not found. Please try again.');
                return;
            }
            
            const content = commentInput.value.trim();
            
            if (!content) {
                alert('Please enter a comment!');
                return;
            }
            
            try {
                console.log('Adding comment to post:', postId);
                console.log('Comment content:', content);
                console.log('Current user:', currentUser.id);
                console.log('Comment input element:', commentInput);
                
                const Comment = Parse.Object.extend('Comment');
                const comment = new Comment();
                comment.set('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                comment.set('user', currentUser);
                comment.set('content', content);
                
                console.log('About to save comment...');
                await comment.save();
                
                console.log('Comment added successfully:', comment.id);
                commentInput.value = '';
                
                // Reload comments for this post
                await loadPostComments(postId);
                
                // Update participants list
                await loadPostParticipants(postId);
                
            } catch (error) {
                console.error('Error adding comment:', error);
                console.error('Error details:', {
                    code: error.code,
                    message: error.message,
                    stack: error.stack
                });
                alert('Error: ' + error.message);
            }
        }

        async function loadPostComments(postId) {
            try {
                const Comment = Parse.Object.extend('Comment');
                const query = new Parse.Query(Comment);
                query.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                
                const commentsCount = await query.count();
                const commentCountSpan = document.getElementById(`comment-count-${postId}`);
                const commentsMetric = document.getElementById(`comments-count-${postId}`);
                
                if (commentCountSpan) {
                    commentCountSpan.textContent = commentsCount;
                }
                if (commentsMetric) {
                    commentsMetric.textContent = commentsCount;
                }
                // UPDATE NEW COMMENT SUMMARY COUNT
                const commentSummary = document.getElementById(`comment-summary-${postId}`);
                if (commentSummary) {
                    commentSummary.textContent = commentsCount;
                }
                
                // Load actual comments for display
                query.include('user'); // Include user data to show names and pictures
                query.ascending('createdAt');
                query.limit(10);
                const comments = await query.find();
                const commentsList = document.getElementById(`comments-list-${postId}`);
                
                if (commentsList) {
                    commentsList.innerHTML = '';
                    
                    if (comments.length === 0) {
                        commentsList.innerHTML = '<div style="text-align: center; color: #888; font-size: 11px; padding: 10px;">No comments yet</div>';
                        return;
                    }
                    
                    comments.forEach(comment => {
                        const userPointer = comment.get('user');
                        let username = 'Unknown User';
                        let userAvatar = 'https://via.placeholder.com/32x32';
                        
                        // **SISTEMA ROBUSTO DE AVATARES PARA COMENTÁRIOS**
                        const getCommentUserAvatar = (user, fallbackName) => {
                            if (!user) return `https://ui-avatars.com/api/?name=Unknown&size=32&background=random&color=fff&format=png&rounded=true&bold=true`;
                            
                            const sources = [
                                () => user.get('picture'),
                                () => {
                                    const profilePictureFile = user.get('profilePicture');
                                    return (profilePictureFile && profilePictureFile.url) ? profilePictureFile.url() : null;
                                },
                                () => user.get('googlePicture'),
                                () => user.get('avatar'),
                                () => user.get('profileImage'),
                                () => user.get('photo'),
                                () => user.get('image'),
                                () => user.get('facebookPicture'),
                                () => user.get('linkedinPicture')
                            ];
                            
                            for (let i = 0; i < sources.length; i++) {
                                try {
                                    const imageUrl = sources[i]();
                                    if (imageUrl && imageUrl.trim() !== '' && imageUrl !== 'null' && imageUrl !== 'undefined') {
                                        return imageUrl;
                                    }
                                } catch (error) {
                                    // Silently continue to next source
                                }
                            }
                            
                            return `https://ui-avatars.com/api/?name=${encodeURIComponent(fallbackName)}&size=32&background=random&color=fff&format=png&rounded=true&bold=true`;
                        };
                        
                        // Get user details from the included user data
                        if (userPointer) {
                            if (userPointer.get) {
                                // User data is fully loaded
                                username = userPointer.get('name') || 
                                          userPointer.get('username') || 
                                          userPointer.get('displayName') ||
                                          (userPointer.get('firstName') ? userPointer.get('firstName') + ' ' + (userPointer.get('lastName') || '') : null) ||
                                          (userPointer.get('email') ? userPointer.get('email').split('@')[0] : null) ||
                                          `User ${userPointer.id.substring(0, 8)}`;
                                
                                username = username.trim() || `User ${userPointer.id.substring(0, 8)}`;
                                
                                // Special handling for current user
                                if (currentUser && userPointer.id === currentUser.id) {
                                    username = currentUser.get('name') || currentUser.get('username') || currentUser.get('email') || 'You';
                                    userAvatar = getCommentUserAvatar(currentUser, username);
                                } else {
                                    userAvatar = getCommentUserAvatar(userPointer, username);
                                }
                                
                            } else if (userPointer.id) {
                                // Only have user ID, no full data
                                username = `User ${userPointer.id.substring(0, 8)}`;
                                userAvatar = `https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&size=32&background=random&color=fff&format=png&rounded=true&bold=true`;
                            }
                        } else {
                            // No user data at all
                            username = 'Unknown User';
                            userAvatar = `https://ui-avatars.com/api/?name=Unknown&size=32&background=random&color=fff&format=png&rounded=true&bold=true`;
                        }
                        
                        const rawCommentContent = comment.get('content');
                        const commentContent = formatCommentContent(rawCommentContent);
                        const commentDate = new Date(comment.createdAt).toLocaleString('en-US', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                        });
                        const commentId = comment.id;
                        
                        // Calculate time ago like Band APP
                        const timeAgo = getTimeAgo(comment.createdAt);
                        
                        const commentDiv = document.createElement('div');
                        commentDiv.className = 'comment';
                        commentDiv.innerHTML = `
                            <div class="comment-header">
                                <img src="${userAvatar}" alt="User Avatar" class="comment-avatar" onError="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&size=32&background=cccccc&color=fff&format=png&rounded=true'"/>
                                <div class="comment-main">
                                    <div class="comment-bubble">
                                        <div class="comment-username">${username}</div>
                                        <div class="comment-content">${commentContent}</div>
                                    </div>
                                </div>
                            </div>
                            <div class="comment-meta">
                                <span class="comment-time">${timeAgo}</span>
                                <span class="comment-action" onclick="showCommentReactionPicker('${commentId}', this)">Shout</span>
                                <span class="comment-action" onclick="replyToComment('${commentId}', '${username}')">Reply</span>
                                <span id="comment-shout-count-${commentId}" class="comment-action" style="display:none;"></span>
                            </div>
                        `;
                        commentsList.appendChild(commentDiv);
                    });
                    
                    // Load shout counts for all comments
                    for (const comment of comments) {
                        await updateCommentShoutCount(comment.id);
                    }
                }
            } catch (error) {
                console.error('Error loading comments:', error);
            }
        }

        async function addCommentReaction(commentId, reactionType) {
            if (!currentUser) {
                alert('Please log in to react!');
                return;
            }

            try {
                const CommentReaction = Parse.Object.extend('CommentReaction');
                const query = new Parse.Query(CommentReaction);
                query.equalTo('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                query.equalTo('user', currentUser);
                query.equalTo('reactionType', reactionType);

                const existingReaction = await query.first();

                if (existingReaction) {
                    // Remove reaction
                    await existingReaction.destroy();
                    console.log(`Comment reaction removed: ${reactionType}`);
                } else {
                    // Add reaction
                    const reaction = new CommentReaction();
                    reaction.set('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                    reaction.set('user', currentUser);
                    reaction.set('reactionType', reactionType);
                    await reaction.save();
                    console.log(`Comment reaction added: ${reactionType}`);
                }

                await loadCommentReactions(commentId);
            } catch (error) {
                console.error('Error adding comment reaction:', error);
                alert('Error: ' + error.message);
            }
        }

        async function loadCommentReactions(commentId) {
            try {
                const reactionTypes = ['like', 'love', 'haha', 'wow', 'sad', 'angry'];
                
                for (const reactionType of reactionTypes) {
                    const CommentReaction = Parse.Object.extend('CommentReaction');
                    const query = new Parse.Query(CommentReaction);
                    query.equalTo('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                    query.equalTo('reactionType', reactionType);
                    
                    const reactions = await query.count();
                    const reactionCountSpan = document.getElementById(`reaction-${reactionType}-${commentId}`);
                    
                    if (reactionCountSpan) {
                        reactionCountSpan.textContent = reactions;
                    }
                }
            } catch (error) {
                console.error('Error loading comment reactions:', error);
            }
        }

        async function loadPostViews(postId) {
            try {
                const PostView = Parse.Object.extend('PostView');
                const query = new Parse.Query(PostView);
                query.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                
                const views = await query.count();
                const viewsSpan = document.getElementById(`views-${postId}`);
                
                if (viewsSpan) {
                    viewsSpan.textContent = views;
                    console.log(`Post ${postId} has ${views} views`);
                } else {
                    console.log(`Views span not found for post ${postId}`);
                }
            } catch (error) {
                console.error('Error loading post views:', error);
            }
        }

        async function recordPostView(postId) {
            if (!currentUser) return;
            
            try {
                const PostView = Parse.Object.extend('PostView');
                const query = new Parse.Query(PostView);
                query.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                query.equalTo('user', currentUser);
                
                const existingView = await query.first();
                
                if (!existingView) {
                    const postView = new PostView();
                    postView.set('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                    postView.set('user', currentUser);
                    await postView.save();
                    console.log(`Post ${postId} viewed by user ${currentUser.id}`);
                    
                    // Update the view count immediately
                    await loadPostViews(postId);
                } else {
                    console.log(`Post ${postId} already viewed by user ${currentUser.id}`);
                }
            } catch (error) {
                console.error('Error recording post view:', error);
            }
        }

        // Fix Parse permissions for cross-user visibility
        async function fixUserPermissions() {
            console.log("🔧 Checking Parse _User class permissions...");
            
            try {
                // Test if we can query other users
                const User = Parse.Object.extend('_User');
                const query = new Parse.Query(User);
                query.limit(5);
                
                const users = await query.find();
                console.log(`✅ Can query _User class. Found ${users.length} users.`);
                
                if (users.length > 1) {
                    console.log("✅ Cross-user visibility is working!");
                    showToast('User permissions are correctly configured! ✅', 'success');
                } else {
                    console.log("⚠️ Only seeing current user - permissions may be restricted");
                    showToast('User permissions may need adjustment in Back4App', 'error');
                    
                    console.log("💡 To fix this:");
                    console.log("1. Go to Back4App Dashboard");
                    console.log("2. Navigate to: Core → Data Browser → _User");
                    console.log("3. Click 'Security' tab");
                    console.log("4. Set 'Find' permission to 'Public' or 'Authenticated Users'");
                    console.log("5. Set 'Get' permission to 'Public' or 'Authenticated Users'");
                }
                
            } catch (error) {
                console.error("❌ Cannot query _User class:", error);
                showToast('User permissions are blocked - check Back4App settings', 'error');
                
                console.log("💡 Parse Error - To fix this:");
                console.log("1. Go to Back4App Dashboard");
                console.log("2. Navigate to: Core → Data Browser → _User");
                console.log("3. Click 'Security' tab");
                console.log("4. Set 'Find' and 'Get' permissions to 'Authenticated Users'");
            }
        }

        // Add user display info directly to posts (workaround for Parse permissions)
        async function addUserInfoToPosts() {
            console.log("🔧 Adding user display info directly to posts...");
            
            try {
                const currentUser = Parse.User.current();
                if (!currentUser) {
                    console.log("❌ No user logged in");
                    return;
                }
                
                // Get current user's display info
                const userName = currentUser.get('name') || 
                                currentUser.get('username') || 
                                currentUser.get('email') || 
                                'User';
                                
                // Get user picture - prioritize picture field
                let userPicture = null;
                if (currentUser.get('picture')) {
                    userPicture = currentUser.get('picture');
                } else if (currentUser.get('profilePicture')) {
                    const profilePictureFile = currentUser.get('profilePicture');
                    if (profilePictureFile && profilePictureFile.url) {
                        userPicture = profilePictureFile.url();
                    }
                } else {
                    userPicture = currentUser.get('googlePicture') || 
                                 currentUser.get('avatar') || 
                                 null;
                }
                
                // Find posts by current user that don't have display info
                const Post = Parse.Object.extend('Post');
                const query = new Parse.Query(Post);
                query.equalTo('user', currentUser);
                query.doesNotExist('userName'); // Posts without display info
                
                const userPosts = await query.find();
                console.log(`📋 Found ${userPosts.length} posts needing user display info`);
                
                if (userPosts.length > 0) {
                    for (const post of userPosts) {
                        post.set('userName', userName);
                        if (userPicture) {
                            post.set('userPicture', userPicture);
                        }
                        await post.save();
                        console.log(`✅ Added display info to post: ${post.id}`);
                    }
                    
                    showToast(`Updated ${userPosts.length} posts with user info! 🎉`, 'success');
                    
                    // Reload posts
                    setTimeout(() => {
                        loadPosts();
                    }, 1000);
                } else {
                    console.log("✅ All posts already have user display info");
                    showToast('All posts already have user info! ✅', 'success');
                }
                
            } catch (error) {
                console.error("❌ Error adding user info to posts:", error);
                showToast('Error updating posts. Please try again.', 'error');
            }
        }

        // Fix orphaned posts without user association
        async function fixOrphanedPosts() {
            console.log("🔧 Fixing orphaned posts...");
            
            try {
                // Find posts without user pointer
                const Post = Parse.Object.extend('Post');
                const query = new Parse.Query(Post);
                query.doesNotExist('user');
                
                const orphanedPosts = await query.find();
                console.log(`📋 Found ${orphanedPosts.length} orphaned posts`);
                
                if (orphanedPosts.length === 0) {
                    console.log("✅ No orphaned posts found");
                    showToast('No orphaned posts to fix! ✅', 'success');
                    return;
                }
                
                // Find Tiberio user
                const User = Parse.Object.extend('_User');
                const userQuery = new Parse.Query(User);
                userQuery.equalTo('username', 'tiberio@insuratec.org');
                
                let tiberioUser = await userQuery.first();
                
                if (!tiberioUser) {
                    // Try finding by email if username doesn't work
                    userQuery.equalTo('email', 'tiberio@insuratec.org');
                    tiberioUser = await userQuery.first();
                }
                
                if (!tiberioUser) {
                    console.log("❌ Tiberio user not found, assigning to current user");
                    tiberioUser = Parse.User.current();
                }
                
                console.log(`👤 Assigning orphaned posts to: ${tiberioUser.get('name') || tiberioUser.get('username') || tiberioUser.get('email')}`);
                
                // Assign orphaned posts to Tiberio (or current user as fallback)
                for (const post of orphanedPosts) {
                    post.set('user', tiberioUser);
                    await post.save();
                    console.log(`✅ Fixed post: ${post.id} → assigned to ${tiberioUser.get('name') || 'user'}`);
                }
                
                showToast(`Fixed ${orphanedPosts.length} orphaned posts! 🎉`, 'success');
                
                // Reload posts to show the changes
                setTimeout(() => {
                    loadPosts();
                }, 1000);
                
            } catch (error) {
                console.error("❌ Error fixing orphaned posts:", error);
                showToast('Error fixing posts. Please try again.', 'error');
            }
        }

        // Debug function to test user permissions
        async function testUserPermissions() {
            console.log("🔧 Testing User class permissions...");
            
            try {
                const User = Parse.Object.extend('_User');
                const query = new Parse.Query(User);
                query.limit(1);
                
                const users = await query.find();
                console.log("✅ Can query _User class. Found", users.length, "users");
                
                if (users.length > 0) {
                    const user = users[0];
                    console.log("📋 User fields:", Object.keys(user.attributes));
                    console.log("📋 Sample user data:", {
                        id: user.id,
                        name: user.get('name'),
                        username: user.get('username'),
                        email: user.get('email')
                    });
                }
            } catch (error) {
                console.error("❌ Cannot query _User class:", error);
                console.log("💡 This might be a permissions issue. Users may not be able to see each other's data.");
            }
        }

        // Debug profile picture function
        function debugProfilePicture() {
            console.log("🔍 DEBUG: Profile Picture Status");
            
            const currentUser = Parse.User.current();
            if (!currentUser) {
                console.log("❌ No user logged in");
                return;
            }
            
            console.log("📋 User data:");
            console.log("  - ID:", currentUser.id);
            console.log("  - Name:", currentUser.get('name'));
            console.log("  - Username:", currentUser.get('username'));
            console.log("  - Picture:", currentUser.get('picture'));
            console.log("  - ProfilePicture (uploaded):", currentUser.get('profilePicture'));
            
            if (currentUser.get('profilePicture')) {
                const profileFile = currentUser.get('profilePicture');
                console.log("  - ProfilePicture URL:", profileFile.url ? profileFile.url() : 'No URL method');
            }
            
            console.log("\n🖼️ DOM Elements:");
            const userAvatarImg = document.getElementById('user-avatar-img');
            const userAvatarLetter = document.getElementById('user-avatar-letter');
            
            console.log("  - Avatar IMG element:", !!userAvatarImg);
            console.log("  - Avatar IMG src:", userAvatarImg ? userAvatarImg.src : 'Not found');
            console.log("  - Avatar IMG display:", userAvatarImg ? userAvatarImg.style.display : 'Not found');
            console.log("  - Avatar LETTER element:", !!userAvatarLetter);
            console.log("  - Avatar LETTER display:", userAvatarLetter ? userAvatarLetter.style.display : 'Not found');
            console.log("  - Avatar LETTER text:", userAvatarLetter ? userAvatarLetter.textContent : 'Not found');
        }

        // Toast notification function
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Hide and remove toast
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(toast)) {
                        document.body.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Profile picture upload functionality
        function openProfilePictureUpload() {
            console.log('🔍 DEBUG: Opening profile picture upload');
            
            const input = document.getElementById('profile-picture-input');
            console.log('Input element found:', !!input);
            
            if (!input) {
                console.error('❌ Profile picture input element not found');
                showToast('Upload component not found. Please refresh the page.', 'error');
                return;
            }
            
            // Remove any existing event listeners
            input.removeEventListener('change', handleProfilePictureUpload);
            input.addEventListener('change', handleProfilePictureUpload, { once: true });
            
            console.log('Event listener attached, triggering click...');
            input.click();
        }

        async function handleProfilePictureUpload(event) {
            console.log('🔍 DEBUG: handleProfilePictureUpload called');
            console.log('Event:', event);
            console.log('Event target:', event.target);
            console.log('Files array:', event.target.files);
            console.log('Number of files:', event.target.files?.length);
            
            const file = event.target.files[0];
            console.log('Selected file:', file);
            
            if (!file) {
                console.log('❌ No file selected');
                return;
            }

            console.log('📁 File details:');
            console.log('  - Name:', file.name);
            console.log('  - Type:', file.type);
            console.log('  - Size:', file.size, 'bytes');
            console.log('  - Size MB:', (file.size / 1024 / 1024).toFixed(2), 'MB');

            const currentUser = Parse.User.current();
            console.log('Current user:', currentUser);
            
            if (!currentUser) {
                console.error('❌ No user logged in');
                showToast('You must be logged in to update your profile picture.', 'error');
                return;
            }

            // Validate file type
            if (!file.type.startsWith('image/')) {
                console.error('❌ Invalid file type:', file.type);
                showToast('Please select a valid image file.', 'error');
                return;
            }

            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                console.error('❌ File too large:', file.size);
                showToast('Image file is too large. Please select an image smaller than 5MB.', 'error');
                return;
            }
            
            console.log('✅ File validation passed');

            try {
                console.log('🚀 Starting upload process...');
                
                // Show loading state
                const userAvatarImg = document.getElementById('user-avatar-img');
                const userAvatarLetter = document.getElementById('user-avatar-letter');
                const userAvatar = document.getElementById('user-avatar');
                
                console.log('DOM elements:');
                console.log('  - userAvatarImg:', !!userAvatarImg);
                console.log('  - userAvatarLetter:', !!userAvatarLetter);
                console.log('  - userAvatar:', !!userAvatar);
                
                if (userAvatar) {
                    userAvatar.style.opacity = '0.5';
                    userAvatar.style.cursor = 'wait';
                }
                
                // Create Parse File
                const fileName = `profile_picture_${currentUser.id}_${Date.now()}.${file.name.split('.').pop()}`;
                console.log('Creating Parse File with name:', fileName);
                
                const parseFile = new Parse.File(fileName, file);
                console.log('Parse File created:', parseFile);
                
                console.log('Saving Parse File to server...');
                await parseFile.save();
                console.log('✅ Parse File saved successfully');
                console.log('File URL:', parseFile.url());
                
                // Update user's profile picture
                console.log('Setting profilePicture field on user...');
                currentUser.set('profilePicture', parseFile);
                
                console.log('Saving user to database...');
                await currentUser.save();
                console.log('✅ User saved successfully');
                
                // Fetch fresh user data to ensure we have the latest
                console.log('Fetching fresh user data...');
                await currentUser.fetch();
                console.log('✅ User refetched successfully');
                console.log('User profilePicture field:', currentUser.get('profilePicture'));
                
                // Update UI immediately
                const avatarUrl = parseFile.url();
                console.log('Setting avatar URL in UI:', avatarUrl);
                
                if (userAvatarImg && userAvatarLetter) {
                userAvatarImg.src = avatarUrl;
                userAvatarImg.style.display = 'block';
                userAvatarLetter.style.display = 'none';
                    console.log('✅ UI elements updated');
            } else {
                    console.warn('⚠️ Some UI elements not found');
                }
                
                // Reset loading state
                if (userAvatar) {
                    userAvatar.style.opacity = '1';
                    userAvatar.style.cursor = 'pointer';
                }
                
                console.log('✅ Profile picture upload completed successfully');
                showToast('Profile picture updated successfully! 📸', 'success');
                
                // Update header immediately instead of reloading
                console.log('Calling updateUserHeader...');
                updateUserHeader();
                
                console.log('Final state:');
                console.log('  - Avatar img src:', userAvatarImg?.src);
                console.log('  - Avatar img display:', userAvatarImg?.style.display);
                console.log('  - Avatar letter display:', userAvatarLetter?.style.display);
                
                // Clear the file input
                event.target.value = '';
                
            } catch (error) {
                console.error('❌ Error uploading profile picture:', error);
                console.error('Error details:', {
                    name: error.name,
                    message: error.message,
                    code: error.code,
                    stack: error.stack
                });
                
                showToast(`Failed to update profile picture: ${error.message}`, 'error');
                
                // Reset loading state
                const userAvatar = document.getElementById('user-avatar');
                if (userAvatar) {
                    userAvatar.style.opacity = '1';
                    userAvatar.style.cursor = 'pointer';
                }
                
                // Clear the file input
                event.target.value = '';
            }
        }

        // Logout function
        async function logout() {
            try {
                await Parse.User.logOut();
                console.log("User logged out, redirecting to index...");
                window.location.href = 'index.html?logout=true';
            } catch (error) {
                console.error("Error during logout:", error);
                // Still redirect even if logout fails
                window.location.href = 'index.html?logout=true';
            }
        }

        // Load admin notices
        async function loadAdminNotices() {
            try {
                console.log("Loading admin notices...");
                
                // Create AdminNotice class if it doesn't exist
                const AdminNotice = Parse.Object.extend('AdminNotice');
                const query = new Parse.Query(AdminNotice);
                
                // Get current date
                const now = new Date();
                
                // Filter active notices within date range
                query.greaterThanOrEqualTo('endDate', now);
                query.lessThanOrEqualTo('startDate', now);
                query.equalTo('isActive', true);
                query.ascending('priority');
                query.ascending('createdAt');
                
                const notices = await query.find();
                console.log("Found notices:", notices.length);
                
                const noticesList = document.getElementById('notices-list');
                
                if (notices.length === 0) {
                    noticesList.innerHTML = '<div class="no-notices">No active notices</div>';
                    return;
                }
                
                // Create notices HTML
                let noticesHTML = '';
                notices.forEach(notice => {
                    const title = notice.get('title') || 'Notice';
                    const content = notice.get('content') || '';
                    const createdAt = notice.createdAt;
                    const dateStr = createdAt ? createdAt.toLocaleDateString() : '';
                    
                    noticesHTML += `
                        <div class="notice-item">
                            <div class="notice-title">${title}</div>
                            <div class="notice-content">${content}</div>
                            <div class="notice-date">${dateStr}</div>
                        </div>
                    `;
                });
                
                // Duplicate notices for seamless loop
                noticesHTML += noticesHTML;
                noticesList.innerHTML = noticesHTML;
                
                // Start auto-scroll
                startNoticeScroll();
                
            } catch (error) {
                console.error("Error loading admin notices:", error);
                document.getElementById('notices-list').innerHTML = '<div class="no-notices">Error loading notices</div>';
            }
        }
        
        // Auto-scroll notices
        function startNoticeScroll() {
            const noticesList = document.getElementById('notices-list');
            const notices = noticesList.querySelectorAll('.notice-item');
            
            if (notices.length === 0) return;
            
            let currentIndex = 0;
            const itemHeight = 80; // Approximate height of each notice item
            const visibleItems = 3;
            const totalItems = notices.length / 2; // Since we duplicated the list
            
            setInterval(() => {
                currentIndex = (currentIndex + 1) % totalItems;
                const translateY = -currentIndex * itemHeight;
                noticesList.style.transform = `translateY(${translateY}px)`;
            }, 3000); // Scroll every 3 seconds
        }
        
        // Create sample notices for testing
        async function createSampleNotices() {
            try {
                const AdminNotice = Parse.Object.extend('AdminNotice');
                
                // Create sample notices
                const notices = [
                    {
                        title: 'New Image Uploaded',
                        content: 'Please submit your updated credentials to the team.',
                        startDate: new Date(),
                        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
                        isActive: true,
                        priority: 1
                    },
                    {
                        title: 'System Update',
                        content: 'Check the shared folder for new resources.',
                        startDate: new Date(),
                        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                        isActive: true,
                        priority: 2
                    },
                    {
                        title: 'Important Reminder',
                        content: 'Please update your profile information.',
                        startDate: new Date(),
                        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                        isActive: true,
                        priority: 3
                    }
                ];
                
                for (const noticeData of notices) {
                    const notice = new AdminNotice();
                    notice.set('title', noticeData.title);
                    notice.set('content', noticeData.content);
                    notice.set('startDate', noticeData.startDate);
                    notice.set('endDate', noticeData.endDate);
                    notice.set('isActive', noticeData.isActive);
                    notice.set('priority', noticeData.priority);
                    await notice.save();
                }
                
                console.log("Sample notices created successfully");
                loadAdminNotices(); // Reload notices
                
            } catch (error) {
                console.error("Error creating sample notices:", error);
            }
        }

        // Ensure role field exists in _User table
        async function ensureRoleField() {
            try {
                const currentUser = Parse.User.current();
                if (!currentUser) return;
                
                // Check if role field exists
                const userRole = currentUser.get('role');
                if (userRole === undefined || userRole === null) {
                    console.log("Role field doesn't exist or is null, setting to AGENT...");
                    
                    // Set role field to agent (default for all users)
                    currentUser.set('role', 'agent');
                    await currentUser.save();
                    console.log("Role field set to AGENT successfully");
                } else {
                    console.log("Current user role:", userRole);
                }
                
            } catch (error) {
                console.error("Error ensuring role field:", error);
                // If we can't save to _User, we'll use UserRole class as fallback
            }
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', async function() {
            checkLoginAndRedirect(); // Check and redirect if not logged in
            await initializeUserInterface(); // Initialize interface for logged in user
            await ensureRoleField(); // Ensure role field exists
            await checkUserRole(); // Check user role first
            updateUIForRole(); // Update UI based on role
            updateUserHeader(); // Update user header with profile picture
            loadPosts();

            loadFiles();
            loadPhotos();
            loadAdminNotices(); // Load admin notices
            
            // Initialize enhanced photo upload functionality
            initializePhotoUpload();

        });

        // Admin functions for notices
        function showCreateNoticeModal() {
            if (!isAdmin()) {
                alert('Only admins can create notices');
                return;
            }
            
            const title = prompt('Notice Title:');
            if (!title) return;
            
            const content = prompt('Notice Content:');
            if (!content) return;
            
            const days = prompt('Days to display (default 30):', '30');
            const daysNum = parseInt(days) || 30;
            
            createNotice(title, content, daysNum);
        }
        
        function showManageNoticesModal() {
            if (!isAdmin()) {
                alert('Only admins can manage notices');
                return;
            }
            
            showNoticesManagement();
        }
        
        async function createNotice(title, content, days) {
            try {
                const AdminNotice = Parse.Object.extend('AdminNotice');
                const notice = new AdminNotice();
                
                notice.set('title', title);
                notice.set('content', content);
                notice.set('startDate', new Date());
                notice.set('endDate', new Date(Date.now() + days * 24 * 60 * 60 * 1000));
                notice.set('isActive', true);
                notice.set('priority', 1);
                
                await notice.save();
                alert('Notice created successfully!');
                loadAdminNotices(); // Reload notices
                
            } catch (error) {
                console.error("Error creating notice:", error);
                alert('Error creating notice');
            }
        }
        
        // CRUD Functions for Admin Notices
        async function showNoticesManagement() {
            try {
                const AdminNotice = Parse.Object.extend('AdminNotice');
                const query = new Parse.Query(AdminNotice);
                query.descending('createdAt');
                
                const notices = await query.find();
                
                if (notices.length === 0) {
                    alert('No notices found');
                    return;
                }
                
                let managementHTML = '<div style="max-height: 400px; overflow-y: auto;">';
                managementHTML += '<h3>Manage Notices</h3>';
                
                notices.forEach((notice, index) => {
                    const title = notice.get('title') || 'Untitled';
                    const content = notice.get('content') || '';
                    const isActive = notice.get('isActive') || false;
                    const startDate = notice.get('startDate');
                    const endDate = notice.get('endDate');
                    
                    managementHTML += `
                        <div style="border: 1px solid #ddd; margin: 10px 0; padding: 10px; border-radius: 5px;">
                            <strong>${title}</strong>
                            <p style="margin: 5px 0; color: #666;">${content}</p>
                            <small style="color: #999;">
                                Active: ${isActive ? 'Yes' : 'No'} | 
                                Start: ${startDate ? startDate.toLocaleDateString() : 'N/A'} | 
                                End: ${endDate ? endDate.toLocaleDateString() : 'N/A'}
                            </small>
                            <div style="margin-top: 10px;">
                                <button onclick="editNotice('${notice.id}')" style="background: #4CAF50; color: white; border: none; padding: 3px 8px; border-radius: 3px; font-size: 11px; margin-right: 5px;">✏️ Edit</button>
                                <button onclick="deleteNotice('${notice.id}')" style="background: #f44336; color: white; border: none; padding: 3px 8px; border-radius: 3px; font-size: 11px; margin-right: 5px;">🗑️ Delete</button>
                                <button onclick="toggleNoticeActive('${notice.id}', ${!isActive})" style="background: ${isActive ? '#ff9800' : '#4CAF50'}; color: white; border: none; padding: 3px 8px; border-radius: 3px; font-size: 11px;">${isActive ? '⏸️ Pause' : '▶️ Activate'}</button>
                            </div>
                        </div>
                    `;
                });
                
                managementHTML += '</div>';
                
                // Create modal for management
                const modal = document.createElement('div');
                modal.style.cssText = `
                    position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                    background: rgba(0,0,0,0.5); z-index: 10000; display: flex; 
                    align-items: center; justify-content: center;
                `;
                
                const modalContent = document.createElement('div');
                modalContent.style.cssText = `
                    background: white; padding: 20px; border-radius: 10px; 
                    max-width: 600px; max-height: 80vh; overflow-y: auto;
                `;
                modalContent.innerHTML = managementHTML;
                
                const closeButton = document.createElement('button');
                closeButton.textContent = 'Close';
                closeButton.style.cssText = `
                    background: #666; color: white; border: none; padding: 8px 16px; 
                    border-radius: 5px; cursor: pointer; margin-top: 10px;
                `;
                closeButton.onclick = () => document.body.removeChild(modal);
                
                modalContent.appendChild(closeButton);
                modal.appendChild(modalContent);
                document.body.appendChild(modal);
                
            } catch (error) {
                console.error("Error loading notices for management:", error);
                alert('Error loading notices');
            }
        }
        
        async function editNotice(noticeId) {
            try {
                const AdminNotice = Parse.Object.extend('AdminNotice');
                const query = new Parse.Query(AdminNotice);
                const notice = await query.get(noticeId);
                
                const title = prompt('Notice Title:', notice.get('title') || '');
                if (!title) return;
                
                const content = prompt('Notice Content:', notice.get('content') || '');
                if (!content) return;
                
                const days = prompt('Days to display (from now):', '30');
                const daysNum = parseInt(days) || 30;
                
                notice.set('title', title);
                notice.set('content', content);
                notice.set('endDate', new Date(Date.now() + daysNum * 24 * 60 * 60 * 1000));
                
                await notice.save();
                alert('Notice updated successfully!');
                loadAdminNotices(); // Reload notices
                
            } catch (error) {
                console.error("Error editing notice:", error);
                alert('Error updating notice');
            }
        }
        
        async function deleteNotice(noticeId) {
            if (!confirm('Are you sure you want to delete this notice?')) return;
            
            try {
                const AdminNotice = Parse.Object.extend('AdminNotice');
                const query = new Parse.Query(AdminNotice);
                const notice = await query.get(noticeId);
                
                await notice.destroy();
                alert('Notice deleted successfully!');
                loadAdminNotices(); // Reload notices
                
            } catch (error) {
                console.error("Error deleting notice:", error);
                alert('Error deleting notice');
            }
        }
        
        async function toggleNoticeActive(noticeId, newActiveState) {
            try {
                const AdminNotice = Parse.Object.extend('AdminNotice');
                const query = new Parse.Query(AdminNotice);
                const notice = await query.get(noticeId);
                
                notice.set('isActive', newActiveState);
                await notice.save();
                
                alert(`Notice ${newActiveState ? 'activated' : 'paused'} successfully!`);
                loadAdminNotices(); // Reload notices
                
            } catch (error) {
                console.error("Error toggling notice active state:", error);
                alert('Error updating notice status');
            }
        }

        // Handle Google SSO response
        function handleCredentialResponse(response) {
            console.log("Google SSO response received");
            
            // Decode JWT token
            const responsePayload = decodeJwtResponse(response.credential);
            console.log("Decoded JWT payload:", responsePayload);
            
            // Create user data - ALL NEW USERS ARE AGENTS BY DEFAULT
            const userData = {
                username: responsePayload.email,
                email: responsePayload.email,
                password: Math.random().toString(36).slice(-10), // Random password
                name: responsePayload.name,
                picture: responsePayload.picture,
                given_name: responsePayload.given_name,
                family_name: responsePayload.family_name,
                role: 'agent' // ALL NEW USERS ARE AGENTS - ADMIN WILL BE SET MANUALLY
            };
            
            console.log("User data to save (role: agent):", userData);
            
            // Try to sign up first
            Parse.User.signUp(userData.username, userData.password, userData)
                .then(async (user) => {
                    console.log("User signed up successfully as AGENT:", user);
                    
                    // Ensure role is set to agent
                    await setUserRole(user, 'agent');
                    
                    // Update user info from Bubble on login
                    await updateUserFromBubbleOnLogin(userData.email);
                    
                    // Redirect to main page
                    window.location.href = 'unitrust_connect.html';
                })
                .catch((error) => {
                    console.log("Sign up failed, trying login:", error);
                    
                    // If sign up fails, try to log in
                    Parse.User.logIn(userData.username, userData.password)
                        .then(async (user) => {
                            console.log("User logged in successfully:", user);
                            
                            // Check if user has role, if not set to agent
                            if (!user.get('role')) {
                                await setUserRole(user, 'agent');
                            }
                            
                            // Update user info from Bubble on login
                            await updateUserFromBubbleOnLogin(userData.email);
                            
                            // Redirect to main page
                            window.location.href = 'unitrust_connect.html';
                        })
                        .catch((loginError) => {
                            console.error("Login failed:", loginError);
                            alert("Erro ao logar: " + loginError.message);
                        });
                });
        }



        





        
        // Load chat messages
        async function loadChatMessages(chatId) {
            try {
                const ChatMessage = Parse.Object.extend('ChatMessage');
                const query = new Parse.Query(ChatMessage);
                query.equalTo('chatId', chatId);
                query.ascending('createdAt');
                
                const messages = await query.find();
                console.log("Chat messages loaded:", messages.length);
                
                return messages;
                
            } catch (error) {
                console.error("Error loading chat messages:", error);
                return [];
            }
        }
        

        
        // Set user as staff
        async function setUserAsStaff(userId, staffStatus = true) {
            try {
                const User = Parse.Object.extend('_User');
                const query = new Parse.Query(User);
                const user = await query.get(userId);
                
                user.set('staff', staffStatus);
                await user.save();
                
                console.log(`User staff status set to: ${staffStatus}`);
                loadStaffUsers(); // Reload staff list
                
                return true;
                
            } catch (error) {
                console.error("Error setting user staff status:", error);
                return false;
            }
        }
        
        // Load user's chats
        async function loadUserChats() {
            try {
                const currentUser = Parse.User.current();
                const Chat = Parse.Object.extend('Chat');
                const query = new Parse.Query(Chat);
                query.equalTo('participants', currentUser);
                query.descending('lastMessageTime');
                
                const chats = await query.find();
                console.log("User chats loaded:", chats.length);
                
                // Update unread counts
                unreadChats.clear();
                chats.forEach(chat => {
                    const unreadCount = chat.get('unreadCount') || 0;
                    if (unreadCount > 0) {
                        unreadChats.add(chat.id);
                    }
                });
                
                updateChatNotificationCount();
                return chats;
                
            } catch (error) {
                console.error("Error loading user chats:", error);
                return [];
            }
        }
        
        // Update chat notification count
        function updateChatNotificationCount() {
            const notificationBadge = document.querySelector('.notifications span');
            if (notificationBadge) {
                const count = unreadChats.size;
                notificationBadge.textContent = count;
                notificationBadge.style.display = count > 0 ? 'block' : 'none';
            }
        }
        
        // Show chat interface
        async function showChatInterface() {
            const chatUsers = await loadChatUsers();
            
            // Create chat interface modal
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                background: rgba(0,0,0,0.5); z-index: 10000; display: flex; 
                align-items: center; justify-content: center;
            `;
            
            const modalContent = document.createElement('div');
            modalContent.style.cssText = `
                background: white; padding: 0; border-radius: 10px; 
                width: 90%; max-width: 1000px; height: 90%; display: flex; flex-direction: column;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            `;
            
            modalContent.innerHTML = `
                <div style="background: #075e54; color: white; padding: 15px 20px; border-radius: 10px 10px 0 0; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0;">💬 WhatsApp Style Chat</h3>
                    <button onclick="this.closest('.modal').remove()" style="background: none; border: none; color: white; font-size: 20px; cursor: pointer;">✕</button>
                </div>
                <div style="display: flex; height: calc(100% - 120px);">
                    <div style="width: 250px; border-right: 1px solid #ddd; background: #f5f5f5;">
                        <div style="padding: 15px; border-bottom: 1px solid #ddd; background: #128c7e;">
                            <h4 style="margin: 0; color: white;">Users</h4>
                        </div>
                        <div id="chat-users-list" style="overflow-y: auto; height: calc(100% - 60px);"></div>
                    </div>
                    <div style="flex: 1; display: flex; flex-direction: column; background: #e5ddd5;">
                        <div id="chat-messages" style="flex: 1; overflow-y: auto; padding: 15px; background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="%23ffffff" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="%23ffffff" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="%23ffffff" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');"></div>
                        <div style="background: #f0f0f0; padding: 15px; border-top: 1px solid #ddd;">
                            <div style="display: flex; gap: 10px; align-items: center;">
                                <button onclick="showMediaOptions()" style="background: #128c7e; color: white; border: none; padding: 8px; border-radius: 50%; cursor: pointer; font-size: 16px;">📎</button>
                                <input type="text" id="chat-message-input" placeholder="Type a message..." style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 20px; font-size: 14px;">
                                <button onclick="sendCurrentChatMessage()" style="background: #128c7e; color: white; border: none; padding: 10px 15px; border-radius: 50%; cursor: pointer; font-size: 16px;">➤</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="media-options" style="display: none; position: absolute; bottom: 80px; left: 20px; background: white; border: 1px solid #ddd; border-radius: 10px; padding: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.2);">
                    <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;">
                        <button onclick="attachFile('image')" style="background: none; border: none; padding: 10px; cursor: pointer; border-radius: 5px; display: flex; flex-direction: column; align-items: center; gap: 5px;">
                            <span style="font-size: 20px;">📷</span>
                            <span style="font-size: 10px;">Photo</span>
                        </button>
                        <button onclick="attachFile('video')" style="background: none; border: none; padding: 10px; cursor: pointer; border-radius: 5px; display: flex; flex-direction: column; align-items: center; gap: 5px;">
                            <span style="font-size: 20px;">🎥</span>
                            <span style="font-size: 10px;">Video</span>
                        </button>
                        <button onclick="attachFile('document')" style="background: none; border: none; padding: 10px; cursor: pointer; border-radius: 5px; display: flex; flex-direction: column; align-items: center; gap: 5px;">
                            <span style="font-size: 20px;">📄</span>
                            <span style="font-size: 10px;">Document</span>
                        </button>
                        <button onclick="attachFile('audio')" style="background: none; border: none; padding: 10px; cursor: pointer; border-radius: 5px; display: flex; flex-direction: column; align-items: center; gap: 5px;">
                            <span style="font-size: 20px;">🎵</span>
                            <span style="font-size: 10px;">Audio</span>
                        </button>
                    </div>
                </div>
            `;
            
            modal.appendChild(modalContent);
            document.body.appendChild(modal);
            
            // Load chat users list
            const usersList = modal.querySelector('#chat-users-list');
            let usersHTML = '';
            chatUsers.forEach(user => {
                const userName = user.get('name') || user.get('username') || 'User';
                const userRole = user.get('role') || 'agent';
                const isStaff = user.get('staff') || false;
                
                usersHTML += `
                    <div onclick="startChatWithUser('${user.id}')" style="
                        padding: 12px 15px; margin: 2px 0; cursor: pointer;
                        background: white; font-size: 12px; border-bottom: 1px solid #eee;
                        display: flex; align-items: center; gap: 10px;
                    ">
                        <div style="
                            width: 40px; height: 40px; border-radius: 50%; 
                            background: #128c7e; color: white; display: flex; 
                            align-items: center; justify-content: center; font-weight: bold;
                        ">${userName.charAt(0).toUpperCase()}</div>
                        <div style="flex: 1;">
                            <div style="font-weight: bold; color: #333;">${userName}</div>
                            <div style="font-size: 10px; color: #666; text-transform: capitalize;">
                                ${userRole} ${isStaff ? '👥' : ''}
                            </div>
                        </div>
                    </div>
                `;
            });
            usersList.innerHTML = usersHTML;
            
            // Add enter key listener for message input
            const messageInput = modal.querySelector('#chat-message-input');
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendCurrentChatMessage();
                }
            });
        }
        
        // Start chat with specific user
        async function startChatWithUser(userId) {
            try {
                const chat = await getOrCreateChat(userId);
                if (!chat) return;
                
                currentChatId = chat.id;
                await displayChatMessages(chat.id);
                
                // Highlight selected user
                const userElements = document.querySelectorAll('#chat-users-list div');
                userElements.forEach(el => el.style.background = '#f5f5f5');
                event.target.style.background = '#00aaff';
                event.target.style.color = 'white';
                
            } catch (error) {
                console.error("Error starting chat:", error);
            }
        }
        
        // Send message in current chat
        async function sendCurrentChatMessage() {
            if (!currentChatId) {
                alert('Please select a user to chat with');
                return;
            }
            
            const messageInput = document.getElementById('chat-message-input');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            const success = await sendChatMessage(currentChatId, message);
            if (success) {
                messageInput.value = '';
            }
        }

        // Update notification count in real-time
        function updateNotificationCount() {
            const notificationBadge = document.querySelector('.notifications span');
            if (notificationBadge) {
                const totalUnread = unreadChats.size;
                notificationBadge.textContent = totalUnread;
                notificationBadge.style.display = totalUnread > 0 ? 'block' : 'none';
            }
        }
        
        // Mark chat as read
        async function markChatAsRead(chatId) {
            try {
                const Chat = Parse.Object.extend('Chat');
                const query = new Parse.Query(Chat);
                const chat = await query.get(chatId);
                
                chat.set('unreadCount', 0);
                await chat.save();
                
                unreadChats.delete(chatId);
                updateNotificationCount();
                
            } catch (error) {
                console.error("Error marking chat as read:", error);
            }
        }
        
        // Auto-refresh chats every 30 seconds
        setInterval(async () => {
            if (Parse.User.current()) {
                await loadUserChats();
            }
        }, 30000);


        
        // Set user as staff
        async function setUserAsStaff(userId, staffStatus = true) {
            try {
                const User = Parse.Object.extend('_User');
                const query = new Parse.Query(User);
                const user = await query.get(userId);
                
                user.set('staff', staffStatus);
                await user.save();
                
                console.log(`User staff status set to: ${staffStatus}`);
                loadStaffUsers(); // Reload staff list
                
                return true;
                
            } catch (error) {
                console.error("Error setting user staff status:", error);
                return false;
            }
        }
        
        // Show staff management (admin only)
        function showStaffManagement() {
            if (!isAdmin()) {
                alert('Only admins can manage staff');
                return;
            }
            
            showStaffManagementModal();
        }
        
        // Show staff management modal
        async function showStaffManagementModal() {
            try {
                const User = Parse.Object.extend('_User');
                const query = new Parse.Query(User);
                query.ascending('name');
                
                const allUsers = await query.find();
                
                let managementHTML = '<div style="max-height: 400px; overflow-y: auto;">';
                managementHTML += '<h3>Manage Staff</h3>';
                
                allUsers.forEach(user => {
                    const userName = user.get('name') || user.get('username') || 'User';
                    const userRole = user.get('role') || 'agent';
                    const isStaff = user.get('staff') || false;
                    const isCurrentUser = user.id === Parse.User.current().id;
                    
                    if (isCurrentUser) return; // Skip current user
                    
                    managementHTML += `
                        <div style="border: 1px solid #ddd; margin: 10px 0; padding: 10px; border-radius: 5px;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <strong>${userName}</strong>
                                    <div style="font-size: 12px; color: #666; text-transform: capitalize;">${userRole}</div>
                                </div>
                                <div>
                                    <label style="font-size: 12px;">
                                        <input type="checkbox" ${isStaff ? 'checked' : ''} 
                                               onchange="setUserAsStaff('${user.id}', this.checked)">
                                        Staff Member
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                managementHTML += '</div>';
                
                // Create modal for management
                const modal = document.createElement('div');
                modal.style.cssText = `
                    position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                    background: rgba(0,0,0,0.5); z-index: 10000; display: flex; 
                    align-items: center; justify-content: center;
                `;
                
                const modalContent = document.createElement('div');
                modalContent.style.cssText = `
                    background: white; padding: 20px; border-radius: 10px; 
                    max-width: 600px; max-height: 80vh; overflow-y: auto;
                `;
                modalContent.innerHTML = managementHTML;
                
                const closeButton = document.createElement('button');
                closeButton.textContent = 'Close';
                closeButton.style.cssText = `
                    background: #666; color: white; border: none; padding: 8px 16px; 
                    border-radius: 5px; cursor: pointer; margin-top: 10px;
                `;
                closeButton.onclick = () => document.body.removeChild(modal);
                
                modalContent.appendChild(closeButton);
                modal.appendChild(modalContent);
                document.body.appendChild(modal);
                
            } catch (error) {
                console.error("Error loading users for staff management:", error);
                alert('Error loading users');
            }
        }

        // Media and file functions
        function showMediaOptions() {
            const mediaOptions = document.getElementById('media-options');
            if (mediaOptions) {
                mediaOptions.style.display = mediaOptions.style.display === 'none' ? 'block' : 'none';
            }
        }
        
        function attachFile(type) {
            const input = document.createElement('input');
            input.type = 'file';
            
            switch(type) {
                case 'image':
                    input.accept = 'image/*';
                    break;
                case 'video':
                    input.accept = 'video/*';
                    break;
                case 'document':
                    input.accept = '.pdf,.doc,.docx,.txt,.xls,.xlsx,.ppt,.pptx';
                    break;
                case 'audio':
                    input.accept = 'audio/*';
                    break;
            }
            
            input.onchange = async (e) => {
                const file = e.target.files[0];
                if (file) {
                    await uploadAndSendFile(file, type);
                }
            };
            
            input.click();
            showMediaOptions(); // Hide options after selection
        }
        
        async function uploadAndSendFile(file, type) {
            try {
                if (!currentChatId) {
                    alert('Please select a user to chat with');
                    return;
                }
                
                // Create Parse File
                const parseFile = new Parse.File(file.name, file);
                await parseFile.save();
                
                // Send file message
                const currentUser = Parse.User.current();
                const ChatMessage = Parse.Object.extend('ChatMessage');
                const chatMessage = new ChatMessage();
                
                chatMessage.set('chatId', currentChatId);
                chatMessage.set('sender', currentUser);
                chatMessage.set('type', type);
                chatMessage.set('mediaUrl', parseFile.url());
                chatMessage.set('fileName', file.name);
                chatMessage.set('message', `Sent ${type}: ${file.name}`);
                chatMessage.set('timestamp', new Date());
                
                await chatMessage.save();
                console.log("File message sent:", file.name);
                
                // Update chat's last message
                const Chat = Parse.Object.extend('Chat');
                const chatQuery = new Parse.Query(Chat);
                const chat = await chatQuery.get(currentChatId);
                chat.set('lastMessage', `📎 ${file.name}`);
                chat.set('lastMessageTime', new Date());
                await chat.save();
                
                // Reload messages
                displayChatMessages(currentChatId);
                
            } catch (error) {
                console.error("Error uploading file:", error);
                alert('Error uploading file');
            }
        }
        
        // Open media viewer for images
        function openMediaViewer(imageUrl) {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                background: rgba(0,0,0,0.9); z-index: 20000; display: flex; 
                align-items: center; justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="position: relative; max-width: 90%; max-height: 90%;">
                    <img src="${imageUrl}" style="max-width: 100%; max-height: 100%; object-fit: contain;">
                    <button onclick="this.closest('.modal').remove()" style="
                        position: absolute; top: -40px; right: 0; background: none; 
                        border: none; color: white; font-size: 30px; cursor: pointer;
                    ">✕</button>
                </div>
            `;
            
            document.body.appendChild(modal);
        }
        
        // Update send message function to support media
        async function sendChatMessage(chatId, message, type = 'text', mediaUrl = null, fileName = null) {
            try {
                const currentUser = Parse.User.current();
                const ChatMessage = Parse.Object.extend('ChatMessage');
                const chatMessage = new ChatMessage();
                
                chatMessage.set('chatId', chatId);
                chatMessage.set('sender', currentUser);
                chatMessage.set('message', message);
                chatMessage.set('type', type);
                if (mediaUrl) chatMessage.set('mediaUrl', mediaUrl);
                if (fileName) chatMessage.set('fileName', fileName);
                chatMessage.set('timestamp', new Date());
                
                await chatMessage.save();
                console.log("Chat message sent:", message);
                
                // Update chat's last message
                const Chat = Parse.Object.extend('Chat');
                const chatQuery = new Parse.Query(Chat);
                const chat = await chatQuery.get(chatId);
                chat.set('lastMessage', message);
                chat.set('lastMessageTime', new Date());
                await chat.save();
                
                // Reload messages if in current chat
                if (currentChatId === chatId) {
                    displayChatMessages(chatId);
                }
                
                return true;
                
            } catch (error) {
                console.error("Error sending chat message:", error);
                return false;
            }
        }


        

        

        

        

        

        


        // Send list of emails and set as admin/staff
        async function sendAdminStaffList() {
            if (!isAdmin()) {
                alert('Only admins can send admin/staff lists');
                return;
            }
            
            const emailList = prompt(`
Enter email addresses (one per line):

Example:
john.doe@insuratec.com
jane.smith@insuratec.com
mike.wilson@insuratec.com

These users will be set as ADMIN and STAFF.
            `);
            
            if (!emailList || emailList.trim() === '') return;
            
            const emails = emailList.split('\n').map(email => email.trim()).filter(email => email);
            
            if (emails.length === 0) {
                alert('No valid emails provided');
                return;
            }
            
            const confirmMessage = `Are you sure you want to set these ${emails.length} users as ADMIN and STAFF?\n\n${emails.join('\n')}`;
            
            if (!confirm(confirmMessage)) return;
            
            await processAdminStaffList(emails);
        }
        
        // Process the list of emails
        async function processAdminStaffList(emails) {
            try {
                let successCount = 0;
                let errorCount = 0;
                let results = [];
                
                for (const email of emails) {
                    try {
                        const result = await createOrUpdateUserFromEmail(email, 'admin', true);
                        if (result.success) {
                            successCount++;
                            results.push(`✅ ${email} - Created/Updated as Admin & Staff`);
                        } else {
                            errorCount++;
                            results.push(`❌ ${email} - ${result.error}`);
                        }
                    } catch (error) {
                        errorCount++;
                        results.push(`❌ ${email} - Error: ${error.message}`);
                    }
                }
                
                // Show results
                showAdminStaffResults(successCount, errorCount, results);
                
            } catch (error) {
                console.error("Error processing admin/staff list:", error);
                alert('Error processing email list');
            }
        }
        
        // Create or update user from email
        async function createOrUpdateUserFromEmail(email, role = 'admin', staff = true) {
            try {
                const User = Parse.Object.extend('_User');
                const query = new Parse.Query(User);
                
                // Try to find user by email
                query.equalTo('email', email);
                let user = await query.first();
                
                if (!user) {
                    // Create new user
                    user = new User();
                    user.set('username', email);
                    user.set('email', email);
                    user.set('password', 'admin_setup_' + Math.random().toString(36).slice(-10));
                    user.set('name', email.split('@')[0]); // Use email prefix as name
                }
                
                // Update user info
                user.set('role', role);
                user.set('staff', staff);
                user.set('last_admin_update', new Date());
                
                await user.save();
                console.log(`User ${email} set as ${role} and staff: ${staff}`);
                
                return { success: true, user: user };
                
            } catch (error) {
                console.error(`Error creating/updating user ${email}:`, error);
                return { success: false, error: error.message };
            }
        }
        
        // Show results modal
        function showAdminStaffResults(successCount, errorCount, results) {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                background: rgba(0,0,0,0.5); z-index: 10000; display: flex; 
                align-items: center; justify-content: center;
            `;
            
            const modalContent = document.createElement('div');
            modalContent.style.cssText = `
                background: white; padding: 20px; border-radius: 10px; 
                max-width: 600px; max-height: 80vh; overflow-y: auto;
            `;
            
            modalContent.innerHTML = `
                <h3>Admin/Staff Setup Results</h3>
                <div style="margin: 15px 0;">
                    <div style="color: #4CAF50; font-weight: bold;">✅ Success: ${successCount}</div>
                    <div style="color: #f44336; font-weight: bold;">❌ Errors: ${errorCount}</div>
                </div>
                <div style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #f9f9f9;">
                    ${results.map(result => `<div style="margin: 5px 0; font-size: 12px;">${result}</div>`).join('')}
                </div>
                <div style="margin-top: 15px;">
                    <button onclick="this.closest('.modal').remove()" style="background: #666; color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer;">Close</button>
                    <button onclick="loadStaffUsers(); this.closest('.modal').remove();" style="background: #4CAF50; color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-left: 10px;">Refresh Staff List</button>
                </div>
            `;
            
            modal.appendChild(modalContent);
            document.body.appendChild(modal);
        }
        
        // Quick setup for common admin emails
        async function quickAdminSetup() {
            if (!isAdmin()) {
                alert('Only admins can perform quick admin setup');
                return;
            }
            
            const commonEmails = [
                'admin@insuratec.com',
                'manager@insuratec.com',
                'support@insuratec.com',
                'tiberio@insuratec.com'
            ];
            
            const confirmMessage = `Set these common admin emails as ADMIN and STAFF?\n\n${commonEmails.join('\n')}`;
            
            if (confirm(confirmMessage)) {
                await processAdminStaffList(commonEmails);
            }
        }

        // Header functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Search functionality
            const searchInput = document.querySelector('.search-input');
            if (searchInput) {
                searchInput.addEventListener('input', function(e) {
                    const searchTerm = e.target.value.toLowerCase();
                    searchPosts(searchTerm);
                });
            }

            // Notification bell click
            const notificationBell = document.querySelector('.notification-bell');
            if (notificationBell) {
                notificationBell.addEventListener('click', function() {
                    showNotifications();
                });
            }

            // Logout button click
            const logoutButton = document.querySelector('.logout-button');
            if (logoutButton) {
                logoutButton.addEventListener('click', function() {
                    logout();
                });
            }

            // Update user info in header
            updateUserHeader();
        });

        // Search posts function
        function searchPosts(searchTerm) {
            const posts = document.querySelectorAll('.post');
            posts.forEach(post => {
                const content = post.querySelector('.content')?.textContent.toLowerCase() || '';
                const userName = post.querySelector('.name')?.textContent.toLowerCase() || '';
                const isVisible = content.includes(searchTerm) || userName.includes(searchTerm);
                post.style.display = isVisible ? 'block' : 'none';
            });
        }

        // Show notifications function
        function showNotifications() {
            alert('Notifications feature coming soon!');
        }

        // Update user header with current user info
        function updateUserHeader() {
            const currentUser = Parse.User.current();
            if (currentUser) {
                const userName = currentUser.get('name') || currentUser.get('username') || 'User';
                const userRole = currentUser.get('role') || 'user';
                const avatarLetter = userName.charAt(0).toUpperCase();

                // Update user name
                const userNameElement = document.getElementById('user-name');
                if (userNameElement) {
                    userNameElement.textContent = userName;
                }

                // Update user role
                const userRoleElement = document.querySelector('.user-role');
                if (userRoleElement) {
                    userRoleElement.textContent = userRole;
                }

                // Update avatar letter
                const avatarLetterElement = document.querySelector('.avatar-letter');
                if (avatarLetterElement) {
                    avatarLetterElement.textContent = avatarLetter;
                }
            }
        }

        // --- Reaction Picker ---
        const emojiOptions = ['😍','😂','👍','😮','😢','😡','👌','😁'];

        function showReactionPicker(postId, btnEl) {
            // remove existing picker
            const existing = document.getElementById('global-emoji-picker');
            if (existing) existing.remove();

            const picker = document.createElement('div');
            picker.id = 'global-emoji-picker';
            picker.className = 'emoji-picker';
            const grid = document.createElement('div');
            grid.className = 'emoji-grid';
            emojiOptions.forEach(em => {
                const span = document.createElement('span');
                span.className = 'emoji-item';
                span.textContent = em;
                span.onclick = () => {
                    addReaction(postId, em);
                    picker.remove();
                };
                grid.appendChild(span);
            });
            picker.appendChild(grid);
            document.body.appendChild(picker);
            // position picker under the button
            const rect = btnEl.getBoundingClientRect();
            picker.style.left = rect.left + 'px';
            picker.style.top = (rect.bottom + window.scrollY + 6) + 'px';
            picker.style.display = 'block';

            // click outside to close
            const closeFn = (e) => {
                if (!picker.contains(e.target)) {
                    picker.remove();
                    document.removeEventListener('click', closeFn);
                }
            };
            setTimeout(() => document.addEventListener('click', closeFn), 0);
        }

        function addReaction(postId, emoji) {
            // Save reaction to Parse and reload list
            (async () => {
                if (!currentUser) { alert('Please log in to react!'); return; }
                const PostReaction = Parse.Object.extend('PostReaction');
                const pointer = { __type:'Pointer', className:'Post', objectId: postId };
                const query = new Parse.Query(PostReaction);
                query.equalTo('post', pointer);
                query.equalTo('user', currentUser);
                let existing = await query.first();
                if (existing) {
                    if (existing.get('emoji') === emoji) {
                        await existing.destroy();
                    } else {
                        existing.set('emoji', emoji);
                        await existing.save();
                    }
                } else {
                    const reactObj = new PostReaction();
                    reactObj.set('post', pointer);
                    reactObj.set('user', currentUser);
                    reactObj.set('emoji', emoji);
                    await reactObj.save();
                }
                await loadPostReactions(postId);
            })();
        }



        function handleCommentInput(postId) {
            const textarea = document.getElementById(`comment-input-${postId}`);
            const sendBtn = document.getElementById(`comment-send-${postId}`);
            if (textarea && sendBtn) {
                sendBtn.disabled = textarea.value.trim() === '';
            }
        }

        function attachCommentMedia(postId, type) {
            // Create file input element
            const input = document.createElement('input');
            input.type = 'file';
            input.style.display = 'none';
            
            if (type === 'image') {
                input.accept = 'image/*';
                input.addEventListener('change', (e) => handleCommentImageUpload(e, postId));
            } else if (type === 'file') {
                input.addEventListener('change', (e) => handleCommentFileUpload(e, postId));
            }
            
            document.body.appendChild(input);
            input.click();
            document.body.removeChild(input);
        }

        async function handleCommentImageUpload(event, postId) {
            const file = event.target.files[0];
            if (!file) return;

            try {
                // Create Parse File
                const parseFile = new Parse.File(file.name, file);
                await parseFile.save();
                
                // Add image to comment input
                const textarea = document.getElementById(`comment-input-${postId}`);
                if (textarea) {
                    const imageText = `\n[Image: ${file.name}] ${parseFile.url()}\n`;
                    textarea.value += imageText;
                    textarea.dispatchEvent(new Event('input', { bubbles: true }));
                }
                
                alert('Image uploaded successfully!');
            } catch (error) {
                console.error('Error uploading image:', error);
                alert('Failed to upload image. Please try again.');
            }
        }

        // Function to format file content for display
        function formatFileContent(content) {
            // Replace file patterns with proper file icons and links
            const filePattern = /\[File: ([^\]]+)\]\s*(https?:\/\/[^\s]+)/g;
            return content.replace(filePattern, (match, filename, url) => {
                const fileExtension = filename.split('.').pop().toLowerCase();
                let icon = '📄'; // Default file icon
                
                // Set different icons based on file type
                if (['pdf'].includes(fileExtension)) icon = '📄';
                else if (['doc', 'docx'].includes(fileExtension)) icon = '📝';
                else if (['xls', 'xlsx', 'csv'].includes(fileExtension)) icon = '📊';
                else if (['ppt', 'pptx'].includes(fileExtension)) icon = '📱';
                else if (['zip', 'rar', '7z'].includes(fileExtension)) icon = '📦';
                else if (['txt'].includes(fileExtension)) icon = '📄';
                else if (['jpg', 'jpeg', 'png', 'gif', 'bmp'].includes(fileExtension)) icon = '🖼️';
                else if (['mp4', 'avi', 'mov', 'wmv'].includes(fileExtension)) icon = '🎥';
                else if (['mp3', 'wav', 'flac', 'aac'].includes(fileExtension)) icon = '🎵';
                
                return `<div class="file-attachment" style="display: inline-flex; align-items: center; background: #f0f0f0; border-radius: 8px; padding: 8px 12px; margin: 4px 0; border: 1px solid #ddd;">
                    <span style="font-size: 18px; margin-right: 8px;">${icon}</span>
                    <a href="${url}" target="_blank" style="color: #1976d2; text-decoration: none; font-weight: 500;" title="Download ${filename}">
                        ${filename}
                    </a>
                </div>`;
            });
        }

        // Format comment content for display with Facebook-style image handling
        function formatCommentContent(content) {
            if (!content) return '';
            
            // Handle image URLs in comments (Facebook-style)
            let formattedContent = content;
            
            // Check if content contains image URLs
            const imageUrlRegex = /https:\/\/parsefiles\.back4app\.com\/[^\s]+\.(jpg|jpeg|png|gif|webp)/gi;
            const imageMatches = content.match(imageUrlRegex);
            
            if (imageMatches) {
                // Replace image URLs with clickable images
                imageMatches.forEach(url => {
                    const imgTag = `<img src="${url}" alt="Comment image" style="max-width: 100%; max-height: 150px; border-radius: 4px; cursor: pointer; margin: 4px 0;" onclick="openImagePopup('${url}')" />`;
                    formattedContent = formattedContent.replace(url, imgTag);
                });
            }
            
            // Handle image references like [Image: filename.jpg]
            formattedContent = formattedContent.replace(/\[Image: ([^\]]+)\]/g, (match, filename) => {
                // Try to construct the URL from the filename
                const url = `https://parsefiles.back4app.com/UzhGs8AnUe3qOl836wSLsVG1iVhlb5vkRknFkvyH/${filename}`;
                return `<img src="${url}" alt="Comment image" style="max-width: 100%; max-height: 150px; border-radius: 4px; cursor: pointer; margin: 4px 0;" onclick="openImagePopup('${url}')" />`;
            });
            
            return formattedContent;
        }

        // Image popup functions
        function openImagePopup(imageUrl) {
            const popupImage = document.getElementById('popupImage');
            const imagePopupModal = document.getElementById('imagePopupModal');
            const imagePopupOverlay = document.getElementById('imagePopupOverlay');
            
            if (popupImage && imagePopupModal && imagePopupOverlay) {
                popupImage.src = imageUrl;
                imagePopupModal.style.display = 'block';
                imagePopupOverlay.style.display = 'block';
            }
        }

        function closeImagePopup() {
            const imagePopupModal = document.getElementById('imagePopupModal');
            const imagePopupOverlay = document.getElementById('imagePopupOverlay');
            
            if (imagePopupModal && imagePopupOverlay) {
                imagePopupModal.style.display = 'none';
                imagePopupOverlay.style.display = 'none';
            }
        }

        async function handleCommentFileUpload(event, postId) {
            const file = event.target.files[0];
            if (!file) return;

            try {
                // Create Parse File
                const parseFile = new Parse.File(file.name, file);
                await parseFile.save();
                
                // Add file link to comment input in a structured format
                const textarea = document.getElementById(`comment-input-${postId}`);
                if (textarea) {
                    const fileText = `\n[File: ${file.name}] ${parseFile.url()}\n`;
                    textarea.value += fileText;
                    textarea.dispatchEvent(new Event('input', { bubbles: true }));
                }
                
                alert('File uploaded successfully!');
            } catch (error) {
                console.error('Error uploading file:', error);
                alert('Failed to upload file. Please try again.');
            }
        }

        // Show reaction picker when user clicks Shout
        function showReactionPicker(postId, button) {
            // Remove any existing picker
            const existingPicker = document.querySelector('.reaction-picker');
            const existingOverlay = document.querySelector('.reaction-overlay');
            if (existingPicker) existingPicker.remove();
            if (existingOverlay) existingOverlay.remove();

            // Create overlay to catch clicks outside
            const overlay = document.createElement('div');
            overlay.className = 'reaction-overlay';
            overlay.onclick = hideReactionPicker;
            document.body.appendChild(overlay);

            // Create reaction picker
            const picker = document.createElement('div');
            picker.className = 'reaction-picker';
            picker.innerHTML = `
                <div class="emoji-options">
                    <div class="emoji-option" onclick="addReaction('${postId}', '👍')">👍</div>
                    <div class="emoji-option" onclick="addReaction('${postId}', '❤️')">❤️</div>
                    <div class="emoji-option" onclick="addReaction('${postId}', '😍')">😍</div>
                    <div class="emoji-option" onclick="addReaction('${postId}', '😂')">😂</div>
                    <div class="emoji-option" onclick="addReaction('${postId}', '😮')">😮</div>
                    <div class="emoji-option" onclick="addReaction('${postId}', '😢')">😢</div>
                    <div class="emoji-option" onclick="addReaction('${postId}', '😠')">😠</div>
                </div>
            `;

            // Position picker relative to button
            document.body.appendChild(picker);
            const buttonRect = button.getBoundingClientRect();
            picker.style.display = 'block';
            picker.style.top = (buttonRect.top - picker.offsetHeight - 10) + 'px';
            picker.style.left = (buttonRect.left + buttonRect.width / 2 - picker.offsetWidth / 2) + 'px';
            overlay.style.display = 'block';
        }

        function hideReactionPicker() {
            const picker = document.querySelector('.reaction-picker');
            const overlay = document.querySelector('.reaction-overlay');
            if (picker) picker.remove();
            if (overlay) overlay.remove();
        }

        // Add reaction to post
        async function addReaction(postId, emoji) {
            if (!currentUser) {
                alert('Please log in to react!');
                return;
            }

            try {
                hideReactionPicker();

                // Check if user already has a reaction on this post
                const Reaction = Parse.Object.extend('Reaction');
                const query = new Parse.Query(Reaction);
                query.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                query.equalTo('user', currentUser);

                const existingReaction = await query.first();
                
                if (existingReaction) {
                    // If same emoji, remove reaction; if different, update it
                    if (existingReaction.get('reactionType') === emoji) {
                        await existingReaction.destroy();
                    } else {
                        existingReaction.set('reactionType', emoji);
                        await existingReaction.save();
                    }
                } else {
                    // Create new reaction
                    const reaction = new Reaction();
                    reaction.set('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                    reaction.set('user', currentUser);
                    reaction.set('reactionType', emoji);
                    await reaction.save();
                }

                // Reload reactions to update display
                await loadPostReactions(postId);
                
                // Update participants list
                await loadPostParticipants(postId);
            } catch (error) {
                console.error('Error adding reaction:', error);
                alert('Failed to add reaction. Please try again.');
            }
        }

        function showCommentEmoji(postId, btn) {
            // Create emoji picker for comment input
            const existingPicker = document.querySelector('.comment-emoji-picker');
            const existingOverlay = document.querySelector('.comment-emoji-overlay');
            if (existingPicker) existingPicker.remove();
            if (existingOverlay) existingOverlay.remove();

            // Create overlay
            const overlay = document.createElement('div');
            overlay.className = 'comment-emoji-overlay';
            overlay.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: transparent; z-index: 999;';
            overlay.onclick = () => {
                const picker = document.querySelector('.comment-emoji-picker');
                const overlay = document.querySelector('.comment-emoji-overlay');
                if (picker) picker.remove();
                if (overlay) overlay.remove();
            };
            document.body.appendChild(overlay);

            // Create emoji picker
            const picker = document.createElement('div');
            picker.className = 'comment-emoji-picker';
            picker.style.cssText = 'position: absolute; background: white; border: 1px solid #e1e5e9; border-radius: 8px; padding: 8px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); z-index: 1000; display: grid; grid-template-columns: repeat(8, 1fr); gap: 4px; max-width: 200px;';
            
            const emojis = ['😊', '😂', '❤️', '👍', '👎', '😮', '😢', '😠', '🎉', '🔥', '💯', '👏', '🙌', '🤝', '💪', '🙏'];
            
            emojis.forEach(emoji => {
                const emojiBtn = document.createElement('div');
                emojiBtn.textContent = emoji;
                emojiBtn.style.cssText = 'cursor: pointer; padding: 4px; border-radius: 4px; font-size: 16px; text-align: center; transition: background 0.2s;';
                emojiBtn.onmouseover = () => emojiBtn.style.background = '#f2f3f4';
                emojiBtn.onmouseout = () => emojiBtn.style.background = 'transparent';
                emojiBtn.onclick = () => {
                    addEmojiToComment(postId, emoji);
                    picker.remove();
                    overlay.remove();
                };
                picker.appendChild(emojiBtn);
            });

            // Position picker
            document.body.appendChild(picker);
            const btnRect = btn.getBoundingClientRect();
            picker.style.top = (btnRect.top - picker.offsetHeight - 10) + 'px';
            picker.style.left = (btnRect.left) + 'px';
            overlay.style.display = 'block';
        }

        function addEmojiToComment(postId, emoji) {
            const textarea = document.getElementById(`comment-input-${postId}`);
            if (textarea) {
                const cursorPos = textarea.selectionStart;
                const textBefore = textarea.value.substring(0, cursorPos);
                const textAfter = textarea.value.substring(cursorPos);
                textarea.value = textBefore + emoji + textAfter;
                textarea.focus();
                textarea.selectionStart = textarea.selectionEnd = cursorPos + emoji.length;
                textarea.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }

        // Band APP-style time formatting
        function getTimeAgo(date) {
            const now = new Date();
            const commentDate = new Date(date);
            const diffInMs = now - commentDate;
            const diffInMinutes = Math.floor(diffInMs / (1000 * 60));
            const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
            const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));

            if (diffInMinutes < 1) {
                return 'just now';
            } else if (diffInMinutes < 60) {
                return `${diffInMinutes} minute${diffInMinutes === 1 ? '' : 's'} ago`;
            } else if (diffInHours < 24) {
                return `${diffInHours} hour${diffInHours === 1 ? '' : 's'} ago`;
            } else if (diffInDays < 7) {
                return `${diffInDays} day${diffInDays === 1 ? '' : 's'} ago`;
            } else {
                return commentDate.toLocaleDateString('en-US', { 
                    month: 'short', 
                    day: 'numeric',
                    year: commentDate.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
                });
            }
        }

        // Show reaction picker for comments
        function showCommentReactionPicker(commentId, button) {
            if (!currentUser) {
                alert('Please log in to shout!');
                return;
            }

            const reactions = ['😊', '❤️', '👍', '🎉', '😍', '😂', '😮', '😢', '😡', '👏'];
            const picker = document.createElement('div');
            picker.className = 'reaction-picker';
            picker.style.cssText = `
                position: absolute;
                background: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 1000;
                display: flex;
                gap: 4px;
                flex-wrap: wrap;
                max-width: 200px;
            `;

            reactions.forEach(emoji => {
                const emojiBtn = document.createElement('button');
                emojiBtn.textContent = emoji;
                emojiBtn.style.cssText = `
                    background: none;
                    border: none;
                    font-size: 20px;
                    cursor: pointer;
                    padding: 4px;
                    border-radius: 4px;
                    transition: background-color 0.2s;
                `;
                emojiBtn.onmouseover = () => emojiBtn.style.backgroundColor = '#f0f0f0';
                emojiBtn.onmouseout = () => emojiBtn.style.backgroundColor = 'transparent';
                emojiBtn.onclick = () => {
                    addCommentReaction(commentId, emoji);
                    document.body.removeChild(picker);
                };
                picker.appendChild(emojiBtn);
            });

            // Position the picker
            const rect = button.getBoundingClientRect();
            picker.style.left = rect.left + 'px';
            picker.style.top = (rect.bottom + 5) + 'px';

            // Remove existing picker if any
            const existingPicker = document.querySelector('.reaction-picker');
            if (existingPicker) {
                document.body.removeChild(existingPicker);
            }

            document.body.appendChild(picker);

            // Close picker when clicking outside
            setTimeout(() => {
                document.addEventListener('click', function closePicker(e) {
                    if (!picker.contains(e.target) && e.target !== button) {
                        if (document.body.contains(picker)) {
                            document.body.removeChild(picker);
                        }
                        document.removeEventListener('click', closePicker);
                    }
                });
            }, 100);
        }

        // Add reaction to comment
        async function addCommentReaction(commentId, emoji) {
            try {
                const CommentReaction = Parse.Object.extend('CommentReaction');
                const query = new Parse.Query(CommentReaction);
                query.equalTo('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                query.equalTo('user', currentUser);

                const existingReaction = await query.first();
                
                if (existingReaction) {
                    // Update existing reaction
                    existingReaction.set('reactionType', emoji);
                    await existingReaction.save();
                } else {
                    // Add new reaction
                    const reaction = new CommentReaction();
                    reaction.set('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                    reaction.set('user', currentUser);
                    reaction.set('reactionType', emoji);
                    await reaction.save();
                }

                // Update shout count display
                await updateCommentShoutCount(commentId);
            } catch (error) {
                console.error('Error adding comment reaction:', error);
            }
        }

        // Shout individual comment (like Band APP) - kept for backward compatibility
        async function shoutComment(commentId) {
            if (!currentUser) {
                alert('Please log in to shout!');
                return;
            }

            try {
                const CommentReaction = Parse.Object.extend('CommentReaction');
                const query = new Parse.Query(CommentReaction);
                query.equalTo('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                query.equalTo('user', currentUser);

                const existingReaction = await query.first();
                
                if (existingReaction) {
                    // Remove reaction
                    await existingReaction.destroy();
                } else {
                    // Add reaction
                    const reaction = new CommentReaction();
                    reaction.set('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                    reaction.set('user', currentUser);
                    reaction.set('reactionType', '😍'); // Default shout emoji
                    await reaction.save();
                }

                // Update shout count display
                await updateCommentShoutCount(commentId);
            } catch (error) {
                console.error('Error shouting comment:', error);
            }
        }

        // Update comment shout count
        async function updateCommentShoutCount(commentId) {
            try {
                const CommentReaction = Parse.Object.extend('CommentReaction');
                const query = new Parse.Query(CommentReaction);
                query.equalTo('comment', { __type: 'Pointer', className: 'Comment', objectId: commentId });
                
                const count = await query.count();
                const countElement = document.getElementById(`comment-shout-count-${commentId}`);
                
                if (countElement) {
                    if (count > 0) {
                        countElement.textContent = `${count}`;
                        countElement.style.display = 'inline';
                    } else {
                        countElement.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('Error updating comment shout count:', error);
            }
        }

        // Reply to comment (placeholder for now)
        function replyToComment(commentId, username) {
            // Focus on the comment input and pre-fill with mention
            const textarea = document.querySelector('.comment-compose textarea');
            if (textarea) {
                textarea.focus();
                if (textarea.value.trim() === '') {
                    textarea.value = `@${username} `;
                } else {
                    textarea.value += ` @${username} `;
                }
                // Trigger input event to enable send button
                textarea.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }

        // Load post participants (author, commenters, reactors)
        async function loadPostParticipants(postId) {
            try {
                const participants = new Set(); // Use Set to avoid duplicates
                const participantData = new Map(); // Store user data
                
                // 1. Get post author
                const Post = Parse.Object.extend('Post');
                const postQuery = new Parse.Query(Post);
                postQuery.equalTo('objectId', postId);
                postQuery.include('user');
                const post = await postQuery.first();
                
                if (post && post.get('user')) {
                    const author = post.get('user');
                    const authorId = author.id;
                    participants.add(authorId);
                    
                    // Get author's picture with priority
                    let authorPicture = null;
                    if (author.get('picture')) {
                        authorPicture = author.get('picture');
                    } else if (author.get('profilePicture')) {
                        const profilePictureFile = author.get('profilePicture');
                        if (profilePictureFile && profilePictureFile.url) {
                            authorPicture = profilePictureFile.url();
                        }
                    } else if (author.get('googlePicture')) {
                        authorPicture = author.get('googlePicture');
                    } else if (author.get('avatar')) {
                        authorPicture = author.get('avatar');
                    }
                    
                    const authorName = author.get('name') || author.get('username') || author.get('email') || 'User';
                    participantData.set(authorId, {
                        name: authorName,
                        picture: authorPicture || `https://ui-avatars.com/api/?name=${encodeURIComponent(authorName)}&size=32&background=random&color=fff&format=png&rounded=true`,
                        type: 'author'
                    });
                }
                
                // 2. Get commenters
                const Comment = Parse.Object.extend('Comment');
                const commentQuery = new Parse.Query(Comment);
                commentQuery.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                commentQuery.include('user');
                const comments = await commentQuery.find();
                
                for (const comment of comments) {
                    const commenter = comment.get('user');
                    if (commenter) {
                        const commenterId = commenter.id;
                        participants.add(commenterId);
                        
                        if (!participantData.has(commenterId)) {
                            // Get commenter's picture with priority
                            let commenterPicture = null;
                            if (commenter.get('picture')) {
                                commenterPicture = commenter.get('picture');
                            } else if (commenter.get('profilePicture')) {
                                const profilePictureFile = commenter.get('profilePicture');
                                if (profilePictureFile && profilePictureFile.url) {
                                    commenterPicture = profilePictureFile.url();
                                }
                            } else if (commenter.get('googlePicture')) {
                                commenterPicture = commenter.get('googlePicture');
                            } else if (commenter.get('avatar')) {
                                commenterPicture = commenter.get('avatar');
                            }
                            
                            const commenterName = commenter.get('name') || commenter.get('username') || commenter.get('email') || 'User';
                            participantData.set(commenterId, {
                                name: commenterName,
                                picture: commenterPicture || `https://ui-avatars.com/api/?name=${encodeURIComponent(commenterName)}&size=32&background=random&color=fff&format=png&rounded=true`,
                                type: 'commenter'
                            });
                        }
                    }
                }
                
                // 3. Get reactors
                const Reaction = Parse.Object.extend('Reaction');
                const reactionQuery = new Parse.Query(Reaction);
                reactionQuery.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                reactionQuery.include('user');
                const reactions = await reactionQuery.find();
                
                for (const reaction of reactions) {
                    const reactor = reaction.get('user');
                    if (reactor) {
                        const reactorId = reactor.id;
                        participants.add(reactorId);
                        
                        if (!participantData.has(reactorId)) {
                            // Get reactor's picture with priority
                            let reactorPicture = null;
                            if (reactor.get('picture')) {
                                reactorPicture = reactor.get('picture');
                            } else if (reactor.get('profilePicture')) {
                                const profilePictureFile = reactor.get('profilePicture');
                                if (profilePictureFile && profilePictureFile.url) {
                                    reactorPicture = profilePictureFile.url();
                                }
                            } else if (reactor.get('googlePicture')) {
                                reactorPicture = reactor.get('googlePicture');
                            } else if (reactor.get('avatar')) {
                                reactorPicture = reactor.get('avatar');
                            }
                            
                            const reactorName = reactor.get('name') || reactor.get('username') || reactor.get('email') || 'User';
                            participantData.set(reactorId, {
                                name: reactorName,
                                picture: reactorPicture || `https://ui-avatars.com/api/?name=${encodeURIComponent(reactorName)}&size=32&background=random&color=fff&format=png&rounded=true`,
                                type: 'reactor'
                            });
                        }
                    }
                }
                
                // Display participants
                const participantsContainer = document.getElementById(`post-participants-${postId}`);
                const participantsCount = document.getElementById(`participants-count-${postId}`);
                const participantsAvatars = document.getElementById(`participants-avatars-${postId}`);
                
                if (participantsContainer && participantsCount && participantsAvatars) {
                    const participantCount = participantData.size;
                    
                    if (participantCount > 0) {
                        participantsCount.textContent = participantCount;
                        
                                                 // Create avatar elements (show up to 8 participants)
                         const avatarElements = Array.from(participantData.values())
                             .slice(0, 8)
                             .map(participant => {
                                 const isAuthor = participant.type === 'author';
                                 const avatarClass = isAuthor ? 'participant-avatar author' : 'participant-avatar';
                                 const title = isAuthor ? `${participant.name} (Author)` : participant.name;
                                 
                                 return `<div class="${avatarClass}" title="${title}">
                                     <img src="${participant.picture}" alt="${participant.name}" 
                                          onError="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(participant.name)}&size=32&background=cccccc&color=fff&format=png&rounded=true'"/>
                                     ${isAuthor ? '<div class="author-badge">★</div>' : ''}
                                 </div>`;
                             })
                             .join('');
                        
                        participantsAvatars.innerHTML = avatarElements;
                        participantsContainer.style.display = 'block';
                        
                                                 // Show more indicator if there are more than 8 participants
                         if (participantCount > 8) {
                             participantsAvatars.innerHTML += `<div class="more-participants">+${participantCount - 8}</div>`;
                         }
                    } else {
                        participantsContainer.style.display = 'none';
                    }
                }
                
                console.log(`📊 Loaded ${participantCount} participants for post ${postId}`);
            } catch (error) {
                console.error('Error loading post participants:', error);
            }
        }

        // Enhanced loadPostReactions to show reaction avatars like Band APP
        async function loadPostReactions(postId) {
            try {
                const Reaction = Parse.Object.extend('Reaction');
                const query = new Parse.Query(Reaction);
                query.equalTo('post', { __type: 'Pointer', className: 'Post', objectId: postId });
                query.include('user');
                query.ascending('createdAt');
                
                const reactions = await query.find();
                
                // Update reaction avatars display
                const avatarDiv = document.getElementById(`reaction-avatars-${postId}`);
                if (avatarDiv && reactions.length > 0) {
                    // Show up to 6 unique reactions
                    avatarDiv.innerHTML = reactions.slice(0, 6).map(reaction => {
                        const u = reaction.get('user');
                        const emojiChar = reaction.get('reactionType') || '😍';
                        let pic = null;
                        
                        // Try multiple ways to get user picture
                        if (u) {
                            // Google profile picture (most common)
                            if (u.get('picture')) {
                                pic = u.get('picture');
                            }
                            // Parse File object
                            else if (u.get('profilePicture') && u.get('profilePicture').url) {
                                pic = u.get('profilePicture').url();
                            }
                            // Custom avatar field
                            else if (u.get('avatar')) {
                                pic = u.get('avatar');
                            }
                            // Profile image field
                            else if (u.get('profileImage')) {
                                pic = u.get('profileImage');
                            }
                        }
                        
                        // Fallback to initials if no picture found
                        if (!pic) {
                            const userName = u ? (u.get('name') || u.get('username') || u.get('email') || 'User') : 'User';
                            const initials = userName.split(' ').map(n => n.charAt(0)).join('').toUpperCase().substring(0, 2);
                            pic = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&size=36&background=random&color=fff&format=png&rounded=true`;
                        }
                        
                        const userName = u ? (u.get('name') || u.get('username') || 'User') : 'User';
                        const title = `${userName} reacted with ${emojiChar}`;
                        
                        return `<div class="avatar-wrapper" title="${title}">
                                  <img src="${pic}" alt="${title}" onError="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&size=36&background=cccccc&color=fff&format=png&rounded=true'"/>
                                  <div class="overlay-emoji">${emojiChar}</div>
                                </div>`;
                    }).join('');
                    avatarDiv.style.display = 'flex';
                } else if (avatarDiv) {
                    avatarDiv.style.display = 'none';
                }
                
                // Update total reaction count in like button
                const likeCountSpan = document.getElementById(`like-count-${postId}`);
                if (likeCountSpan) {
                    if (reactions.length > 0) {
                        likeCountSpan.textContent = reactions.length;
                        likeCountSpan.style.display = 'inline';
                    } else {
                        likeCountSpan.style.display = 'none';
                    }
                }
            } catch(err) { 
                console.error('loadPostReactions error', err); 
            }
        }

        // DEBUG: Function to test comment system from console
        function debugComments() {
            console.log('🔧 DEBUG: Available posts on page:');
            const posts = document.querySelectorAll('[id^="comments-section-"]');
            posts.forEach(post => {
                const postId = post.id.replace('comments-section-', '');
                console.log(`  Post ID: ${postId}`);
                console.log(`  Comments section:`, post);
                console.log(`  Comment button:`, document.getElementById(`comment-btn-${postId}`));
                console.log(`  Shout button:`, document.getElementById(`like-${postId}`));
                console.log(`  Display style:`, post.style.display);
            });
            
            if (posts.length === 0) {
                console.log('🔧 ERROR: No comment sections found on page!');
            }
        }

        // DEBUG: Function to test post actions
        function testPostActions() {
            console.log('🔧 DEBUG: Testing post actions...');
            const posts = document.querySelectorAll('[id^="comments-section-"]');
            if (posts.length > 0) {
                const firstPost = posts[0];
                const postId = firstPost.id.replace('comments-section-', '');
                console.log(`🔧 DEBUG: Testing with post ID: ${postId}`);
                
                // Test shout button
                const shoutBtn = document.getElementById(`like-${postId}`);
                console.log('🔧 DEBUG: Shout button found:', !!shoutBtn);
                if (shoutBtn) {
                    console.log('🔧 DEBUG: Shout button onclick:', shoutBtn.onclick);
                    console.log('🔧 DEBUG: Shout button getAttribute onclick:', shoutBtn.getAttribute('onclick'));
                }
                
                // Test comment button
                const commentBtn = document.getElementById(`comment-btn-${postId}`);
                console.log('🔧 DEBUG: Comment button found:', !!commentBtn);
                if (commentBtn) {
                    console.log('🔧 DEBUG: Comment button onclick:', commentBtn.onclick);
                    console.log('🔧 DEBUG: Comment button getAttribute onclick:', commentBtn.getAttribute('onclick'));
                }
            } else {
                console.log('🔧 ERROR: No posts found to test!');
            }
        }

        // LeaderBoards collapsible functionality
        function toggleLeaderboards() {
            const content = document.getElementById('leaderboards-content');
            const header = document.querySelector('.leaderboards-header');
            const icon = document.getElementById('leaderboards-icon');
            
            if (content.style.display === 'none') {
                // Expand
                content.style.display = 'block';
                header.classList.remove('collapsed');
                icon.textContent = '▼';
                console.log('LeaderBoards expanded');
            } else {
                // Collapse
                content.style.display = 'none';
                header.classList.add('collapsed');
                icon.textContent = '▶';
                console.log('LeaderBoards collapsed');
            }
        }
        

        
        // Filter functionality
        function switchFilter(filterType) {
            const filterBtns = document.querySelectorAll('.filter-btn');
            filterBtns.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            console.log('Switched to filter:', filterType);
            // You can implement actual filtering logic here
        }
        
        // Tab functionality
        function switchTab(tabType) {
            const tabBtns = document.querySelectorAll('.tab-btn');
            tabBtns.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            console.log('Switched to tab:', tabType);
            // You can implement actual tab switching logic here
        }
        
        // Custom filter functionality
        function handleCustomFilter() {
            const customFilterRadio = document.querySelector('input[name="audience"][value="custom"]');
            if (customFilterRadio && customFilterRadio.checked) {
                // Show custom filter modal or options
                showToast('Custom filter feature coming soon! 🎯', 'info');
                // You can implement custom filter logic here
            }
        }

        // Post Settings Functions
        function showPostSettings() {
            const settingsModal = document.getElementById('settingsModal');
            const settingsOverlay = document.getElementById('settingsModalOverlay');
            
            settingsModal.style.display = 'block';
            settingsOverlay.style.display = 'block';
            
            // Set default datetime for scheduling
            const now = new Date();
            const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
            document.getElementById('scheduleDateTime').value = localDateTime;
            
            console.log('Post settings modal opened');
        }

        function closeSettingsModal() {
            const settingsModal = document.getElementById('settingsModal');
            const settingsOverlay = document.getElementById('settingsModalOverlay');
            
            settingsModal.style.display = 'none';
            settingsOverlay.style.display = 'none';
            
            console.log('Post settings modal closed');
        }

        function savePostSettings() {
            const settings = {
                visibility: document.getElementById('postVisibility').value,
                allowComments: document.getElementById('allowComments').checked,
                allowReactions: document.getElementById('allowReactions').checked,
                notifyAudience: document.getElementById('notifyAudience').checked,
                sendAsAnnouncement: document.getElementById('sendAsAnnouncement').checked,
                schedulePost: document.getElementById('schedulePost').checked,
                scheduleDateTime: document.getElementById('scheduleDateTime').value,
                autoDelete: document.getElementById('autoDelete').value,
                pinToTop: document.getElementById('pinToTop').checked
            };
            
            // Store settings in sessionStorage for use when posting
            sessionStorage.setItem('postSettings', JSON.stringify(settings));
            
            showToast('Post settings saved! ⚙️', 'success');
            closeSettingsModal();
            
            console.log('Post settings saved:', settings);
        }

        // Toggle schedule options visibility
        document.addEventListener('DOMContentLoaded', function() {
            const scheduleToggle = document.getElementById('schedulePost');
            const scheduleOptions = document.getElementById('scheduleOptions');
            
            if (scheduleToggle && scheduleOptions) {
                scheduleToggle.addEventListener('change', function() {
                    scheduleOptions.style.display = this.checked ? 'block' : 'none';
                });
            }
            
                    // Set default audience selection
        selectAudience('master_agency');
        
        // Set current user name in search box
        const currentUser = Parse.User.current();
        if (currentUser) {
            const searchInput = document.getElementById('audienceSearch');
            if (searchInput) {
                const userName = currentUser.get('name') || 
                               currentUser.get('username') || 
                               currentUser.get('email') || 
                               'Current User';
                searchInput.value = userName;
                searchInput.placeholder = userName;
            }
        }
        });
        
        // Audience Selection Functions
        function selectAudience(audienceType) {
            // Remove selected class from all buttons
            document.querySelectorAll('.audience-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
            
            // Add selected class to clicked button
            const selectedBtn = document.querySelector(`[data-value="${audienceType}"]`);
            if (selectedBtn) {
                selectedBtn.classList.add('selected');
            }
            
            // Store selected audience for form submission
            sessionStorage.setItem('selectedAudience', audienceType);
            
            console.log('Selected audience:', audienceType);
        }
        
        // Audience search functionality with auto-save
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('audienceSearch');
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    
                    // Auto-save the current user as audience when search box changes
                    const currentUser = Parse.User.current();
                    if (currentUser && searchTerm) {
                        const userName = currentUser.get('name') || 
                                       currentUser.get('username') || 
                                       currentUser.get('email') || 
                                       'Current User';
                        
                        // Store the user-specific audience
                        sessionStorage.setItem('selectedAudience', 'direct_agents');
                        sessionStorage.setItem('audienceUser', userName);
                        
                        console.log('Auto-saved audience for user:', userName);
                    }
                    
                    // Filter buttons based on search term
                    const buttons = document.querySelectorAll('.audience-btn');
                    buttons.forEach(btn => {
                        const text = btn.textContent.toLowerCase();
                        if (text.includes(searchTerm)) {
                            btn.style.display = 'block';
                        } else {
                            btn.style.display = searchTerm ? 'none' : 'block';
                        }
                    });
                });
            }
            
            // Set default audience selection
            selectAudience('master_agency');
            
            // Set current user name in search box
            const currentUser = Parse.User.current();
            if (currentUser) {
                const searchInput = document.getElementById('audienceSearch');
                if (searchInput) {
                    const userName = currentUser.get('name') || 
                                   currentUser.get('username') || 
                                   currentUser.get('email') || 
                                   'Current User';
                    searchInput.value = userName;
                    searchInput.placeholder = userName;
                }
            }
            
            // Update audience counts with real data
            updateAudienceCounts();
        });

        // User Features Org Functions
        async function createUserFeaturesOrg(userId, orgstring, baseshop, directUpline) {
            try {
                const UserFeaturesOrg = Parse.Object.extend('user_features_org');
                const userFeatures = new UserFeaturesOrg();
                
                // Get user pointer
                const userQuery = new Parse.Query(Parse.User);
                userQuery.equalTo('objectId', userId);
                const user = await userQuery.first({ useMasterKey: true });
                
                if (!user) {
                    throw new Error('User not found');
                }
                
                userFeatures.set('user', user);
                userFeatures.set('orgstring', orgstring || '');
                userFeatures.set('baseshop', baseshop || '');
                userFeatures.set('DirectUpline', directUpline || '');
                userFeatures.set('active', true);
                
                await userFeatures.save({ useMasterKey: true });
                console.log('User features org created for user:', userId);
                return userFeatures;
                
            } catch (error) {
                console.error('Error creating user features org:', error);
                throw error;
            }
        }
        
        async function updateUserFeaturesOrg(userId, orgstring, baseshop, directUpline) {
            try {
                const UserFeaturesOrg = Parse.Object.extend('user_features_org');
                const query = new Parse.Query(UserFeaturesOrg);
                
                // Get user pointer
                const userQuery = new Parse.Query(Parse.User);
                userQuery.equalTo('objectId', userId);
                const user = await userQuery.first({ useMasterKey: true });
                
                if (!user) {
                    throw new Error('User not found');
                }
                
                query.equalTo('user', user);
                const userFeatures = await query.first({ useMasterKey: true });
                
                if (userFeatures) {
                    userFeatures.set('orgstring', orgstring || '');
                    userFeatures.set('baseshop', baseshop || '');
                    userFeatures.set('DirectUpline', directUpline || '');
                    await userFeatures.save({ useMasterKey: true });
                    console.log('User features org updated for user:', userId);
                } else {
                    // Create new if doesn't exist
                    await createUserFeaturesOrg(userId, orgstring, baseshop, directUpline);
                }
                
            } catch (error) {
                console.error('Error updating user features org:', error);
                throw error;
            }
        }
        
        async function getUsersByAudience(audienceType, searchTerm = '') {
            try {
                const UserFeaturesOrg = Parse.Object.extend('user_features_org');
                const query = new Parse.Query(UserFeaturesOrg);
                query.equalTo('active', true);
                query.include('user');
                
                // Filter based on audience type
                switch(audienceType) {
                    case 'direct_agents':
                        // Users with same DirectUpline as current user
                        const currentUserFeatures = await getUserFeaturesOrg(Parse.User.current().id);
                        if (currentUserFeatures && currentUserFeatures.get('DirectUpline')) {
                            query.equalTo('DirectUpline', currentUserFeatures.get('DirectUpline'));
                        }
                        break;
                        
                    case 'base_shop':
                        // Users with same baseshop as current user
                        const currentUserFeatures2 = await getUserFeaturesOrg(Parse.User.current().id);
                        if (currentUserFeatures2 && currentUserFeatures2.get('baseshop')) {
                            query.equalTo('baseshop', currentUserFeatures2.get('baseshop'));
                        }
                        break;
                        
                    case 'master_agency':
                        // Users with same orgstring as current user
                        const currentUserFeatures3 = await getUserFeaturesOrg(Parse.User.current().id);
                        if (currentUserFeatures3 && currentUserFeatures3.get('orgstring')) {
                            query.equalTo('orgstring', currentUserFeatures3.get('orgstring'));
                        }
                        break;
                        
                    case 'insuratec':
                        // All active users (company-wide)
                        // No additional filtering needed
                        break;
                        
                    default:
                        // Default to direct agents
                        const currentUserFeatures4 = await getUserFeaturesOrg(Parse.User.current().id);
                        if (currentUserFeatures4 && currentUserFeatures4.get('DirectUpline')) {
                            query.equalTo('DirectUpline', currentUserFeatures4.get('DirectUpline'));
                        }
                }
                
                // Add search term filtering if provided
                if (searchTerm) {
                    const userQuery = new Parse.Query(Parse.User);
                    userQuery.matches('name', searchTerm, 'i');
                    query.matchesQuery('user', userQuery);
                }
                
                const results = await query.find({ useMasterKey: true });
                console.log(`Found ${results.length} users for audience: ${audienceType}`);
                return results;
                
            } catch (error) {
                console.error('Error getting users by audience:', error);
                throw error;
            }
        }
        
        async function getUserFeaturesOrg(userId) {
            try {
                const UserFeaturesOrg = Parse.Object.extend('user_features_org');
                const query = new Parse.Query(UserFeaturesOrg);
                
                const userQuery = new Parse.Query(Parse.User);
                userQuery.equalTo('objectId', userId);
                const user = await userQuery.first({ useMasterKey: true });
                
                if (!user) {
                    return null;
                }
                
                query.equalTo('user', user);
                const userFeatures = await query.first({ useMasterKey: true });
                
                return userFeatures;
                
            } catch (error) {
                console.error('Error getting user features org:', error);
                return null;
            }
        }
        
        async function getAudienceCount(audienceType) {
            try {
                const users = await getUsersByAudience(audienceType);
                return users.length;
            } catch (error) {
                console.error('Error getting audience count:', error);
                return 0;
            }
        }
        
        // Update audience buttons with real counts
        async function updateAudienceCounts() {
            try {
                const audienceTypes = ['direct_agents', 'base_shop', 'master_agency', 'insuratec'];
                const mockCounts = [56, 500, 25000, 30000]; // Fallback counts
                
                for (let i = 0; i < audienceTypes.length; i++) {
                    const audienceType = audienceTypes[i];
                    const count = await getAudienceCount(audienceType);
                    const displayCount = count > 0 ? count : mockCounts[i];
                    
                    const button = document.querySelector(`[data-value="${audienceType}"]`);
                    if (button) {
                        const audienceName = button.textContent.split(' (')[0];
                        button.textContent = `${audienceName} (${displayCount.toLocaleString()})`;
                    }
                }
                
                console.log('Audience counts updated');
                
            } catch (error) {
                console.error('Error updating audience counts:', error);
            }
        }

        // Hot Links functionality
        function openHotLink(linkType) {
            console.log('Opening hot link:', linkType);
            
            switch(linkType) {
                case 'dashboard':
                    showToast('Dashboard feature coming soon! 📊', 'info');
                    // You can implement dashboard functionality here
                    break;
                case 'reports':
                    showToast('Reports feature coming soon! 📈', 'info');
                    // You can implement reports functionality here
                    break;
                case 'calendar':
                    showToast('Calendar feature coming soon! 📅', 'info');
                    // You can implement calendar functionality here
                    break;
                            case 'admin-messages':
                showToast('Admin Messages feature coming soon! 💬', 'info');
                // You can implement admin messages functionality here
                break;
            case 'policy-info':
                showPolicyInfoModal();
                break;
                case 'settings':
                    showToast('Settings feature coming soon! ⚙️', 'info');
                    // You can implement settings functionality here
                    break;
                case 'help':
                    showToast('Help feature coming soon! ❓', 'info');
                    // You can implement help functionality here
                    break;
                default:
                    showToast('Feature coming soon! 🚀', 'info');
            }
        }
        
        // Helper functions for audience and post type display names
        function getAudienceDisplayName(audience) {
            const audienceMap = {
                'direct_agents': 'Direct Agents',
                'base_shop': 'Base Shop',
                'master_agency': 'Master Agency',
                'insuratec': 'InsuraTec'
            };
            return audienceMap[audience] || 'Master Agency';
        }
        
        function getPostTypeDisplayName(postType) {
            const postTypeMap = {
                'general': 'General',
                'promotion': 'Promotion',
                'life_sales': 'Life Sales',
                'equity_sales': 'Equity Sales'
            };
            return postTypeMap[postType] || 'General';
        }
        
        // Make functions available globally for testing
        window.debugComments = debugComments;
        window.testPostActions = testPostActions;
        window.testUserPermissions = testUserPermissions;
        window.fixOrphanedPosts = fixOrphanedPosts;
        window.fixUserPermissions = fixUserPermissions;
        window.addUserInfoToPosts = addUserInfoToPosts;
        window.debugProfilePicture = debugProfilePicture;
        window.updateUserHeader = updateUserHeader;

        window.testProfileUpload = testProfileUpload;
        window.simpleProfileUpload = simpleProfileUpload;

        
        // Simplified profile upload function for testing
        async function simpleProfileUpload() {
            console.log('🔧 Starting simple profile upload test...');
            
            // Create a file input programmatically
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            
            input.onchange = async function(event) {
                const file = event.target.files[0];
                if (!file) {
                    console.log('No file selected');
                    return;
                }
                
                console.log('File selected:', file.name, file.type, file.size);
                
                try {
                    const currentUser = Parse.User.current();
                    if (!currentUser) {
                        alert('Please log in first');
                        return;
                    }
                    
                    console.log('Creating Parse File...');
                    const parseFile = new Parse.File(`test_${Date.now()}.jpg`, file);
                    
                    console.log('Uploading to Parse...');
                    await parseFile.save();
                    
                    console.log('File uploaded successfully:', parseFile.url());
                    
                    console.log('Updating user profile...');
                    currentUser.set('profilePicture', parseFile);
                    await currentUser.save();
                    
                    console.log('Profile updated! Refreshing header...');
                    updateUserHeader();
                    
                    alert('Upload successful! Check console for details.');
                    
                } catch (error) {
                    console.error('Upload failed:', error);
                    alert('Upload failed: ' + error.message);
                }
            };
            
            input.click();
        }
        
        // Test function for profile upload debugging
        function testProfileUpload() {
            console.log('🧪 Testing Profile Upload Components');
            
            // Check if user is logged in
            const currentUser = Parse.User.current();
            console.log('1. User logged in:', !!currentUser);
            if (currentUser) {
                console.log('   - User ID:', currentUser.id);
                console.log('   - Username:', currentUser.get('username'));
            }
            
            // Check file input element
            const input = document.getElementById('profile-picture-input');
            console.log('2. File input element:', !!input);
            if (input) {
                console.log('   - Input type:', input.type);
                console.log('   - Input accept:', input.accept);
                console.log('   - Input multiple:', input.multiple);
            } else {
                console.error('   ❌ File input element not found!');
            }
            
            // Check avatar elements
            const userAvatar = document.getElementById('user-avatar');
            const userAvatarImg = document.getElementById('user-avatar-img');
            const userAvatarLetter = document.getElementById('user-avatar-letter');
            
            console.log('3. Avatar elements:');
            console.log('   - user-avatar:', !!userAvatar);
            console.log('   - user-avatar-img:', !!userAvatarImg);
            console.log('   - user-avatar-letter:', !!userAvatarLetter);
            
            if (userAvatar) {
                console.log('   - onClick handler:', userAvatar.onclick ? 'Present' : 'Missing');
            }
            
            // Check Parse initialization
            console.log('4. Parse status:');
            console.log('   - Parse object:', !!window.Parse);
            console.log('   - Parse.File:', !!Parse.File);
            console.log('   - Parse.User:', !!Parse.User);
            
            // Test opening upload dialog
            console.log('5. Testing upload dialog...');
            try {
                openProfilePictureUpload();
                console.log('   ✅ Upload dialog opened successfully');
            } catch (error) {
                console.error('   ❌ Error opening upload dialog:', error);
            }
        }
        
        // Popup Menu Functions
        function showAddOptionsPopup() {
            const popup = document.getElementById('addOptionsPopup');
            const addButton = document.querySelector('.action-btn[onclick*="add"]');
            
            if (popup && addButton) {
                const buttonRect = addButton.getBoundingClientRect();
                popup.style.left = buttonRect.left + 'px';
                popup.style.top = (buttonRect.bottom + 5) + 'px';
                popup.style.display = 'block';
                
                // Close popup when clicking outside
                setTimeout(() => {
                    document.addEventListener('click', closeAddOptionsPopupOutside);
                }, 100);
            }
        }
        
        function closeAddOptionsPopup() {
            const popup = document.getElementById('addOptionsPopup');
            if (popup) {
                popup.style.display = 'none';
                document.removeEventListener('click', closeAddOptionsPopupOutside);
            }
        }
        
        function closeAddOptionsPopupOutside(event) {
            const popup = document.getElementById('addOptionsPopup');
            const addButton = document.querySelector('.action-btn[onclick*="add"]');
            
            if (popup && !popup.contains(event.target) && !addButton.contains(event.target)) {
                closeAddOptionsPopup();
            }
        }
        
        function selectAddOption(type) {
            closeAddOptionsPopup();
            switch(type) {
                case 'photo':
                    showImageUploadDialog();
                    break;
                case 'document':
                    showDocumentUploadDialog();
                    break;
                case 'file':
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = '*/*';
                    input.onchange = function(e) {
                        const file = e.target.files[0];
                        if (file) {
                            insertFileIntoPost(file, 'file');
                        }
                    };
                    input.click();
                    break;
                case 'location':
                    const locationName = prompt('Enter location name:');
                    if (locationName) {
                        const textarea = document.getElementById('postTextarea');
                        const cursorPos = textarea.selectionStart;
                        const insertText = `📍 Location: ${locationName}`;
                        const beforeText = textarea.value.substring(0, cursorPos);
                        const afterText = textarea.value.substring(cursorPos);
                        textarea.value = beforeText + insertText + afterText;
                        textarea.focus();
                        textarea.setSelectionRange(cursorPos + insertText.length, cursorPos + insertText.length);
                        showToast(`Location "${locationName}" added`, 'success');
                    }
                    break;
                case 'chart':
                    const chartType = prompt('Enter chart type (e.g., "Sales", "Revenue", "Growth"):');
                    if (chartType) {
                        const textarea = document.getElementById('postTextarea');
                        const cursorPos = textarea.selectionStart;
                        const insertText = `📊 Chart: ${chartType}`;
                        const beforeText = textarea.value.substring(0, cursorPos);
                        const afterText = textarea.value.substring(cursorPos);
                        textarea.value = beforeText + insertText + afterText;
                        textarea.focus();
                        textarea.setSelectionRange(cursorPos + insertText.length, cursorPos + insertText.length);
                        showToast(`Chart "${chartType}" added`, 'success');
                    }
                    break;
            }
        }
        
        function showEmojiPickerModal() {
            document.getElementById('emojiPickerModalOverlay').style.display = 'flex';
            document.getElementById('emojiPickerModal').style.display = 'block';
        }
        
        function closeEmojiPickerModal() {
            document.getElementById('emojiPickerModalOverlay').style.display = 'none';
            document.getElementById('emojiPickerModal').style.display = 'none';
        }


        
        function selectEmoji(emoji) {
            const textarea = document.getElementById('postTextarea');
            const cursorPos = textarea.selectionStart;
            const beforeText = textarea.value.substring(0, cursorPos);
            const afterText = textarea.value.substring(cursorPos);
            textarea.value = beforeText + emoji + afterText;
            textarea.focus();
            textarea.setSelectionRange(cursorPos + emoji.length, cursorPos + emoji.length);
            showToast('Emoji added', 'success');
            closeEmojiPickerModal();
        }

        function addReactionToPost(emoji) {
            // Get the current post being created
            const postTextarea = document.getElementById('postTextarea');
            const postContent = postTextarea.value;
            
            // Add the emoji reaction to the post content
            if (postContent.trim() === '') {
                postTextarea.value = emoji;
            } else {
                postTextarea.value = postContent + ' ' + emoji;
            }
            
            // Close emoji picker
            closeEmojiPickerModal();
            
            // Focus back to textarea
            postTextarea.focus();
            
            console.log(`Reaction added to post: ${emoji}`);
        }
        
        function selectCustomEmoji() {
            const customEmoji = document.getElementById('customEmoji').value.trim();
            if (customEmoji) {
                selectEmoji(customEmoji);
                document.getElementById('customEmoji').value = '';
            } else {
                showToast('Please enter a custom emoji', 'error');
            }
        }
        
        // Policy Info Functions
        function showPolicyInfoModal() {
            document.getElementById('policyInfoModalOverlay').style.display = 'flex';
            document.getElementById('policyInfoModal').style.display = 'block';
        }
        
        function closePolicyInfoModal() {
            document.getElementById('policyInfoModalOverlay').style.display = 'none';
            document.getElementById('policyInfoModal').style.display = 'none';
        }
        
        // OpenPhone Interface Functions
        function switchOpenPhoneTab(tabName) {
            // Update tab styles
            document.querySelectorAll('.tab-btn').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            console.log('Switched to tab:', tabName);
            // You can implement actual tab switching logic here
        }
        
        function selectConversation(phoneNumber) {
            // Update active conversation
            document.querySelectorAll('.conversation-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
            
            // Update contact number in chat header
            const contactNumber = document.querySelector('.contact-number');
            if (contactNumber) {
                contactNumber.textContent = phoneNumber;
            }
            
            // Clear unread badge
            const unreadBadge = event.currentTarget.querySelector('.unread-badge');
            if (unreadBadge) {
                unreadBadge.style.display = 'none';
            }
            
            console.log('Selected conversation:', phoneNumber);
            // You can implement actual conversation loading logic here
        }
        
        function sendMessage() {
            const messageInput = document.querySelector('.message-input');
            const messageText = messageInput.value.trim();
            
            if (!messageText) {
                return;
            }
            
            // Create new message element
            const messagesArea = document.querySelector('.messages-area');
            const newMessage = document.createElement('div');
            newMessage.className = 'message outgoing';
            
            const currentTime = new Date().toLocaleTimeString('en-US', { 
                hour: 'numeric', 
                minute: '2-digit',
                hour12: true 
            });
            
            newMessage.innerHTML = `
                <div class="message-bubble">
                    <div class="message-text">${messageText}</div>
                    <div class="message-time">${currentTime}</div>
                </div>
                <div class="message-logo">TM</div>
            `;
            
            // Add message to chat
            messagesArea.appendChild(newMessage);
            
            // Clear input
            messageInput.value = '';
            
            // Scroll to bottom
            messagesArea.scrollTop = messagesArea.scrollHeight;
            
            console.log('Message sent:', messageText);
        }
        
        // Add enter key support for sending messages
        document.addEventListener('DOMContentLoaded', function() {
            const messageInput = document.querySelector('.message-input');
            if (messageInput) {
                messageInput.addEventListener('keypress', function(event) {
                    if (event.key === 'Enter') {
                        sendMessage();
                    }
                });
            }
        });
        
        // Tab switching functions (legacy)
        function switchPolicyTab(tabName) {
            // Update tab styles
            document.querySelectorAll('.chat-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Show/hide content
            const chatsContent = document.getElementById('chats-content');
            const leadsContent = document.getElementById('leads-content');
            
            if (tabName === 'leads') {
                chatsContent.style.display = 'none';
                leadsContent.style.display = 'block';
            } else {
                chatsContent.style.display = 'block';
                leadsContent.style.display = 'none';
            }
        }
        

    </script>
    
    <!-- Add Options Popup -->
    <div class="add-options-popup" id="addOptionsPopup">
        <div class="popup-option" onclick="selectAddOption('photo')">
            <span class="popup-option-icon">📷</span>
            <span class="popup-option-text">Photo</span>
        </div>
        <div class="popup-option" onclick="selectAddOption('document')">
            <span class="popup-option-icon">📄</span>
            <span class="popup-option-text">Document</span>
        </div>
        <div class="popup-option" onclick="selectAddOption('file')">
            <span class="popup-option-icon">📁</span>
            <span class="popup-option-text">File</span>
        </div>
        <div class="popup-option" onclick="selectAddOption('location')">
            <span class="popup-option-icon">📍</span>
            <span class="popup-option-text">Location</span>
        </div>
        <div class="popup-option" onclick="selectAddOption('chart')">
            <span class="popup-option-icon">📊</span>
            <span class="popup-option-text">Chart</span>
        </div>
    </div>
    
    <!-- Emoji Picker Modal -->
    <div class="modal-overlay" id="emojiPickerModalOverlay" onclick="closeEmojiPickerModal()"></div>
    <div class="modal" id="emojiPickerModal">
        <div class="modal-header">
            <h2>Choose Emoji</h2>
            <span class="close" onclick="closeEmojiPickerModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div class="emoji-options">
                <div class="emoji-option" onclick="addReactionToPost('❤️')">❤️</div>
                <div class="emoji-option" onclick="addReactionToPost('😍')">😍</div>
                <div class="emoji-option" onclick="addReactionToPost('😂')">😂</div>
                <div class="emoji-option" onclick="addReactionToPost('😮')">😮</div>
                <div class="emoji-option" onclick="addReactionToPost('😢')">😢</div>
                <div class="emoji-option" onclick="addReactionToPost('😡')">😡</div>
            </div>
            
            <div class="emoji-actions">
                <div class="emoji-action" onclick="addReactionToPost('😊')">
                    <span class="emoji">😊</span>
                    <span class="action-text">Shout</span>
                </div>
                <div class="emoji-action" onclick="addReactionToPost('💬')">
                    <span class="emoji">💬</span>
                    <span class="action-text">Hide</span>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Policy Info Modal -->
    <div class="modal-overlay" id="policyInfoModalOverlay" onclick="closePolicyInfoModal()"></div>
    <div class="modal policy-info-modal" id="policyInfoModal">
        <div class="modal-header">
            <h2>My Policy Info - OpenPhone Interface</h2>
            <span class="close" onclick="closePolicyInfoModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div class="openphone-interface">
                <!-- Left Panel: Conversation List -->
                <div class="conversation-panel">
                    <!-- Tabs -->
                    <div class="conversation-tabs">
                        <span class="tab-btn active" onclick="switchOpenPhoneTab('chats')">Chats</span>
                        <span class="tab-btn" onclick="switchOpenPhoneTab('calls')">Calls</span>
                        <div class="tab-actions">
                                                         <span class="action-btn icon-modern icon-phone"></span>
                             <span class="action-btn icon-modern icon-video"></span>
                             <span class="action-btn icon-modern icon-chat"></span>
                        </div>
                    </div>
                    
                    <!-- Filters -->
                    <div class="conversation-filters">
                        <div class="filter-dropdown">
                            <span class="filter-text">Open</span>
                            <span class="dropdown-arrow">▼</span>
                        </div>
                        <span class="filter-chip">Unread</span>
                        <span class="filter-chip">Unresponded</span>
                                                 <span class="filter-icon icon-modern icon-search"></span>
                    </div>
                    
                    <!-- Conversation List -->
                    <div class="conversation-list">
                        <div class="conversation-item active" onclick="selectConversation('5614368265')">
                            <div class="conversation-avatar">👤</div>
                            <div class="conversation-info">
                                <div class="conversation-header">
                                    <span class="conversation-name">(561) 436-8265</span>
                                    <span class="conversation-time">12:21 PM</span>
                                </div>
                                <div class="conversation-preview">Stop</div>
                                <div class="unread-badge">4</div>
                            </div>
                        </div>
                        
                        <div class="conversation-item" onclick="selectConversation('4438022550')">
                            <div class="conversation-avatar">👤</div>
                            <div class="conversation-info">
                                <div class="conversation-header">
                                    <span class="conversation-name">(443) 802-2550</span>
                                    <span class="conversation-time">1:58 PM</span>
                                </div>
                                <div class="conversation-preview">You: Tajmah Daniels, your policy is no...</div>
                            </div>
                        </div>
                        
                        <div class="conversation-item" onclick="selectConversation('5551234567')">
                            <div class="conversation-avatar">👤</div>
                            <div class="conversation-info">
                                <div class="conversation-header">
                                    <span class="conversation-name">(555) 123-4567</span>
                                    <span class="conversation-time">12:55 PM</span>
                                </div>
                                <div class="conversation-preview">You: John Smith, your policy is now...</div>
                            </div>
                        </div>
                        
                        <div class="conversation-item" onclick="selectConversation('8889990000')">
                            <div class="conversation-avatar">👤</div>
                            <div class="conversation-info">
                                <div class="conversation-header">
                                    <span class="conversation-name">(888) 999-0000</span>
                                    <span class="conversation-time">Yesterday</span>
                                </div>
                                <div class="conversation-preview">You: Sarah Johnson, your policy...</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Right Panel: Chat Interface -->
                <div class="chat-panel">
                                         <!-- Chat Header -->
                     <div class="chat-header">
                         <div class="contact-info">
                             <span class="contact-number">(561) 436-8265</span>
                         </div>
                         <div class="chat-actions">
                             <span class="chat-action icon-modern icon-phone"></span>
                             <span class="chat-action icon-modern icon-video"></span>
                             <span class="chat-action icon-modern icon-search"></span>
                             <span class="chat-action icon-modern icon-info"></span>
                             <span class="chat-action close-chat" onclick="closePolicyInfoModal()" title="Close">✕</span>
                         </div>
                     </div>
                    
                    <!-- Messages Area -->
                    <div class="messages-area">
                        <div class="message-timestamp">Yesterday 9:27 am</div>
                        
                        <!-- Outgoing Message 1 -->
                        <div class="message outgoing">
                            <div class="message-bubble">
                                <div class="message-text">
                                    Richard Gray, our records indicate you have not logged in to view your policy application details with UNITED HOME LIFE. Please click my-policy.info/dguruj5 to see details. Thank you.
                                </div>
                                <div class="message-time">9:27 AM</div>
                            </div>
                            <div class="message-logo">TM</div>
                        </div>
                        
                        <!-- Outgoing Message 2 (duplicate) -->
                        <div class="message outgoing">
                            <div class="message-bubble">
                                <div class="message-text">
                                    Richard Gray, our records indicate you have not logged in to view your policy application details with UNITED HOME LIFE. Please click my-policy.info/dguruj5 to see details. Thank you.
                                </div>
                                <div class="message-time">9:27 AM</div>
                            </div>
                            <div class="message-logo">TM</div>
                        </div>
                        
                        <!-- Incoming Message -->
                        <div class="message incoming">
                            <div class="message-bubble">
                                <div class="message-text">
                                    I am not going on with this. Thank you, Richard Gray
                                </div>
                                <div class="message-time">9:28 AM</div>
                            </div>
                        </div>
                        
                        <div class="message-timestamp">Today, 12:18 pm</div>
                        
                        <!-- Outgoing Message -->
                        <div class="message outgoing">
                            <div class="message-bubble">
                                <div class="message-text">
                                    Richard Gray, your policy is now approved with UNITED HOME LIFE Please check https://my-policy.info/dguruj5 to see application details and basic disclosures. You can reach your agent Edward Allshouse at (330) 907-8957. Policy documents will be mailed to your address on file and should arrive within 21 days. To Opt out anytime, reply STOP
                                </div>
                                <div class="message-time">12:18 PM</div>
                            </div>
                            <div class="message-logo">TM</div>
                        </div>
                        
                        <!-- Incoming Message -->
                        <div class="message incoming">
                            <div class="message-bubble">
                                <div class="message-text">
                                    Stop
                                </div>
                                <div class="message-time">12:21 PM</div>
                            </div>
                        </div>
                    </div>
                    
                                         <!-- Message Input -->
                     <div class="message-input-area">
                         <div class="input-actions">
                             <span class="input-action icon-modern icon-sparkle"></span>
                             <span class="input-action icon-modern icon-camera"></span>
                             <span class="input-action icon-modern icon-attachment"></span>
                             <span class="input-action icon-modern icon-emoji"></span>
                             <span class="input-action icon-modern icon-mic"></span>
                         </div>
                         <div class="message-input-container">
                             <input type="text" class="message-input" placeholder="Write a message..." />
                         </div>
                         <button class="send-button" onclick="sendMessage()">
                             <span class="send-icon">➤</span>
                         </button>
                     </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden file input for profile picture upload -->
    <input type="file" id="profile-picture-input" accept="image/*" style="display: none;" />
</body>
</html> 
</html> 
